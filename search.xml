<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringMVC</title>
    <url>/post/2020-02-09/SpringMVC/</url>
    <content><![CDATA[<!-- build time:Thu Feb 13 2020 19:46:32 GMT+0800 (China Standard Time) --><h2 id="三层架构-和-MVC模型"><a href="#三层架构-和-MVC模型" class="headerlink" title="三层架构 和 MVC模型"></a>三层架构 和 MVC模型</h2><ul><li><strong>三层架构</strong>：我们在<a href="https://www.jianshu.com/p/a1b278560621" target="_blank" rel="noopener">Servlet 学习笔记</a>讲过，当前 Web应用体系主要为 <strong>C/S架构</strong> 和 <strong>B/S架构</strong>。<strong>C/S架构</strong> 是一种历史悠久且技术非常成熟的一种架构，<strong>B/S架构</strong> 从 <strong>C/S架构</strong> 演变而来，属于新生代架构，在当今 Web 应用时代，是最被广泛进行使用的架构。</li></ul><p>在标准 <strong>B/S架构</strong> 中，系统分为以下三层：</p><ul><li><strong>表现层</strong>：也就是我们常说的 web 层，该层主要负责与客户端进行交互，接受客户端请求（控制层）和向客户端响应结果（展示层）。SpringMVC框架就属于表现层。</li><li><strong>业务层</strong>：也就是我们常说的 service 层，该层主要负责业务逻辑的处理。Spring框架其实属于业务层。</li><li><strong>持久层</strong>：也就是我们常说的 dao（Data Access Object，数据访问对象） 层，该层主要负责数据持久化，也即对数据库进行增删改查操作。MyBatis框架就属于持久层。</li></ul><p>整个服务器 <strong>B/S架构</strong> 简单示意图如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-e40d496cdfffca38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B/S架构"></p><ul><li><strong>MVC模型</strong>：MVC 是 Model - View - Controller 的缩写，即 模型 - 视图 - 控制器。</li></ul><a id="more"></a><p>MVC模型也是一种分层模型，与 <strong>B/S架构</strong> 一样，其也分为了三层：</p><ul><li><strong>模型（Model）</strong>：对应于数据模型，该层主要负责对数据进行封装，也就是我们常说的 dao，bean。</li><li><strong>视图（View）</strong>：用于展示模型中的数据，通常指的就是 jsp页面 或 html页面。</li><li><strong>控制器（Controller）</strong>：接收客户端请求，处理程序逻辑，从模型中获取需要的数据，显示到不同的视图上。控制器的典型角色就是 Servlet。</li></ul><p>综上：服务器 <strong>B/S架构</strong> 中，表现层的设计模型一般使用的都是 MVC。更具体来讲，宏观上看，<strong>B/S架构</strong> 三层架构之间职责明确，各层间存在一定的依赖关系，呈相互合作之势。将表现层拆分成 MVC 模型，层次更加精细，可以说将原本表现层对业务层的依赖，精细化为控制器（Controller）层对业务层的依赖，当表现层控制器（Controller）接收到请求时，就会对请求进行解析，然后将解析结果给到业务层，业务层就会调用持久层进行 CRUD 操作，然后将结果传递给表现层的模型层（Model）进行数据封装，最后返回给客户端。</p><h2 id="SpringMVC-简介"><a href="#SpringMVC-简介" class="headerlink" title="SpringMVC 简介"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 简介</h2><ul><li><strong><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a></strong>：其正式名称为 Spring Web MVC，其是以 MVC 作为设计模型，基于 Servlet API 的基础上构建的一套 <strong>请求驱动类型（请求 - 响应模型 ）</strong> 的轻量级 Web 框架，从最开始的时候就集成到 Spring框架中。</li></ul><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 目前已成为最主流的 MVC 框架之一，它通过一套注解，可以让一个 POJO 类作为请求处理的控制器（Controller），无须实现任何额外接口，对源码侵入性低，并且它还支持 RESTful 编程风格的请求。</p><h2 id="SpringMVC-优势"><a href="#SpringMVC-优势" class="headerlink" title="SpringMVC 优势"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 优势</h2><ul><li><p>采用组件化开发，组件可插拔，组件间松散耦合。</p></li><li><p>基于 MVC 设计模型，各层分工明确，扩展性极强。</p></li><li><p>无缝集成 Spring框架，无须额外配置。</p></li></ul><h2 id="SpringMVC-使用"><a href="#SpringMVC-使用" class="headerlink" title="SpringMVC 使用"></a>SpringMVC 使用</h2><p>举个例子：浏览器请求地址：<code>http://localhost:8080/hello</code>，要求服务器返回页面<code>hello.html</code>。</p><p>我们使用 IDEA 创建该工程，具体步骤如下：</p><ol><li>创建一个 Maven 的 webapp 工程，如下图所示：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-1eed3e68e502c614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/711/format/webp" alt="maven-archetype-webapp"></p><ol start="2"><li>IDEA 默认创建的 web 工程目录补全，因此我们需要手动进行补全：</li></ol><ul><li><p><strong>补全源代码目录</strong>：在 src/main/ 目录下，创建文件夹 java - 右键该文件夹 - Mark Directory as - Sources Root。</p></li><li><p><strong>补全源代码资源目录</strong>：在 src/main/ 目录下，创建文件夹 resources - 右键该文件夹 - Mark Directory as - Resources Root。</p></li><li><p><strong>补全测试代码目录</strong>：在 src/ 目录下，创建文件夹 test/java - 右键该文件夹 - Mark Directory as - Test Sources Root。</p></li><li><p><strong>补全测试代码资源目录</strong>：在 src/test 目录下，创建文件夹 resources - 右键该文件夹 - Mark Directory as - Test Resources Root。</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2222997-29b85ff8bfdfaf63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol start="3"><li>在<code>pom.xml</code>中导入相关依赖：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 统一版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在<code>webapp/WEB-INF/</code>目录下，创建文件夹<code>pages</code>，再创建一个<code>hello.jsp</code>页面：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-7ec1285aa41d95b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pages"></p><ol start="5"><li>创建类<code>HellController</code>，接收客户端请求，返回<code>hello.jsp</code>页面：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;       </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在<code>resources</code>目录下，创建 Spring 配置文件<code>applicationContext.xml</code>，开启注解扫描和 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 注解支持，并配置一个视图解析器：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yn"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在<code>webapp/WEB-INF/web.xml</code>中，配置一个前端控制器，当前端控制器启动时，同时加载 Spring 配置文件：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载 Spring 配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截所有 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置 Tomcat 服务器：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-96fc4b79973b8784.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置tomcat"></p><ol start="9"><li>运行项目，此时浏览器输入：<code>localhost:8080/hello</code>，就可以看到输出了。</li></ol><h2 id="SpringMVC-执行模型"><a href="#SpringMVC-执行模型" class="headerlink" title="SpringMVC 执行模型"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 执行模型</h2><p>在分析上述例子之前，我们首先需要了解下 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的执行模型。</p><ul><li><strong><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 执行模型</strong>：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 是基于组件的方式完成整个请求流程的。具体流程如下图所示：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2222997-9968fed79274231a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SpringMVC 执行模型"></p><p>其中，各个组件的具体功能如下：</p><ol><li><p><strong>前端控制器（DispatcherServlet）</strong>：客户端请求都会统一被<code>DispatcherServlet</code>接收，由<code>DispatcherServlet</code>委托给其他组件进行处理，其是整个请求流程控制中心，协同调配各组件共同完成一次 HTTP 请求。<code>DispatcherServlet</code>的存在降低了组件间的耦合。</p></li><li><p><strong>处理器映射器（HandlerMapping）</strong>：HandlerMapping 会根据请求URL 找到对应的处理器（Handler），生成一个处理器执行链（HandlerExecutionChain），其包含一个处理器（Handler）对象（即 Controller）和0个或多个拦截器对象（HandlerInterceptor））。</p></li></ol><p><strong>注</strong>：处理器（Handler）即控制器（Controller），HandlerMapping 会解析出 请求URL 的路径，找到对应的 Controller，将请求交由其进行处理。</p><ol start="3"><li><strong>处理器适配器（HandlerAdapter）</strong>：HandlerAdapter 会调用 Hanlder 处理请求，然后将结果适配为一个的 ModelAndView 对象（模型+视图），返回给 DispatcherServlet。</li></ol><p><strong>注</strong>：HandlerAdapter 采用适配器模式，将不同的 Handler 处理的结果适配为统一的样式 ModelAndView，通过扩展适配器可以对更多类型的 Handler 进行执行。</p><ol start="4"><li><strong>视图解析器（ViewResolver）</strong>：ViewResolver 会接收 ModelAndView 对象，根据其逻辑视图名解析成具体的物理页面地址，即返回一个具体的页面。</li></ol><p>现在，我们就可以对上文例子进行解析了。其完整的请求过程如下：</p><ol><li><p>浏览器访问<code>http://localhost:8080/hello</code>，发送一个请求。</p></li><li><p>服务器配置前端请求器（DispatcherServlet）对所有请求进行拦截，因此 DispatcherServlet 会拦截到<code>http://localhost:8080/hello</code>这个请求。</p></li><li><p>DispatcherServlet 会将请求转发给处理器映射器（HandlerMapping），HandlerMapping 会解析请求URL：<code>http://localhost:8080/hello</code>，得到请求路径<code>/hello</code>，然后根据路径找到了其对应的处理器（Handler）为：<code>HelloController</code>，然后将该 Handler 和 该路径对应的拦截器（HandlerInterceptor）封装到一个处理器执行链（HandlerExecutionChain）对象中，返回给 DispatcherServlet。</p></li><li><p>DispatcherServlet 获取到 HandlerExecutionChain 后，先执行所有我们定义的拦截器（interceptor）的<code>preHandle</code>方法，然后将处理器（Handler）发送给相应处理器适配器（HandlerAdapter），HandlerAdapter 会执行 Handler，并将其结果封装到一个 ModelAndView 对象中，返回给 DispatcherServlet，最后还会执行拦截器（interceptor）的<code>postHandle</code>方法。</p></li><li><p>DispatcherServlet 从返回的 ModelAndView 对象中获取到其逻辑视图名，将之传递给视图解析器（ViewResolver），ViewResolver 根据该逻辑视图名就可以解析出实际的具体页面 View，然后将该 View 发送给 DispatcherServlet 。</p></li><li><p>View 进行视图渲染，View 会根据传进来的 Model模型数据进行渲染。</p></li><li><p>返回控制权给 DispatcherServlet，由 DispatcherServlet 返回响应给用户，完成一个请求流程。</p></li></ol><p><strong>注</strong>：在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的各个组件中，处理器映射器（HandlerMapping），处理器适配器（HandlerAdapter）和 视图解析器（ViewResolver）称为 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的三大组件。<br>当配置了 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 注解支持：<code>&lt;mvc:annotation-driven /&gt;</code>时，这个配置会自动帮我们加载 <strong>处理映射器（RequestMappingHandlerMapping）</strong> 和 <strong>处理器适配器（RequestMappingHandlerAdapter）</strong>。因此，一般情况下， 我们只需配置一个 视图解析器 即可。</p><p>上面较详细地阐述了 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的执行模型，为了方便理解，我们可以对其进行简化，大致可以理解为：</p><ol><li><p>客户端发送请求，被服务器前端控制器（DispatcherServlet）拦截到。</p></li><li><p>DispatcherServlet 将请求转发给处理器映射器（HandlerMapping）查找得到对应的控制器（Controller）（可以根据 XML配置，注解进行查找）。</p></li><li><p>DispatcherServlet 通过处理器适配器去执行 Controller 对应的映射方法，然后将结果封装到一个 视图对象（ModelAndView）中。</p></li><li><p>DispatcherServlet 从该 ModleAndView 中取出逻辑视图名发送给视图解析器（ViewResolver），ViewResolver 根据该逻辑视图名就可找到真实的页面对象（View）。</p></li><li><p>最后由 DispatcherServlet 将 ModelAndView 中的 Model 数据传递给页面对象（View），让其进行渲染。</p></li><li><p>渲染完成后交由 DispatcherServlet 响应给客户端，完成请求过程。</p></li></ol><h2 id="SpringMVC-常用注解"><a href="#SpringMVC-常用注解" class="headerlink" title="SpringMVC 常用注解"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 常用注解</h2><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/" target="_blank" rel="noopener">@RequestMapping</a></strong>：用于建立请求URL 和 请求处理方法 之间的对应/映射关系。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"path"</span>)</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    String[] path() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] params() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] headers() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] consumes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] produces() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/" target="_blank" rel="noopener">@RequestMapping</a> 注解可用于类和方法上，分别作为第一，二级目录，其属性具体含义如下表所示：</li></ul><table><thead><tr><th>Modify and Type</th><th>Element</th><th>Description</th></tr></thead><tbody><tr><td>Sting[]</td><td>path</td><td>URL路径</td></tr><tr><td>String[]</td><td>value</td><td>等同于 path</td></tr><tr><td>String</td><td>name</td><td>该映射名称</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html" target="_blank" rel="noopener">RequestMethod[]</a></td><td>method</td><td>指定请求方法</td></tr><tr><td>String[]</td><td>params</td><td>指定限制的请求参数</td></tr><tr><td>String[]</td><td>headers</td><td>指定限制的请求头部</td></tr><tr><td>String[]</td><td>consumes</td><td>指定请求的媒体资源类型（匹配头部：Content-Type）</td></tr><tr><td>String[]</td><td>produces</td><td>指定可接收的媒体类型（匹配头部：Accept）</td></tr></tbody></table><ul><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/GetMapping.html" target="_blank" rel="noopener">@GetMapping</a></strong>：映射方法支持 HTTP GET请求。其是<code>@RequestMapping(method = RequestMethod.GET)</code>的缩写。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">    method = &#123;RequestMethod.GET&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GetMapping &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = RequestMapping<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String name() default "";</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = RequestMapping<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String[] value() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = RequestMapping<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String[] path() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = RequestMapping<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String[] params() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = RequestMapping<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String[] headers() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = RequestMapping<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String[] consumes() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = RequestMapping<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String[] produces() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/PostMapping.html" target="_blank" rel="noopener">@PostMapping</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/PutMapping.html" target="_blank" rel="noopener">@PutMapping</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/DeleteMapping.html" target="_blank" rel="noopener">@DeleteMapping</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/PatchMapping.html" target="_blank" rel="noopener">@PatchMapping</a> 分别支持 Post，Put，Delete，Patch 请求。</p></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestBody.html" target="_blank" rel="noopener">@RequestBody</a></strong>：表示将请求体作为<code>Controller</code>方法的参数。<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestBody.html" target="_blank" rel="noopener">@RequestBody</a> 会读取请求体内容，然后通过系统默认配置的<code>HttpMessageConverter</code>进行解析，并将解析结果绑定到<code>Controller</code>方法参数上。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestBody &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>注*</em>：Get 方法不适用该注解。</p></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/requestBody"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">requestBody</span><span class="params">(@RequestBody String body)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ResponseBody.html" target="_blank" rel="noopener">@ResponseBody</a></strong>：表示方法返回值作为响应体内容。即将<code>Controller</code>方法返回的对象，通过适当的<code>HttpMessageConverter</code>转换为指定格式后，写入到<code>Response</code>对象的响应体中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ResponseBody &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RestController.html" target="_blank" rel="noopener">@RestController</a></strong>：该注解是一个组合注解，相当于 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Controller.html" target="_blank" rel="noopener">@Controller</a> 和 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ResponseBody.html" target="_blank" rel="noopener">@ResponseBody</a> 的组合。当使用该注解时，方法上的 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/" target="_blank" rel="noopener">@RequestMapping</a> 注解默认会带上 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ResponseBody.html" target="_blank" rel="noopener">@ResponseBody</a> 的语义。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = Controller<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html" target="_blank" rel="noopener">@RequestParam</a></strong>：用于把请求携带的参数赋值给控制器方法参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestParam &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"name"</span>)</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">defaultValue</span><span class="params">()</span> <span class="keyword">default</span> "\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html" target="_blank" rel="noopener">@RequestParam</a> 注解只能用于参数上，其属性具体含义如下表所示：</p></li></ul><table><thead><tr><th>Modifier and Type</th><th>Element</th><th>Description</th></tr></thead><tbody><tr><td>String</td><td>name</td><td>请求参数名称</td></tr><tr><td>String</td><td>value</td><td>等同于 name</td></tr><tr><td>String</td><td>defaultValue</td><td>默认值。当请求参数未提供或为空时，使用该默认值。</td></tr><tr><td>boolean</td><td>required</td><td>请求参数是否必须提供此参数</td></tr><tr><td>示例：</td><td></td><td></td></tr><tr><td><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/requestParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">requestParam</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String username) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr><tr><td>* <strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestHeader.html" target="_blank" rel="noopener">@RequestHeader</a></strong>：用于获取请求头，赋值给方法参数。</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface RequestHeader &#123;</span><br><span class="line">    @AliasFor(&quot;name&quot;)</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    boolean required() default true;</span><br><span class="line"></span><br><span class="line">    String defaultValue() default &quot;\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr><tr><td>示例：</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;requestHeader&quot;)</span><br><span class="line">public String requestHeader(@RequestHeader(&quot;User-Agent&quot;) String userAgent) &#123;</span><br><span class="line">    return userAgent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr></tbody></table><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html" target="_blank" rel="noopener">@PathVariable</a></strong>：用于绑定 URL 占位符，赋值给方法参数。比如，url为<code>/delete/{id}</code>，则<code>{id}</code>即为占位符。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface PathVariable &#123;</span><br><span class="line">    @AliasFor(&quot;name&quot;)</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    boolean required() default true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;pathVariable&#x2F;&#123;uid&#125;&quot;)</span><br><span class="line">public String pathVariable(@PathVariable(&quot;uid&quot;) Integer userId) &#123;</span><br><span class="line">    return &quot;Your id is &quot; + userId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a></strong>：用于把一个方法参数或方法返回值绑定到一个模型属性上。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ModelAttribute &#123;</span><br><span class="line">    @AliasFor(&quot;name&quot;)</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    boolean binding() default true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>该注解可用于方法和参数上：</p><ol><li>注解于参数上时，当该模型不存在时（没有 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解的方法返回相应模型对象），会自动实例化一个新的模型对象，并且当请求携带有与模型字段相匹配的参数时，模型会自动将这些参数值绑定到对应域变量上（数据绑定）。</li></ol><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    static class User implements Serializable &#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line"></span><br><span class="line">        public User(String name, Integer age) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            if (this.age &#x3D;&#x3D; null) &#123;</span><br><span class="line">                return String.format(&quot;[%s]&quot;, this.name);</span><br><span class="line">            &#125;</span><br><span class="line">            return String.format(&quot;[%s:%d years old]&quot;, this.name, this.age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;modelAttribute&quot;)</span><br><span class="line">    public String modelAttribute(@ModelAttribute User user) &#123;</span><br><span class="line">        return user.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：当客户端请求<code>/modelAttribute</code>时，被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解的参数<code>user</code>会自动创建一个实例对象，如果请求携带参数：<code>/modelAttribute?name=Whyn</code>，则该实例对象的属性<code>name</code>就会自动获取请求对应值，即：<code>user.name=Whyn</code>。</p><ol start="2"><li>注解于方法上时，当接收到请求时，会先执行被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解的方法，然后再执行控制器对应请求映射方法。</li></ol><p>&ensp;&ensp;注解于方法上可分为两种情形：</p><p>&ensp;&ensp;1）方法没有返回值，也即不提供模型对象给控制器方法参数。不过一般使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a>，都是为了提供自定义的模型对象给到控制器映射方法，因此，对于没有返回值的方法，若想提供模型对象，则需要<code>Model</code>对象进行辅助：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ModelAttribute</span><br><span class="line">public void getUser(@RequestParam(&quot;name&quot;) String name,</span><br><span class="line">                    @RequestParam(value &#x3D; &quot;age&quot;, required &#x3D; false) Integer age,</span><br><span class="line">                    Model model) &#123;</span><br><span class="line">    User user &#x3D; new User(name, age);</span><br><span class="line">    model.addAttribute(&quot;user&quot;,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;&#x2F;modelAttribute&quot;)</span><br><span class="line">public String modelAttribute(@ModelAttribute(&quot;user&quot;) User user) &#123;</span><br><span class="line">    return user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：参数<code>Model</code>具体类型为<code>BindingAwareModelMap</code>，其实质就是一个<code>Map</code>键值对对象，使用该<code>Map</code>帮助我们存储模型对象，内部的具体实现其实是将键值对存储到<code>Request</code>域中，因此我们可以在控制器内不同方法间共享该模型对象。<br>控制器方法参数的 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解属性<code>value</code>用于指定<code>Model</code>键值，可忽略，忽略时系统直接根据参数名称进行获取。<br>控制器方法参数的 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解可忽略不写，系统会自动查找相应模型进行注入。</p><p>&ensp;&ensp;2）当 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解的方法有返回值时，该返回值会被传入给控制器请求映射方法的参数上。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ModelAttribute(&quot;user&quot;)</span><br><span class="line">public User getUser(@RequestParam(&quot;name&quot;) String name,</span><br><span class="line">                    @RequestParam(value &#x3D; &quot;age&quot;, required &#x3D; false) Integer age) &#123;</span><br><span class="line">    return new User(name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;&#x2F;modelAttribute&quot;)</span><br><span class="line">public String modelAttribute(@ModelAttribute(&quot;user&quot;) User user) &#123;</span><br><span class="line">    return user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：方法<code>getUser</code>其实就相当于调用了<code>model.addAttribute(&quot;user&quot;,user)</code>，键从注解 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 获取，值即为方法返回值。</p><ul><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="noopener">@ExceptionHandler</a></strong>：用于捕获控制器/方法抛出的异常的处理方案。当<code>Controller</code>或映射方法抛出异常时，如果该异常符合 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="noopener">@ExceptionHandler</a> 注解声明的异常时，则会被该注解声明的方法进行捕获。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ExceptionHandler &#123;</span><br><span class="line">    Class&lt;? extends Throwable&gt;[] value() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ExceptionController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;runtimeexception&quot;)</span><br><span class="line">    public String exception() &#123;</span><br><span class="line">        throw new RuntimeException(&quot;runtime exception occured!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ResponseStatus(HttpStatus.NOT_FOUND) &#x2F;&#x2F; 404</span><br><span class="line">    @ExceptionHandler(&#123;IOException.class, RuntimeException.class&#125;)</span><br><span class="line">    public ModelAndView handlerException(Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return new ModelAndView(&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a></strong>：该注解用于初始化 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/WebDataBinder.html" target="_blank" rel="noopener">WebDataBinder</a>，从而可以对前台请求参数进行预处理。<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 支持 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/" target="_blank" rel="noopener">@RequestMapping</a> 注解方法上的所有参数，除了命令/表单对象和相应的验证结果对象。<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 注解的方法不能有返回结果，通常都设置返回值为<code>void</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface InitBinder &#123;</span><br><span class="line">    String[] value() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>注*</em>：当前端控制器（DispatcherServlet）接收到请求时，在调用相应控制器（<code>Controller</code>）映射方法前，都会调用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 注解的方法对相应请求参数进行预处理。</p></li></ul><p>示例：对前台请求参数日期数据（形如<code>2019-08-30</code>）进行转换，使控制器映射方法能接收该参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;date&quot;)</span><br><span class="line">public String today(@RequestParam(&quot;date&quot;) Date date)&#123;</span><br><span class="line">    return date.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@InitBinder</span><br><span class="line">public void transformDate(WebDataBinder binder)&#123;</span><br><span class="line">    binder.addCustomFormatter(new DateFormatter(&quot;yyyy-MM-dd&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：对于大多数请求参数，Spring 已经为我们实现了自动数据绑定功能。但是总有一些自定义的参数数据，Spring 无法自动进行转换，因此需要我们手动提供一个转换器，就比如对于上例自定义上传的日期格式（<code>yyyy-MM-dd</code>），Spring 没有提供相应转换器，此时我们就可以借助 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 对参数进行预处理，使之能转换成相应的类型。<br><strong>注</strong>：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 的属性只有<code>value</code>，其用于声明要进行预处理的命令/表单属性 或者 请求参数名称。默认则对所有参数进行预处理。</p><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html" target="_blank" rel="noopener">@ControllerAdvice</a></strong>：用于为 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="noopener">@ExceptionHandler</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 和 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 定义多控制器（<code>Controller</code>）共享的组件。相当于声明一个全局处理组件，为多个<code>Controller</code>设置一套相同的处理机制。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Component</span><br><span class="line">public @interface ControllerAdvice &#123;</span><br><span class="line">    @AliasFor(&quot;basePackages&quot;)</span><br><span class="line">    String[] value() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String[] basePackages() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] assignableTypes() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Annotation&gt;[] annotations() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html" target="_blank" rel="noopener">@ControllerAdvice</a> 只能作用于类上，其属性具体含义如下表所示：</li></ul><table><thead><tr><th>Modifier and Type</th><th>Element</th><th>Description</th></tr></thead><tbody><tr><td>String[]</td><td>basePackages</td><td>指定要进行拦截的包（根包）</td></tr><tr><td>String[]</td><td>value</td><td>等同于 basePackages</td></tr><tr><td>Class&lt;?&gt;[]</td><td>basePackageClasses</td><td>指定要进行拦截的类所在的包（根包）</td></tr><tr><td>Class&lt;?&gt;[]</td><td>assignableTypes</td><td>指定要进行拦截的具体类（类型）</td></tr><tr><td>Class&lt;? extends Annotation&gt;[]</td><td>annotations</td><td>指定拦截被相关注解注解的类</td></tr></tbody></table><p>示例：为所有控制器（<code>Controller</code>）设置一个全局异常处理器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class ExceptionController &#123;</span><br><span class="line"></span><br><span class="line">    @ResponseStatus(HttpStatus.NOT_FOUND) &#x2F;&#x2F; 404</span><br><span class="line">    @ExceptionHandler(&#123;IOException.class, RuntimeException.class&#125;)</span><br><span class="line">    public ModelAndView handlerException(Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return new ModelAndView(&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>当我们发送一个请求时，一般都会携带请求参数，服务器则需要解析请求获取参数值。</p><p>比如，我们发送了请求：<code>curl &quot;localhost:8080/params?name=Whyn&amp;password=1234&quot;</code>，对于服务器来说，其需要获取参数<code>name</code>和<code>password</code>的值，进行使用。</p><p>对于原生 Servlet 来说，获取请求参数方法如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@WebServlet(&quot;&#x2F;params&quot;)</span><br><span class="line">public class BindServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        String name &#x3D; request.getParameter(&quot;name&quot;);</span><br><span class="line">        String password &#x3D; request.getParameter(&quot;password&quot;);</span><br><span class="line">        System.out.println(String.format(&quot;%s:%s&quot;,name,password));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中，我们同样可以在控制器中接收<code>HttpServletRequest</code> 和 <code>HttpServletResponse</code>对象，从而获取请求参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class BindController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">    public void bindParams(HttpServletRequest request, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">        String name &#x3D; request.getParameter(&quot;name&quot;);</span><br><span class="line">        String password &#x3D; request.getParameter(&quot;password&quot;);</span><br><span class="line">        String result &#x3D; String.format(&quot;%s:%s&quot;, name, password);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        response.getWriter().write(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子的做法其实是直接使用底层 Servlet API 进行参数获取，这样一方面数据获取需要手动操作，比较繁琐；另一方面，控制器（<code>Controller</code>）由于映射方法接收了<code>HttpServletRequest</code>类型等作为参数，使得<code>Controller</code>和 Servlet 产生了耦合。</p><p>其实，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 已经为我们提供了对请求参数进行解析和绑定的功能，我们称之为 <strong>数据绑定</strong>。</p><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 提供了对 <strong>简单类型</strong>，<strong>实体类型（Bean）</strong> 和 <strong>复杂类型</strong> 以及 <strong>自定义类型</strong> 的数据绑定功能。</p><ul><li><p><strong>简单类型</strong>：即自动绑定基本数据类型和字符串数据。<br>示例：发送请求：<code>curl &quot;localhost:8080/params?name=Whyn&amp;age=10&quot;</code><br>要求：解析得到参数值<br>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String bindParams(@RequestParam(&quot;name&quot;) String name, @RequestParam(&quot;age&quot;) Integer age) &#123;</span><br><span class="line">    return String.format(&quot;%s:%s&quot;, name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>注*</em>：参数注解<code>@RequestParam</code>指定了请求参数名称，此处可忽略不写，则 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 会根据参数名称自动进行数据绑定，通常建议加上<code>@RequestParam</code>注解进行显示指定参数名称。</p></li><li><p><strong>实体类型</strong>：即自动绑定请求参数到 Java Bean 中。<br>示例：发送请求：<code>curl &quot;localhost:8080/params?name=Whyn&amp;age=10&quot;</code><br>要求：解析参数，将其值封装到一个<code>User</code>类中。<br>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class BindController &#123;</span><br><span class="line"></span><br><span class="line">    static class User implements Serializable &#123;</span><br><span class="line">        &#x2F;&#x2F; 请求参数必须于属性名一致</span><br><span class="line">        private String name;</span><br><span class="line">        private Integer age;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 需要提供 setter 方法，让 Spring 进行注入</span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setAge(Integer age) &#123;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;User&#123;&quot; +</span><br><span class="line">                    &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                    &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                    &#39;&#125;&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String bindParams(User user) &#123;</span><br><span class="line">        return user.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：当请求参数要封装到 Java Bean 类时，要求 Bean 类对象属性名与请求参数名一致才会进行注入：即<code>name</code>赋给<code>user.name</code>，<code>age</code>赋给<code>user.age</code>（通过反射<code>setter</code>函数注入）。</p></li></ul><p>如果 Java Bean 内还嵌套有 Java Bean，如下代码所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class Book implements Serializable &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Double price;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(Double price) &#123;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, price&#x3D;&quot; + price +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class User implements Serializable &#123;</span><br><span class="line">    &#x2F;&#x2F; 请求参数必须于属性名一致</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    &#x2F;&#x2F; 嵌套 Java Bean</span><br><span class="line">    private Book book;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 需要提供 setter 方法，让 Spring 进行注入</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBook(Book book) &#123;</span><br><span class="line">        this.book &#x3D; book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 对于嵌套 bean 类，需要提供 getter 函ServletModelAttributeMethodProcessor数</span><br><span class="line">    public Book getBook() &#123;</span><br><span class="line">        return book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &quot;, book&#x3D;&quot; + book +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：对于嵌套 Bean 需提供相应<code>getter</code>函数才能注入成功。</p><p><code>User</code>类内部嵌套了一个 Bean 类<code>Book</code>，此时如果还想能进行自动数据绑定，则需要在发送请求时，指明参数具体类型，比如：<br>示例：发送请求：<code>curl &quot;localhost:8080/params?name=Whyn&amp;age=10&amp;book.name=SpringMVC&amp;book.price=100.00&quot;</code><br>要求：解析参数，自动绑定到一个<code>User</code>类中。<br>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String bindParams(User user) &#123;</span><br><span class="line">    return user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：请求参数<code>book.name</code>和<code>book.price</code>，前缀<code>book</code>表示嵌套 Bean 在外部 Bean 的名称，后缀表示嵌套 Bean 的各个属性名。</p><ul><li><strong>复杂类型</strong>：即自动绑定集合类型。集合类型大致可以分为以下两种：</li></ul><ol><li><strong>绑定数组类型</strong>：主要用于当请求参数具备一个或多个相同名称的时候。<br>示例：发送请求：<code>curl &quot;localhost:8080/params?name=Whyn01&amp;name=Whn02&quot;</code><br>要求：解析参数，将参数名相同的值封装到数组中。<br>代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String bindParams(@RequestParam(&quot;name&quot;) String[] names) &#123;</span><br><span class="line">    return Arrays.toString(names);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>绑定集合对象（<code>List</code>，<code>Set</code>，<code>Map</code>）</strong>：对于集合类型，在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中，我们需要单独设置一个包装类进行辅助，其属性为请求参数的集合类型（比如<code>List&lt;Book&gt;</code>，<code>Set&lt;Book&gt;</code>，<code>Map&lt;String,Book&gt;</code>）。<br>示例：发送请求：<code>curl &quot;localhost:8080/params&quot; -d &quot;bookList[0].name=SpringMVC01&amp;bookList[0].price=10.0&amp;bookSet[0].name=SpringMVC02&amp;bookSet[0].price=20.0&amp;bookMap[&#39;one&#39;].name=SpringMVC03&amp;bookMap[&#39;one&#39;].price=30.0&quot;</code><br>要求：解析参数，将参数名相同的值封装到相应集合中。<br>代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class BookVo implements Serializable &#123;</span><br><span class="line">    private List&lt;Book&gt; bookList;</span><br><span class="line">    private Set&lt;Book&gt; bookSet;</span><br><span class="line">    private Map&lt;String, Book&gt; bookMap;</span><br><span class="line"></span><br><span class="line">    public BookVo() &#123;</span><br><span class="line">        &#x2F;&#x2F; Set 集合必须进行初始化，且每次传参时，不能超过该集合大小</span><br><span class="line">        this.bookSet &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F; Set 集合大小为 1</span><br><span class="line">        this.bookSet.add(new Book());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Book&gt; getBookList() &#123;</span><br><span class="line">        return bookList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookList(List&lt;Book&gt; bookList) &#123;</span><br><span class="line">        this.bookList &#x3D; bookList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Set&lt;Book&gt; getBookSet() &#123;</span><br><span class="line">        return bookSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookSet(Set&lt;Book&gt; bookSet) &#123;</span><br><span class="line">        this.bookSet &#x3D; bookSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Map&lt;String, Book&gt; getBookMap() &#123;</span><br><span class="line">        return bookMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookMap(Map&lt;String, Book&gt; bookMap) &#123;</span><br><span class="line">        this.bookMap &#x3D; bookMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;BookVo&#123;&quot; +</span><br><span class="line">                &quot;bookList&#x3D;&quot; + bookList +</span><br><span class="line">                &quot;, bookSet&#x3D;&quot; + bookSet +</span><br><span class="line">                &quot;, bookMap&#x3D;&quot; + bookMap +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@PostMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String bindParams(BookVo bookVo) &#123;</span><br><span class="line">    return bookVo.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 对于复杂类型的数据绑定支持并不是很好，实际使用中，对于复杂类型，更多的是通过 JSON，XML 等数据格式进行传输。</p><ul><li><strong>自定义类型</strong>：前台传递的请求参数，对于后台来说，都是字符串类型。对于大多数常见类型，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 已经提供了相关转换器进行转换，但对于自定义类型数据，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 无法进行转换，此时就需要我们自己手动实现一个转换器，并注册给 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a>。<br>示例：我们为类<code>Book</code>增加一个属性：发布日期<code>publishDate</code>，其格式为<code>yyyy-MM-dd</code>。<br>前台会发送请求：<code>curl &quot;localhost:8080/params?name=SpringMVC&amp;price=100.0&amp;publishDate=2019-08-31&quot;</code>。<br>要求：解析参数，封装到一个<code>Book</code>对象中。<br>分析：对于请求参数<code>name</code>和<code>price</code>，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 内置转换器已可进行数据类型正确转换，但对于参数<code>publishDate</code>，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 无法进行转换，因此，我们需要手动实现一个转换器，并注册给 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a>，具体操作如下：</li></ul><ol><li>自定义一个转换器：<code>String2DateConverter</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line">public class String2DateConverter implements Converter&lt;String, Date&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Date convert(String source) &#123;</span><br><span class="line">        String dateFormat &#x3D; &quot;yyyy-MM-dd&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            return new SimpleDateFormat(dateFormat).parse(source);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;无效日期格式，请使用：&quot; + dateFormat);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注册自定义转换器，并配置让其生效：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    ...</span><br><span class="line">    &lt;!-- 配置类型转换器 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;converterService&quot; class&#x3D;&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;converters&quot;&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;!-- 注入自定义类型转换器 --&gt;</span><br><span class="line">                &lt;bean class&#x3D;&quot;com.yn.convverter.String2DateConverter&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;set&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!-- 开启SpringMVC注解，并使能自定义类型转换器 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven conversion-service&#x3D;&quot;converterService&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li><li>完成控制器代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class DataBindController &#123;</span><br><span class="line"></span><br><span class="line">    static class Book implements Serializable &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private Double price;</span><br><span class="line"></span><br><span class="line">        private Date publishDate;</span><br><span class="line"></span><br><span class="line">        public Date getPublishDate() &#123;</span><br><span class="line">            return publishDate;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setPublishDate(Date publishDate) &#123;</span><br><span class="line">            this.publishDate &#x3D; publishDate;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String bindParams(Book book) &#123;</span><br><span class="line">        return book.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="拦截器（HandlerInterceptor）"><a href="#拦截器（HandlerInterceptor）" class="headerlink" title="拦截器（HandlerInterceptor）"></a>拦截器（HandlerInterceptor）</h2><ul><li><strong>拦截器（HandlerInterceptor）</strong>：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中的拦截器（HandlerInterceptor）与 Servlet 中的过滤器（Filter）功能类似，都是用于拦截请求。区别在于 Filter 是对 Servlet 进行拦截，HandlerInterceptor 是对 Controller 进行拦截。</li></ul><p>Filter 和 HandlerInterceptor 的一次完整请求过程大致如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-70d49c9cdc1f2a36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>理解上面这张图，应该就可以很清晰地掌握 Filter 和 HandlerInterceptor 的关系与执行模型。</p><p><strong>注</strong>：对于 tomcat 服务器来说，所有的资源访问都是通过 Servlet 来实现的，对于静态资源，其使用的是 DefaultServlet 来处理。<br>因此，Filter 可以拦截静态资源，而 HandlerInterceptor 由于只能拦截 Controller 方法，故其不能拦截静态资源。</p><p>下面看下 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的 HandlerInterceptor 接口：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-a69919c5523d2c01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HandlerInterceptor"></p><p>HandlerInterceptor 提供了三个接口方法：</p><ul><li><strong><code>preHandle</code></strong>：该方法在<code>Controller</code>映射方法执行前调用，用以对请求做一些预处理操作。需要注意的是，该方法是 HandlerInterceptor 接口方法中唯一一个有返回值的接口，其返回值类型为<code>boolean</code>：当返回<code>true</code>时，表示继续执行处理器执行链（HandlerExecutionChain）的下一结点；当返回<code>false</code>时，表示打断处理器执行链，直接由该方法处理请求给到 DispatcherServlet，完成请求。因此，处理器执行链的后续节点不会得到执行。</li><li><strong><code>postHandle</code></strong>：该方法在<code>Controller</code>映射方法执行后，返回<code>ModelAndView</code>之前执行。</li><li><strong><code>afterCompletion</code></strong>：该方法视图页面渲染完成后执行。</li></ul><p><strong>注</strong>：<code>postHandle</code>对于<code>@ResponseBody</code>和<code>ResponseEntity</code>方法来说作用相对有限，因为这些方法在<code>HandlerAdapter</code>内部的响应就会被写入并进行提交，时序上优先于<code>postHandle</code>，因此<code>postHandle</code>此时就无法对响应进行修改。在这种场景下，可以通过实现<code>ResponseBodyAdvice</code>，并将其声明为一个 Controller Advice bean 或者直接通过<code>RequestMappingHandlerAdapter</code>进行配置。</p><p>构建一个 HandlerInterceptor 很简单，只需两个步骤：</p><ol><li>首先构建一个 HandlerInterceptor 类：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class InterceptorOne implements HandlerInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName()+&quot; preHandle&quot;);</span><br><span class="line">        return true; &#x2F;&#x2F; don&#39;t break the chain</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName()+&quot; postHandler&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName()+&quot; afterCompletion&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对创建的 HandlerInterceptor 类进行配置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicatioinContext.xml --&gt;</span><br><span class="line">&lt;!-- 拦截器 --&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;!-- 配置拦截器 --&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!-- 配置拦截路径，&#x2F;**：表示拦截所有URL及其子路径--&gt;</span><br><span class="line">        &lt;mvc:mapping path&#x3D;&quot;&#x2F;**&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 配置拦截器对象 --&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;com.yn.interceptor.InterceptorOne&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mvc:interceptor&gt;</span><br><span class="line">&lt;&#x2F;mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="文件上传-下载"><a href="#文件上传-下载" class="headerlink" title="文件上传/下载"></a>文件上传/下载</h2><ul><li><strong>文件上传原理</strong>：文件上传是以<code>multipart/form-data</code>的 MIME 类型进行上传，此时请求报文的<code>Content-Type</code>会随机生成一个 boundary（分界符），这个 boundary 标记请求体的一段数据（多个文件用多个 boundary 进行分隔）。也即服务端只需查找请求头<code>Content-Type</code>，获取 boundary，然后根据该 boundary，在请求体中第一次出现该 boundary 的位置到第二次出现该 boundary 的位置的中间部分即为上传文件的内容，具体格式如下所示：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2222997-5a74df8a61b5e7e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件上传格式"></p><p><strong>注</strong>：文件上传 from 表单的请求正文类型<code>enctype</code>必须为<code>multipart/form-data</code>，其他客户端则设置<code>Content-Type:multipart/data</code>，<code>method</code>的取值必须为<code>post</code></p><p>这里我们借助开源库 <a href="https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload/1.4" target="_blank" rel="noopener">commons-fileupload</a> 对上传文件进行解析，首先导入该库：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>对于文件上传，传统方式是对<code>request</code>对象进行解析，获取请求体内容，再解析出文件内容，进行保存。</p><p>而在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中，其是由组件构建完成请求，因此，我们只需添加一个文件上传解析器，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 就能自动帮我们将上传文件解析处理（具体为<code>MultipartFile</code>对象），因此，控制器映射方法只需接收解析出来的文件即可。</p><p>文件解析器配置方法如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;!-- 配置文件上传解析器 --&gt;</span><br><span class="line">&lt;!-- id 必须为 multipartResolver --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;multipartResolver&quot; class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>到这里，我们就可以实现文件上传了。</p><p>常见的文件上传有三种方式，以下依次进行讲解：</p><ul><li><strong>单文件上传</strong>：每次只上传一个文件，具体步骤如下：</li></ul><ol><li>前端页面写一个单文件上传 form 表单：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;上传单文件&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;form enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;&#x2F;uploadSingleFile&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;uploadFile&quot;&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li><li>控制器映射方法接收上传文件，并进行磁盘保存操作：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UploadController &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 支持单文件上传</span><br><span class="line">    @PostMapping(&quot;&#x2F;uploadSingleFile&quot;)</span><br><span class="line">    public String uploadSingleFile(HttpServletRequest request,</span><br><span class="line">                                   @RequestParam(&quot;uploadFile&quot;) MultipartFile uploadFile) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建上传目录</span><br><span class="line">        String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File dir &#x3D; new File(path);</span><br><span class="line">        if (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取上传文件名</span><br><span class="line">        String filename &#x3D; uploadFile.getOriginalFilename();</span><br><span class="line">        &#x2F;&#x2F; 写入磁盘</span><br><span class="line">        uploadFile.transferTo(new File(dir, filename));</span><br><span class="line">        return filename + &quot; upload successful&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>多文件上传</strong>：每次上传多个文件，具体步骤如下：</li></ul><ol><li>前端页面 form 表单支持多文件选择：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;上传多文件&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;form enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;&#x2F;uploadMultiFiles&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;uploadFiles&quot; multiple&#x3D;&quot;multiple&quot;&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：其实就是多个<code>multiple</code>属性。<br>2. 多文件上传与单文件上传其实实现很相似，借助于 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 数据绑定功能，我们只需将控制器映射方法设成数组即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UploadController &#123;</span><br><span class="line">    &#x2F;&#x2F; 支持多文件上传</span><br><span class="line">    @PostMapping(&quot;&#x2F;uploadMultiFiles&quot;)</span><br><span class="line">    public String uploadMultiFiles(HttpServletRequest request,</span><br><span class="line">                                  @RequestParam(&quot;uploadFiles&quot;)MultipartFile[] uploadFiles) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建上传目录</span><br><span class="line">        String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File dir &#x3D; new File(path);</span><br><span class="line">        if (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for (MultipartFile file : uploadFiles) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取上传文件名</span><br><span class="line">            String filename &#x3D; file.getOriginalFilename();</span><br><span class="line">            System.out.println(&quot;upload file: &quot; + filename);</span><br><span class="line">            &#x2F;&#x2F; 写入磁盘</span><br><span class="line">            file.transferTo(new File(dir, filename));</span><br><span class="line">            System.out.println(&quot;upload file done: &quot; + filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;upload files done&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>多文件上传+额外表单字段</strong>：有时候可能需要对上传文件进行一些额外信息描述，此时除了上传文件外，还需上传一些额外字段：</li></ul><ol><li>前端页面 form 表单增加额外字段：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;上传多文件&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;form enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;&#x2F;uploadMultiFiles&quot;&gt;</span><br><span class="line">    name:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    description:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;description&quot;&#x2F;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    upload files:&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;uploadFiles&quot; multiple&#x3D;&quot;multiple&quot;&#x2F;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li><li>后端我们使用一个新的 Java Bean 类，用于 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 封装表单数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UploadController &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 封装表单数据</span><br><span class="line">    static class UploadFiles implements Serializable &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private String description;</span><br><span class="line">        private List&lt;MultipartFile&gt; uploadFiles;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getDescription() &#123;</span><br><span class="line">            return description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setDescription(String description) &#123;</span><br><span class="line">            this.description &#x3D; description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;MultipartFile&gt; getUploadFiles() &#123;</span><br><span class="line">            return uploadFiles;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setUploadFiles(List&lt;MultipartFile&gt; uploadFiles) &#123;</span><br><span class="line">            this.uploadFiles &#x3D; uploadFiles;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;UploadFiles&#123;&quot; +</span><br><span class="line">                    &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                    &quot;, description&#x3D;&#39;&quot; + description + &#39;\&#39;&#39; +</span><br><span class="line">                    &quot;, uploadFiles&#x3D;&quot; + uploadFiles +</span><br><span class="line">                    &#39;&#125;&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 支持多文件上传</span><br><span class="line">    @PostMapping(&quot;&#x2F;uploadMultiFiles&quot;)</span><br><span class="line">    public String uploadMultiFiles(HttpServletRequest request,</span><br><span class="line">                                   @ModelAttribute UploadFiles uploadFiles) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建上传目录</span><br><span class="line">        String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File dir &#x3D; new File(path);</span><br><span class="line">        if (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(uploadFiles.getName());</span><br><span class="line">        System.out.println(uploadFiles.getDescription());</span><br><span class="line"></span><br><span class="line">        List&lt;MultipartFile&gt; files &#x3D; uploadFiles.getUploadFiles();</span><br><span class="line">        for (MultipartFile file : files) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取上传文件名</span><br><span class="line">            String filename &#x3D; file.getOriginalFilename();</span><br><span class="line">            System.out.println(&quot;upload file: &quot; + filename);</span><br><span class="line">            &#x2F;&#x2F; 写入磁盘</span><br><span class="line">            file.transferTo(new File(dir, filename));</span><br><span class="line">            System.out.println(&quot;upload file done: &quot; + filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;upload files done&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>文件下载原理</strong>：服务端<code>response</code>对象可以获取输出流，通过输出流将文件输入流写到浏览器即可完成文件下载功能。</li></ul><p>文件下载的关键是设置以下两个头信息：</p><ol><li>设置响应文件的 MIME 类型：<code>ContentType:xxx/yyyy</code></li></ol><p><strong>注</strong>：如果想浏览器一直弹出下载对话框，可直接设置：<code>Content-Type:application/octet-stream</code>或<code>Content-Type:application/x-msdownload</code></p><ol start="2"><li>设置文件下载名称：<code>Content-Disposition:attachement;filename=下载名称</code></li></ol><p>示例：下载一个图片文件。</p><p>具体步骤如下：</p><ol><li>假设我们要下载的图片的真实路径为<code>/WEB-INF/downloads/images/</code>：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-6f37a2446714ecca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="downloads"></p><ol start="2"><li>由于<code>/WEB-INF</code>目录为默认安全目录，浏览器无法直接访问。因此服务器端通过一个控制器进行转发获取资源：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class DownloadController &#123;</span><br><span class="line">    @GetMapping(&quot;&#x2F;downloads&#x2F;&#123;filename:.+&#125;&quot;) &#x2F;&#x2F; .+ 表示不过滤 PathVariable 点后缀</span><br><span class="line">    public void download(HttpServletRequest request,</span><br><span class="line">                         HttpServletResponse response,</span><br><span class="line">                         @PathVariable(&quot;filename&quot;) String filename) throws IOException &#123;</span><br><span class="line">        ServletContext context &#x3D; request.getServletContext();</span><br><span class="line">        String downloadDir &#x3D; context.getRealPath(&quot;WEB-INF&#x2F;downloads&#x2F;images&#x2F;&quot;);</span><br><span class="line">        Path file &#x3D; Paths.get(downloadDir, filename);</span><br><span class="line">        System.out.println(filename + &quot; exists? &quot; + Files.exists(file));</span><br><span class="line">        if (Files.exists(file)) &#123;</span><br><span class="line">            String fileMime &#x3D; context.getMimeType(filename);</span><br><span class="line">            System.out.println(filename + &quot;:&quot; + fileMime);</span><br><span class="line">            response.setContentType(fileMime);</span><br><span class="line">            response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot; + filename);</span><br><span class="line">            Files.copy(file, response.getOutputStream());</span><br><span class="line">            response.getOutputStream().flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><strong>不拦截静态资源</strong>：在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中，前端控制器（DispatcherServlet）一般配置为对所有请求进行拦截，这同时包括了对静态资源（js，css，images…）的拦截，导致静态资源无法获取。因此，我们需要配置前端控制器，让其不对静态资源进行拦截，具体的配置方法有如下两种：</li></ul><ol><li>配置 default servlet，优先处理请求：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler&#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li>手动指定静态资源映射及路径，让前端控制器不进行拦截：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;static&#x2F;**&quot; location&#x3D;&quot;&#x2F;static&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;resources&#x2F;**&quot; location&#x3D;&quot;&#x2F;resources&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;images&#x2F;**&quot; location&#x3D;&quot;&#x2F;images&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;js&#x2F;**&quot; location&#x3D;&quot;&#x2F;js&#x2F;&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>JSON 支持</strong>：为控制器添加接收 JSON 参数和返回 JSON 数据。当前很多应用都采用了 Restful 请求，通讯格式基本都采用 JSON 进行数据交互，我们可以配置 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a>，让其支持 JSON 数据绑定，具体步骤如下：</li></ul><ol><li>添加 JSON 支持库，这里我们使用 <a href="https://github.com/FasterXML/jackson" target="_blank" rel="noopener">jackson</a>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;jackson.version&gt;2.9.9&lt;&#x2F;jackson.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;jackson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;jackson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure></li><li>编写后端接收 JSON 数据控制器：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">public class JsonController &#123;</span><br><span class="line"></span><br><span class="line">    static class User implements Serializable &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private Integer age;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Integer getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setAge(Integer age) &#123;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;User&#123;&quot; +</span><br><span class="line">                    &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                    &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                    &#39;&#125;&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;json&quot;)</span><br><span class="line">    public @ResponseBody User jsonUser(@RequestBody User user)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">       return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>前台页面使用 jQuery 发送 JSON 数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.4.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">       $(&#39;#btn&#39;).click(()&#x3D;&gt;&#123;</span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               url:&#39;user&#x2F;json&#39;,</span><br><span class="line">               type:&#39;post&#39;,</span><br><span class="line">               contentType:&#39;application&#x2F;json;charset&#x3D;utf-8&#39;,</span><br><span class="line">               data:&#39;&#123;&quot;name&quot;:&quot;Whyn&quot;,&quot;age&quot;:10&#125;&#39;,</span><br><span class="line">               success:function(data)&#123;</span><br><span class="line">                   alert(data);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>解决中文乱码</strong>：请求体和响应体都可能携带中文：</li></ul><ol><li>请求携带中文：<br>1）对于 Get 请求，在 Tomcat 8 以后，统一采用 UTF-8 格式接收请求，此时就无须进行编码转换了（前提：网页编码使用的是 UTF-8）。<br>2）对于 Post 请求，参数位于请求体，如果请求头<code>Content-Type</code>没有指定请求体编码方式，那么 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 默认使用 <em>ISO-8859-1</em> 进行处理，那么对于客户端发送的 utf-8 数据，则会产生乱码。<br>解决方案：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 为我们提供了一个编码过滤器，可以通过设置该编码过滤器让 web 容器使用 utf-8 编码解析请求参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- web.xml --&gt;</span><br><span class="line">&lt;!-- 解决中文乱码过滤器 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;forceEncoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure></li><li>对于响应：使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestBody.html" target="_blank" rel="noopener">@RequestBody</a> 返回字符串响应时，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 默认使用 <em>ISO-8859-1</em> 格式进行编码，因此客户端接收到数据后，使用 utf-8 格式进行解码，此时就会出现乱码。<br>解决方案：配置 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 响应使用 utf-8 编码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;!-- 开启SpringMVC注解  --&gt;</span><br><span class="line">&lt;mvc:annotation-driven &gt;</span><br><span class="line">    &lt;!-- 消息转换器 --&gt;</span><br><span class="line">    &lt;mvc:message-converters register-defaults&#x3D;&quot;true&quot;&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;supportedMediaTypes&quot;&gt;</span><br><span class="line">                &lt;list&gt;</span><br><span class="line">                    &lt;value&gt;text&#x2F;plain;charset&#x3D;UTF-8&lt;&#x2F;value&gt;</span><br><span class="line">                    &lt;value&gt;text&#x2F;html;charset&#x3D;UTF-8&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;&#x2F;list&gt;</span><br><span class="line">            &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;mvc:message-converters&gt;</span><br><span class="line">&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://crowhawk.github.io/2017/04/10/SpringMVC_1/" target="_blank" rel="noopener">SpringMVC学习笔记(1)——SpringMVC介绍</a></li><li><a href="http://cxis.me/2017/04/06/SpringMVC执行流程及源码解析/" target="_blank" rel="noopener">SpringMVC执行流程及源码解析</a></li><li><a href="https://my.oschina.net/zhangxufeng/blog/2222434" target="_blank" rel="noopener">Spring MVC之@ControllerAdvice详解</a></li><li><a href="https://blog.csdn.net/lplife/article/details/79593316" target="_blank" rel="noopener">POST和GET请求参数编码方式详细处理</a></li></ul><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/post/2020-02-09/SpringBoot/</url>
    <content><![CDATA[<!-- build time:Thu Feb 13 2020 19:46:32 GMT+0800 (China Standard Time) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当前 Java 领域主流的 Web 应用开发框架是 <strong>SSM</strong>，即 Spring+SpringMVC+MyBatis。</p><p>Spring 的核心功能是 IOC 和 AOP，大量的其他框架组件借助这两个功能很好地集成到了 Spring Framework 中，简化了代码的开发难度。然而，其基于配置的开发模式，不同的框架有不同的设计理念，导致对每一个框架，都有不同的配置选项，随着项目规模的不断扩大，第三方框架的不断集成，最终配置文件逐渐冗余与复杂，导致“配置地狱”。</p><p>代码编写与文件配置是两种不同的思维方法，Spring 简化了代码编写，却又带来了文件配置方面的时间损耗，再加上复杂的依赖管理等问题，Java Web 开发逐渐变得不是那么顺畅。</p><p>Java 的一个生命力体现就在于它每每都能在某个关键时期迸发出自己的活力，无论是 PC互联网的 Spring 大家族，还是移动互联网的 Android，甚至于当前大数据时代下，Java 还是拥有一席之地···</p><p>因此对于上述 Spring 开发企业级 JavaEE 出现的问题，Java 又再一次展现出勃勃生机，新的框架应运而生 - <strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a></strong>。</p><a id="more"></a><h2 id="Spring-Boot-简介"><a href="#Spring-Boot-简介" class="headerlink" title="Spring Boot 简介"></a><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 简介</h2><blockquote><p><strong>BUILD ANYTHING WITH SPRING BOOT</strong></p><p>Spring Boot is the starting point for building all Spring-based applications. Spring Boot is designed to get you up and running as quickly as possible, with minimal upfront configuration of Spring.</p></blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 是用于构建基于 Spring 应用的起点。<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的设计理念是 <strong>约定优于配置</strong>，以最小的配置让应用尽可能快的运行起来。</p><ul><li><strong>约定优于配置（convention over configuration）</strong>：其是一种软件设计范式，通过定制一些默认约定规则，减少程序员自定义行为，简化程序开发。</li></ul><p>通过遵守约定的行为，就可以省略一些默认配置选项；<br>对于不符合约定的部分，才需要进行相关配置。</p><p>比如：</p><ul><li>我们约定 Controller 层就是 Web 请求层，那么就可以省略 SpringMVC 的配置；</li><li>我们约定以 Service 结尾的类就是业务层，我们就会对其自动注入事务，此时就可以省略 Spring 切面事务的配置。<br>···</li></ul><p><strong>约定优于配置</strong> 的设计理念在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 体系中体现的淋漓尽致，小到配置文件、中间件的默认配置，大到内置容器、生态中的各种 Starters 无不遵循此设计规则。</p><p>遵循 <strong>约定优于配置</strong> 理念，以后无论我们引入多少第三方框架库，也无须进行配置，可以直接进行业务开发，让编程变得简单。</p><h2 id="Spring-Boot-特点"><a href="#Spring-Boot-特点" class="headerlink" title="Spring Boot 特点"></a><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 特点</h2><ul><li><p>创建独立 Spring 应用</p></li><li><p>内置 Tomcat，Jetty 和 Undertow 三种 Web容器（无需发布 WAR 包）</p></li><li><p>提供内置 <strong>Starter</strong> 依赖，简化构建配置</p></li><li><p>自动配置 Spring 和 第三方库</p></li><li><p>提供测量，健康检测和外部配置等产品特性</p></li><li><p>无代码生成，无需 XML 配置</p></li><li><p><strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 不是对 Spring 功能上的增强，而是提供了一种快速使用 Spring 的方式</strong></p></li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>例子：编写一个 Web 应用，要求浏览器访问<code>localhost:8080/hello</code>，输出<code>Hello Spring Boot!</code>。</p><p>具体步骤如下：</p><ol><li>创建一个 Maven 普通 Java 工程：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-f90548059407d33c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Java Project"></p><ol start="2"><li>添加 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 项目起步依赖：<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent" target="_blank" rel="noopener">spring-boot-starter-parent</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Spring Boot所有项目都要继承起步依赖：spring-boot-starter-parent --&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure></li><li>我们需要 Web 功能，因此需要添加一个提供 Web 功能的起步依赖：<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web" target="_blank" rel="noopener">spring-boot-starter-web</a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 Web 功能起步依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 引导类：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication &#x2F;&#x2F; 声明当前类是 Sprig Boot 的一个引导类</span><br><span class="line">public class SpringBootApp &#123;</span><br><span class="line">    public static void main(String[] agrs) &#123;</span><br><span class="line">        SpringApplication.run(SpringBootApp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建一个<code>Controller</code>，支持 Web 访问：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return &quot;Hello Spring Boot!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动应用，浏览器直接输入：<code>localhost:8080/hello</code>，就可以看到结果。</li></ol><p><strong>总结</strong>：根本无须任何 XML 配置。</p><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 核心功能有两个：<strong>起步依赖（Starter）</strong> 和 <strong>自动配置</strong>。</p><ul><li><strong>起步依赖（Starter）</strong>：Starter 是一种为应用添加依赖的简便描述符，具备为快速应用开发提供 “一站式服务” 的能力。本质上 Starter 是一个 Maven 项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，共同完成某一项功能。</li></ul><p>传统应用开发，我们导入第三方库时，需要拷贝粘贴该库及其关联库，还要抓取一些样本代码，但是借助于 Starter，我们只需引入该库对应 Starter 即可，由于其遵循 <strong>约定优于配置</strong>，因此很多配置都采用了默认项，一般情况下只需零配置或少量配置就可以使用组件功能。</p><p>比如，像之前我们要搭建一个 Web 工程的时候，会导入 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 相关依赖：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>也就是分别需要导入<code>spring-web</code>和<code>spring-webmvc</code>两个依赖，且版本号最好保持一致。而在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 中，只需导入一个相关 Starter：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>这里我们无需导入版本号，因为<code>spring-boot-starter-parent</code>内部已提供了常用库的默认版本依赖。</p><p>进入<code>spring-boot-starter-web</code>，可以看到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-json&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.hibernate.validator&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;6.0.17.Final&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p><code>spring-boot-starter-web</code>这个 Starter 其实内置了常用的 Web 依赖，包括：</p><ul><li><code>spring-web</code>/<code>spring-webmvc</code>：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 依赖包</li><li><code>spring-boot-starter-json</code>：JSON 支持库</li><li><code>spring-boot-starter-tomcat</code>：内置 Tomcat 服务器<br>……</li></ul><p>简单来说，<strong>起步依赖（Starter）</strong> 就是将具备某种功能的坐标打包到一起，并且自动处理各个坐标之间的依赖与版本匹配问题。</p><p>下面 简单分析下 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> <strong>起步依赖（Starter）</strong> 的实现原理：</p><ol><li>首先看下<code>spring-boot-starter-parent</code>内容：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project ...&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;..&#x2F;..&#x2F;spring-boot-dependencies&lt;&#x2F;relativePath&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;resource.delimiter&gt;@&lt;&#x2F;resource.delimiter&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;$&#123;java.version&#125;&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;$&#123;java.version&#125;&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;basedir&#125;&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;application*.yml&lt;&#x2F;include&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;application*.yaml&lt;&#x2F;include&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;application*.properties&lt;&#x2F;include&gt;</span><br><span class="line">                &lt;&#x2F;includes&gt;</span><br><span class="line">            &lt;&#x2F;resource&gt;</span><br><span class="line">            ...</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><code>spring-boot-starter-parent</code>该 Starter 主要三方面内容：<br>1）对 Java 版本，源码编译版本，源码编码等进行设置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;resource.delimiter&gt;@&lt;&#x2F;resource.delimiter&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;$&#123;java.version&#125;&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;$&#123;java.version&#125;&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>2）引入自定义配置文件：<code>resources/application*.yml</code>/<code>resources/application*.yaml</code>/<code>resources/application*.properties</code>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;resource&gt;</span><br><span class="line">    &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">    &lt;directory&gt;$&#123;basedir&#125;&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">    &lt;includes&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.yml&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.yaml&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.properties&lt;&#x2F;include&gt;</span><br><span class="line">    &lt;&#x2F;includes&gt;</span><br><span class="line">&lt;&#x2F;resource&gt;</span><br></pre></td></tr></table></figure>开发人员可通过自定义配置文件覆盖 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的默认配置。</li></ol><p>3）<code>spring-boot-starter-parent</code>继承起步依赖：<code>spring-boot-dependencies</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&gt;..&#x2F;..&#x2F;spring-boot-dependencies&lt;&#x2F;relativePath&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure><p>我们进入<code>spring-boot-dependencies</code>，可以看到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;!-- 版本控制 --&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;aspectj.version&gt;1.9.4&lt;&#x2F;aspectj.version&gt;</span><br><span class="line">    &lt;dom4j.version&gt;1.6.1&lt;&#x2F;dom4j.version&gt;</span><br><span class="line">    &lt;elasticsearch.version&gt;6.4.3&lt;&#x2F;elasticsearch.version&gt;</span><br><span class="line">    &lt;jackson.version&gt;2.9.9&lt;&#x2F;jackson.version&gt;</span><br><span class="line">    &lt;junit.version&gt;4.12&lt;&#x2F;junit.version&gt;</span><br><span class="line">    &lt;mysql.version&gt;8.0.17&lt;&#x2F;mysql.version&gt;</span><br><span class="line">    &lt;netty.version&gt;4.1.38.Final&lt;&#x2F;netty.version&gt;</span><br><span class="line">    &lt;slf4j.version&gt;1.7.26&lt;&#x2F;slf4j.version&gt;</span><br><span class="line">    &lt;spring.version&gt;5.1.9.RELEASE&lt;&#x2F;spring.version&gt;</span><br><span class="line">    &lt;spring-framework.version&gt;$&#123;spring.version&#125;&lt;&#x2F;spring-framework.version&gt;</span><br><span class="line">    &lt;spring-security.version&gt;5.1.6.RELEASE&lt;&#x2F;spring-security.version&gt;</span><br><span class="line">    &lt;thymeleaf.version&gt;3.0.11.RELEASE&lt;&#x2F;thymeleaf.version&gt;</span><br><span class="line">    &lt;tomcat.version&gt;9.0.22&lt;&#x2F;tomcat.version&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line">  &lt;!-- 依赖管理 --&gt;</span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-autoconfigure&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;junit.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.fasterxml.jackson&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jackson-bom&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;jackson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j-to-slf4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;log4j2.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat-annotations-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;tomcat.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">          &lt;exclusion&gt;</span><br><span class="line">            &lt;artifactId&gt;protobuf-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.protobuf&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;&#x2F;exclusion&gt;</span><br><span class="line">        &lt;&#x2F;exclusions&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;aspectj.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      ...</span><br><span class="line">      &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p><code>spring-boot-dependencies</code>内置了许多常用库的版本（<code>&lt;properties&gt;</code>）与依赖管理（<code>&lt;dependencyManagement&gt;</code>）。当我们在自己的项目中引入了第三方库时，如果此时<code>spring-boot-dependencies</code>已经内置了该库（根据<code>groupId</code>和<code>artifactId</code>进行匹配），那么就会加载该库并使用内置定义的版本及其配置。这也是为什么我们前面说有些 Starter 无须引入版本号的原因，因为<code>spring-boot-dependencies</code>已经为我们配置了兼容当前版本<code>spring-boot-starter-parent</code>的所有依赖版本。</p><p><strong>Starter</strong> 是 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的一大特色，在项目启动的时候，根据约定信息对组件进行加载，初始化，达到 ”开箱即用“ 的效果</p><p><strong>Starter</strong> 的效用已深入人心，不仅 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 官方提供了大量的 Starter，其他的开源框架也都主动提供了相应的 Starter 组件，比如 MyBatis···。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 现在如此受欢迎的原因之一，就在于其提供了大量的 Starter，依赖如此丰富且功能强大，却又支持 “开箱即用” 的模块，可以让软件开发人员更加专注与高效地进行业务开发。</p><ul><li><strong>自动配置</strong>：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 提供了一些满足日常开发常用库的默认配置类，在应用程序启动时，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 会反射加载对应库的默认配置类到 Spring 容器中，完成默认配置。</li></ul><p><strong>自动配置</strong> 的实现原理如下所示：</p><ol><li>在快速入门案例中，我们知道需要使用注解<code>@SpringBootApplication</code>来标记一个 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的启动引导类，因此我们首先看下<code>@SpringBootApplication</code>源码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@SpringBootConfiguration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(</span><br><span class="line">    excludeFilters &#x3D; &#123;@Filter(</span><br><span class="line">    type &#x3D; FilterType.CUSTOM,</span><br><span class="line">    classes &#x3D; &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), @Filter(</span><br><span class="line">    type &#x3D; FilterType.CUSTOM,</span><br><span class="line">    classes &#x3D; &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line">public @interface SpringBootApplication &#123;</span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; ComponentScan.class,</span><br><span class="line">        attribute &#x3D; &quot;basePackages&quot;</span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; ComponentScan.class,</span><br><span class="line">        attribute &#x3D; &quot;basePackageClasses&quot;</span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>可以看到，<code>@SpringBootApplication</code>其实是一个组合注解，相当于<code>@SpringBootConfiguration</code>+<code>@ComponentScan</code>+<code>@EnableAutoConfiguration</code>，其中：<br>1）<strong><code>@SpringBootConfiguration</code></strong>：其实就是注解<code>@Configuration</code>，即 Spring 的一个配置类，相当于 XML 配置的<code>&lt;beans&gt;</code>，其源码如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Configuration</span><br><span class="line">public @interface SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2）<strong><code>@ComponentScan</code></strong>：该注解会扫描当前类的包及其子包的所有类。因此，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 在启动时，就会自动扫描启动引导类所在的包及其子包，把被<code>@Configuration</code>/<code>@Controller</code>等注解注解的类配置到 Spring 容器中。</li></ol><p>3）<strong><code>@EnableAutoConfiguration</code></strong>：见名知意，该注解就是用于使能自动配置功能，我们看下该注解源码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY &#x3D; &quot;spring.boot.enableautoconfiguration&quot;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中看到，该注解导入了一个配置类：<code>AutoConfigurationImportSelector（自动配置导入选择器）</code>，那我们看下该配置类源码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;</span><br><span class="line">    public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        ...</span><br><span class="line">        AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry &#x3D; this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        ...</span><br><span class="line">        List&lt;String&gt; configurations &#x3D; this.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">        List&lt;String&gt; configurations &#x3D; SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</span><br><span class="line">        Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF&#x2F;spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">        return configurations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">        return EnableAutoConfiguration.class;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类中方法<code>getAutoConfigurationEntry</code>用于获取自动配置入口，其内部调用了方法<code>getCandidateConfigurations</code>，用于获取可选的默认配置项。<br>从<code>getCandidateConfigurations</code>内部注释中可以看到，其自动配置类位于<code>META-INF/spring.factories</code>文件中，我们来看下<code>SpringFactoriesLoader.loadFactoryNames</code>源码，看下是否正确：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class SpringFactoriesLoader &#123;</span><br><span class="line">    ...</span><br><span class="line">    public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) &#123;</span><br><span class="line">        &#x2F;&#x2F; 即 EnableAutoConfiguration</span><br><span class="line">        String factoryClassName &#x3D; factoryClass.getName(); </span><br><span class="line">        return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">        ...</span><br><span class="line">        Enumeration&lt;URL&gt; urls &#x3D; classLoader !&#x3D; null ? classLoader.getResources(&quot;META-INF&#x2F;spring.factories&quot;) : ClassLoader.getSystemResources(&quot;META-INF&#x2F;spring.factories&quot;);</span><br><span class="line">        while(urls.hasMoreElements()) &#123;</span><br><span class="line">            Properties properties &#x3D; PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SpringFactoriesLoader.loadFactoryNames</code>的第一个参数为<code>EnableAutoConfiguration.class</code>，然后该方法会调用<code>SpringFactoriesLoader.loadSpringFactories</code>方法，<code>loadSpringFactories</code>内部会加载<code>META-INF/spring.factories</code>文件，把配置文件内容封装成<code>Properties</code>对象，最终封装到一个<code>Map</code>中，组后将<code>META-INF/spring.factories</code>文件中<code>key</code>为<code>EnableAutoConfiguration</code>的所有值取出（<code>getOrDefault</code>），这些值其实就是 <strong>自动配置类的全限定名</strong>。</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-5a346d9cefa8bc2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>接下来我们看下<code>META-INF/spring.factories</code>的文件内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 内置了许多我们常用的自动配置类，比如<code>aop</code>，<code>web</code>，<code>elasticsearch</code>等等，这些类的命名遵循一定规则：<code>xxxAutoConfiguration</code>，即末尾都为<code>AutoConfiguration</code>。</p><p>到此，我们就知道了，在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 启动时，就会加载<code>META-INF/spring.factories</code>文件信息，筛选出<code>key</code>为<code>EnableAutoConfiguration</code>的自动配置类全限定名，然后反射创建类实现自动配置。</p><p>接下来我们来分析下自动配置类的默认配置过程，此处随便选择一个自动配置类，比如：<code>ServletWebServerFactoryAutoConfiguration</code>，查看下其源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedTomcat</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedJetty</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedUndertow</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>@EnableConfigurationProperties(ServerProperties.class)</code>表示加载配置属性类<code>ServerProperties</code>，查看下<code>ServerProperties</code>源码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;server&quot;, ignoreUnknownFields &#x3D; true)</span><br><span class="line">public class ServerProperties &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * Server HTTP port.</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	private Integer port;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * Network address to which the server should bind.</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	private InetAddress address;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解<code>@ConfigurationProperties</code>支持 Spring 元数据，被<code>@ConfigurationProperties</code>注解的节点对象在被创建时，其成员变量会从外部配置文件（<code>application*.yml</code>/<code>application*.yaml</code>/<code>application*.properties</code>）中获取对应值并进行设置。</p><p>因此，对于<code>ServerProperties</code>来说，在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 进行加载时，如果有外部配置文件设置了<code>server.port</code>，则其成员变量<code>port</code>会自动被赋值；如果没有进行设置，则使用默认值，默认值位于类<code>Tomcat</code>中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.apache.catalina.startup;</span><br><span class="line"></span><br><span class="line">public class Tomcat &#123;</span><br><span class="line">    ...</span><br><span class="line">    protected int port &#x3D; 8080;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，便是 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的自动配置全过程。</p><h2 id="Spring-Boot-配置文件"><a href="#Spring-Boot-配置文件" class="headerlink" title="Spring Boot 配置文件"></a><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 配置文件</h2><p>前面我们提过，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 是基于约定的，因此有很多的配置项都有默认值（具体配置项默认值请查看：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">common-application-properties</a>）。</p><p>如果我们想修改默认配置，那么可以通过在<code>resources</code>目录下创建配置文件：<code>application*.yml</code>/<code>application*.yaml</code>/<code>application*.properties</code>，在其中覆写配置项即可。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 支持 properties 和 YML格式的配置文件：</p><ul><li><strong>properties</strong>：就是键值对，比较简单直接。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># application.properties</span><br><span class="line">server.port&#x3D;8081</span><br></pre></td></tr></table></figure></li><li><strong>YML</strong>：YML 文件格式是 YAML（YAML Aint Markup Language）编写的文件格式，YAML 是一种直观的能够被电脑识别的的数据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，比如： C/C++，Ruby，Python，Java，Perl，C#，PHP 等。YML 文件是 <strong>以数据为核心</strong> 的，比传统的 xml 方式更加简洁。</li><li><em>注*</em>：YML 文件的扩展名可以使用<code>.yml</code>或者<code>.yaml</code>。</li></ul><p><strong>注</strong>：前面 <strong>起步依赖（Starter）</strong>中有提及，<code>spring-boot-starter-parent</code>里面配置了外部配置文件的加载顺序：<strong><code>application*.yml</code> &gt; <code>application*.yaml</code> &gt; <code>application*.properties</code></strong>，越晚加载则优先级越高，即<code>application*.properties</code>的配置会覆盖<code>.yaml</code>/<code>.yml</code>配置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;resource&gt;</span><br><span class="line">    &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">    &lt;directory&gt;$&#123;basedir&#125;&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">    &lt;includes&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.yml&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.yaml&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.properties&lt;&#x2F;include&gt;</span><br><span class="line">    &lt;&#x2F;includes&gt;</span><br><span class="line">&lt;&#x2F;resource&gt;</span><br></pre></td></tr></table></figure><p>下面对 YML 文件配置语法进行简单介绍：</p><ul><li><strong>配置普通键值对数据</strong></li></ul><p>语法：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Whyn</span></span><br></pre></td></tr></table></figure><ul><li><strong>配置对象数据</strong></li></ul><p>语法：YML 配置对象语法有两种格式：</p><ol><li>缩进配置（推荐）<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">object:</span></span><br><span class="line">  <span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line">  <span class="attr">key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure></li><li>行内对象配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">object:</span> <span class="string">&#123;key1:</span> <span class="string">value1,key2:</span> <span class="string">value2&#125;</span></span><br></pre></td></tr></table></figure>示例：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缩进配置</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Whyn</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">shenzhen</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行内对象配置</span></span><br><span class="line"><span class="attr">user2:</span> <span class="string">&#123;name:</span> <span class="string">Whyn,age:</span> <span class="number">10</span><span class="string">,addr:</span> <span class="string">shenzhen&#125;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>配置复杂/集合类型数据</strong></li></ul><p>语法：YML 配置复杂/集合类型数据语法有两种格式：</p><ol><li>缩进配置（推荐）<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">array:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure></li><li>行内配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">array:</span> <span class="string">[value1,value2]</span></span><br></pre></td></tr></table></figure></li></ol><p>示例：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缩进配置</span></span><br><span class="line"><span class="comment"># 集合元素为普通字符串</span></span><br><span class="line"><span class="attr">city:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">guangzhou</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shenzhen</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合元素为对象</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Whyn1</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">shenzhen</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Whyn2</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">11</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行内配置</span></span><br><span class="line"><span class="attr">city1:</span> <span class="string">[beijing,shanghai,guangzhou,shenzhen]</span></span><br><span class="line"><span class="attr">users1:</span> <span class="string">[&#123;name:</span> <span class="string">Whyn1,age:</span> <span class="number">10</span><span class="string">,addr:</span> <span class="string">shenzhen&#125;,&#123;name:</span> <span class="string">Whyn2,age:</span> <span class="number">11</span><span class="string">,addr:</span> <span class="string">beijing&#125;]</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：YML 配置文件中，冒号<code>:</code>和横杠<code>-</code>后面若带值，必须在其后带一个空格。<br>建议在 YML 文件中，凡是遇到冒号<code>:</code>和横杠<code>-</code>就在其后加一个空格。</p><h2 id="Spring-Boot-集成其他框架"><a href="#Spring-Boot-集成其他框架" class="headerlink" title="Spring Boot 集成其他框架"></a><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 集成其他框架</h2><p>前面说过，很多第三方库都提供了相应的 Starter，这为 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 集成该框架带来了极大便利性。</p><p>下面我们主要介绍两个集成案例，其他框架的集成与之类似。</p><ul><li><strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 集成 JUnit</strong>：具体步骤如下：</li></ul><ol><li>导入 JUnit 的起步依赖（Starter）：<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test" target="_blank" rel="noopener">spring-boot-starter-test</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>下面就可以编写 Spring 的测试程序：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes &#x3D; SpringBootApp.class) &#x2F;&#x2F; 引导类</span><br><span class="line">public class HelloControllerTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private HelloController controller;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void hello() &#123;</span><br><span class="line">        assertNotNull(this.controller);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 集成 MyBatis</strong>：具体步骤如下：</li></ul><ol><li>导入 MyBatis 的 起步依赖（Starter）：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter" target="_blank" rel="noopener">mybatis-spring-boot-starter</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>导入数据库连接驱动：<a href="https://mvnrepository.com/artifact/MySQL/mysql-connector-java" target="_blank" rel="noopener">mysql-connector-java</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>创建一张<code>users</code>表：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table if not exists users (</span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(20) not null,</span><br><span class="line">    -&gt; age int not null,</span><br><span class="line">    -&gt; address varchar(30));</span><br></pre></td></tr></table></figure></li><li>创建<code>users</code>表对应 POJO 类：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address &#x3D; address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &quot;, address&#x3D;&#39;&quot; + address + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建<code>users</code>表操作接口：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface IUserDao &#123;</span><br><span class="line">    &#x2F;&#x2F; 增：添加用户</span><br><span class="line">    void add(User user);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 删：删除用户</span><br><span class="line">    void delete(String name);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 改：更改信息</span><br><span class="line">    void update(User user);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 查：查询所有</span><br><span class="line">    List&lt;User&gt; selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>resources</code>目录下创建表的映射配置文件：<code>mapper/UserMapper.xml</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.dao.IUserDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id&#x3D;&quot;add&quot; parameterType&#x3D;&quot;com.yn.entity.User&quot;&gt;</span><br><span class="line">        insert into users(name,age,address) values(#&#123;name&#125;,#&#123;age&#125;,#&#123;address&#125;)</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id&#x3D;&quot;delete&quot; parameterType&#x3D;&quot;String&quot;&gt;</span><br><span class="line">        delete from users where name&#x3D;#&#123;name&#125;</span><br><span class="line">    &lt;&#x2F;delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id&#x3D;&quot;update&quot; parameterType&#x3D;&quot;com.yn.entity.User&quot;&gt;</span><br><span class="line">        update users set age&#x3D;#&#123;age&#125;,address&#x3D;#&#123;address&#125; where name&#x3D;#&#123;name&#125;</span><br><span class="line">    &lt;&#x2F;update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectAll&quot; resultType&#x3D;&quot;com.yn.entity.User&quot;&gt;</span><br><span class="line">        select * from users</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure></li><li>在<code>resources/application.properties</code>中配置数据库相关信息 和 MyBatis 相关信息：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数据库连接信息</span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?serverTimezone&#x3D;UTC&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;true</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;password</span><br><span class="line"># 配置 MyBatis 信息</span><br><span class="line"># Spring 集成 MyBatis环境</span><br><span class="line"># POJO 别名扫描包</span><br><span class="line">mybatis.type-aliases-package&#x3D;com.yn.entity</span><br><span class="line"># 加载 MyBatis 映射文件</span><br><span class="line">mybatis.mapper-locations&#x3D;classpath:mapper&#x2F;*Mapper.xml</span><br></pre></td></tr></table></figure><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 会自动加载<code>spring.datasource.*</code>相关配置，数据源就会自动注入到<code>SqlSessionFactory</code>中，<code>SqlSessionFactory</code>会自动注入到<code>Mapper</code>中，我们什么都不用管，直接使用就行。</li><li>到上面其实已经配置完成了，这里我们可以编写测试用例进行检测：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes &#x3D; SpringBootApp.class)</span><br><span class="line">public class IUserDaoTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void add() &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setName(&quot;Whyn01&quot;);</span><br><span class="line">        user.setAge(10);</span><br><span class="line">        user.setAddress(&quot;深圳&quot;);</span><br><span class="line">        this.userDao.add(user);</span><br><span class="line"></span><br><span class="line">        user &#x3D; new User();</span><br><span class="line">        user.setName(&quot;Whyn02&quot;);</span><br><span class="line">        user.setAge(12);</span><br><span class="line">        user.setAddress(&quot;北京&quot;);</span><br><span class="line">        this.userDao.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        this.userDao.delete(&quot;Whyn02&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setName(&quot;Whyn01&quot;);</span><br><span class="line">        user.setAge(12);</span><br><span class="line">        user.setAddress(&quot;上海&quot;);</span><br><span class="line">        this.userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void selectAll() &#123;</span><br><span class="line">        List&lt;User&gt; users &#x3D; this.userDao.selectAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其他</li></ol><hr><ul><li><strong><del><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 支持热部署</del></strong>：热部署在修改代码后，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 可以自动进行编译并启动，达到实时更新效果。具体配置步骤如下：</li></ul><ol><li>导入热部署起步依赖（Starter）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>对于 IDEA，还需进行以下设置：<br>1）打开自动编译：<em>File - Settings - Compiler<em>，勾选：</em>Build project automatically</em><br>2）开启 IDEA 的自动编译（动态）：快捷键 <em>Ctrl+Shift+Alt+/<em>，选择 *Registry</em>，勾选：*compiler.automake.allow.when.app.running</em></li><li>重新运行程序，热部署即可启动。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://gitbook.cn/gitchat/column/5b86228ce15aa17d68b5b55a/topic/5b93c957780fdb5e97d2f35c" target="_blank" rel="noopener">Spring Boot 产生的背景和它的设计理念</a></li><li><a href="https://blog.csdn.net/u014745069/article/details/83820511" target="_blank" rel="noopener">Spring Boot面试杀手锏————自动配置原理</a></li><li><a href="https://segmentfault.com/a/1190000018011535" target="_blank" rel="noopener">SpringBoot自动配置原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/53294876" target="_blank" rel="noopener">Spring Boot 配置文件</a></li></ul><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/post/2020-02-09/Spring/</url>
    <content><![CDATA[<!-- build time:Thu Feb 13 2020 19:46:32 GMT+0800 (China Standard Time) --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先明确一下概念：</p><ul><li><p><strong>Spring</strong>：指 Spring Framework 以及基于 Spring Framework 上构建的<a href="https://spring.io/projects" target="_blank" rel="noopener">项目</a>的集合。简而言之，Spring 是一个大集合，它由许多基于 Spring Framework 构建的开源框架和组件组成。</p></li><li><p><strong><a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">Spring Framework</a></strong>：中文称为 <em>Spring框架</em>，是 Spring 里面的一个开源框架，提供了很多模块与组件，方便快速进行 JavaEE 企业级应用开发。</p></li></ul><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/overview.html#overview-spring" target="_blank" rel="noopener">注</a></strong>：现实生活中，我们一般讲到 Spring，一般就是指代 Spring Framework。因此，下文中所有出现 Spring 位置的地方，均指 Spring Framework，请知悉。</p><h2 id="Spring-架构体系（5-0）"><a href="#Spring-架构体系（5-0）" class="headerlink" title="Spring 架构体系（5.0）"></a><a href="https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#overview" target="_blank" rel="noopener">Spring 架构体系（5.0）</a></h2><p><img src="https://upload-images.jianshu.io/upload_images/2222997-c57fa2d581efc4bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Spring Framework Runtime"></p><a id="more"></a><p>Spring框架是一个分层架构，从总体来看，Spring 分为3层，最底层是核心层，包括 IOC、AOP 等核心模块，中间层是封装的 JavaEE 服务、作为中间的驱动组件，最上层是各个应用。</p><p>组成 Spring框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p><ul><li><strong>核心容器（Core Conatiner）</strong>：Spring 核心容器是 Spring框架中最重要的模块，其主要提供了 Spring 基础功能之一的 IOC 功能，其他层次的模块必须构建于核心容器之上。</li></ul><p>核心容器由 spring-core、spring-beans、spring-context、spring-context-support 和 spring-expression 模块组成：</p><p>核心容器中 spring-core、spring-beans 提供了框架的基本功能，包括控制反转（IOC），其主要组件是 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a>，借助复杂工厂模式的实现，将配置和特定的依赖从实际程序逻辑中解耦。</p><p>context 模块建立在 core 和 beans 模块的基础上，增加了对国际化的支持、事件广播、资源加载和创建上下文，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 是 context 模块的重点。</p><p>spring-context-support 提供对常见第三方库的支持，集成到 Spring上下文中，比如缓存(ehcache,guava)、通信(javamail)、调度(commonj,quartz)、模板引擎等(freemarker,velocity)。</p><p>spring-expression 模块提供了一个强大的表达式语言用来在运行时查询和操作对象图，这种语言支持对属性值、属性参数、方法调用、数组内容存储、集合和索引、逻辑和算数操作及命名变量，并且通过名称从spring的控制反转容器中取回对象。</p><ul><li><p><strong>面向切面编程（AOP）</strong>：spring-aop 模块为 Spring框架提供了面向切面的编程实现，spring-aspects 模块提供了aspectj 的集成与使用。</p></li><li><p><strong>服务器工具（Instrumentation）</strong>：spring-instrument 提供一些类级的工具支持和 ClassLoader 级的实现，用于服务器。spring-instrument-tomcat 针对 tomcat 的 instrument 实现。</p></li><li><p><strong>消息组件（Messaging）</strong>：Spring框架4 包含了 spring-messaging 模块，从 Spring 集成项目中抽象出来，比如 Messge、MessageChannel、MessageHandler 及其他用来提供基于消息的基础服务。</p></li><li><p><strong>数据访问/集成（Data Access/Integration）</strong>：数据访问和集成层主要作为持久层的解决方案，其由 JDBC、ORM、OXM、JMS 和事务模块组成。</p></li><li><p><strong>网络（Web）</strong>：Web层由 spring-web、spirng-webmvc、spring-websocket 和 spring-webmvc-portlet 模块组成。</p></li></ul><p>spring-web 模块提供了基本的面向 Web 开发的集成功能，例如多文件上传、使用 servert listeners 和 Web 开发应用程序上下文初始化 IOC 容器。也包含 HTTP 客户端以及 Spring 远程访问的支持的 Web 相关部分。</p><p>spring-webmvc 包含 Spring 的 model-view-controller 和 REST web services 实现的 Web 应用程序。</p><ul><li><strong>测试（Test）</strong>：<a href="https://mvnrepository.com/artifact/org.springframework/spring-test/5.1.9.RELEASE" target="_blank" rel="noopener">spring-test</a> 模块支持通过组合 Junit 或 TestNG 来进行单元测试和集成测试，提供了连续的加载 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 并且缓存这些上下文。</li></ul><h2 id="Spring-优势"><a href="#Spring-优势" class="headerlink" title="Spring 优势"></a>Spring 优势</h2><ul><li><p><strong>方便解耦，简化开发</strong>：通过 Spring 提供的 IOC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。</p></li><li><p><strong>低侵入 / 低耦合</strong>：降低组件之间的耦合度，实现软件各层之间的解耦</p></li><li><p><strong>AOP 编程支持</strong>：通过 Spring 的 AOP 功能，为程序增加了面向切面的编程方式，从另一个维度上进行编程，可以解决传统 OOP 上难以优雅实现的一些辅助功能编程。</p></li><li><p><strong>声明式事务的支持</strong>：通过声明式方式（即配置文件方式）灵活的进行事务的管理，可以优雅解决之前单调繁琐的事务管理代码。</p></li><li><p><strong>方便程序的测试</strong>：可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作而是随手可做的事情。</p></li><li><p><strong>方便集成各种优秀第三方框架</strong>：Spring 可以降低各种框架的使用难度，提供了对各种优秀框架（SpringMVC，MyBatis等）的直接支持。</p></li></ul><h2 id="控制反转（IOC）和-依赖注入（DI）"><a href="#控制反转（IOC）和-依赖注入（DI）" class="headerlink" title="控制反转（IOC）和 依赖注入（DI）"></a>控制反转（IOC）和 依赖注入（DI）</h2><p>以 OOP 的思想进行代码编写时，基本上我们都会创建多个类，类与类之间存在协作关系，共同完成某个功能。</p><p>比如，假设现在我想喝绿茶，那我们就会自己去泡杯绿茶，如下代码所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 自己泡杯绿茶</span><br><span class="line">        Tea tea &#x3D; new GreenTea();</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void drink(Tea tea) &#123;</span><br><span class="line">        System.out.println(tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private interface Tea &#123;</span><br><span class="line">        String flavor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class GreenTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Green Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是现在我突然想喝红茶了（业务需求更改），那我们就把绿茶去掉，改为红茶：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 自己泡杯红茶</span><br><span class="line">        Tea tea &#x3D; new RedTea();</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    private static class RedTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Red Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里其实就可以看出，如果我们自己（<code>Me</code>）动手创建依赖类（<code>GreenTea</code>/<code>RedTea</code>），每次当业务需求更改时，我们都要手动更改业务代码，两者之间的正向依赖耦合太重。</p><p>其实一个更好的方法就是我们自己不去泡茶，而是直接向饮品店（第三方）进行购买，想买啥口味的直接更饮品店说即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 向饮品店直接购买茶</span><br><span class="line">        Tea tea &#x3D; DrinkShop.makeTea(&quot;Red Tea&quot;);</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    public static class DrinkShop &#123;</span><br><span class="line">        public static Tea makeTea(String flavor) &#123;</span><br><span class="line">            Tea tea &#x3D; null;</span><br><span class="line">            switch (flavor) &#123;</span><br><span class="line">                case &quot;Red Tea&quot;:</span><br><span class="line">                    tea &#x3D; new RedTea();</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;Green Tea&quot;:</span><br><span class="line">                    tea &#x3D; new GreenTea();</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            return tea;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过一个第三方类<code>DrinkShop</code>就解耦了客户<code>Me</code>与具体饮品<code>GreenTea</code>/<code>RedTea</code>的耦合了。这其实就是工厂模式的应用，也是 IOC 的一个简单实现。</p><ul><li><p><strong>IOC（Inversion of Control）</strong>：即 <strong>控制反转</strong>，IOC 不是一种具体的技术，而是一种设计思想。指的是将程序原本的依赖对象创建交由第三方进行管理控制，程序直接向第三方获取所需依赖对象即可。</p></li><li><p><strong>依赖正控</strong>：类间存在依赖关系时，通常直接在依赖类内直接<code>new</code>一个被依赖类，如上文在<code>Me</code>中直接创建：<code>new GreenTea()</code>/<code>new RedTea()</code>。自己需要某个对象，就自己进行创建，这种行为即称为 <strong>依赖正控</strong>。</p></li><li><p><strong>依赖反控</strong>：类间存在依赖关系时，依赖类直接向一个第三方管理容器获取所需依赖类即可。如上文<code>Me</code>想喝茶，直接向<code>DrinkShop</code>获取茶即可。依赖类对象的创建交由第三方容器进行管理，这种方式称为 <strong>依赖反控</strong>。</p></li></ul><p>对于上文示例来说，<code>Me</code>从刚开始的自己动手泡茶<code>new GreenTea()</code>/<code>new ReaTea()</code>，到最后通过饮品店<code>DrinkShop</code>获取茶<code>DrinkShop.makeTea</code>，最后这个过程就是<code>Me</code>的控制被反转了（更具体来说，是<code>Me</code>获取依赖对象的过程被反转了）。</p><ul><li><strong>DI（Dependency Injection）</strong>：即 <strong>依赖注入</strong>。类间存在依赖关系时，使用依赖类<code>Me</code>之前，必须向注入被依赖类<code>Tea</code>。依赖注入的方法可以通过构造函数注入或者<code>setter</code>函数注入：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line">    private Tea tea;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 构造函数注入依赖</span><br><span class="line">        Me me &#x3D; new Me(new GreenTea());</span><br><span class="line">        me.drink();</span><br><span class="line"></span><br><span class="line">        me &#x3D; new Me();</span><br><span class="line">        &#x2F;&#x2F; setter注入依赖</span><br><span class="line">        me.setTea(new RedTea());</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Me()&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Me(Tea tea)&#123;</span><br><span class="line">        this.tea &#x3D; tea;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setTea(Tea tea)&#123;</span><br><span class="line">        this.tea &#x3D; tea;</span><br><span class="line">    &#125;</span><br><span class="line">    public void drink()&#123;</span><br><span class="line">        System.out.println(this.tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>IOC</strong> 和 <strong>DI</strong> 其实是对同一概念的不同描述，两者都是为了解决类间耦合，但 <strong>IOC</strong> 关注的是由第三方容器管理被依赖类，强调的是控制反转，而 <strong>DI</strong> 关注的是被依赖类如何注入到依赖类，强调的是注入。</li></ul><p><strong>DI</strong> 其实可以借助 <strong>IOC容器</strong> 进行依赖注入：<strong>IOC容器</strong> 先进行依赖查找，再进行依赖注入。</p><p>不严格情况下，通常我们将 <strong>DI</strong> 等同于 <strong>IOC</strong>。</p><h2 id="Spring-中使用-IOC"><a href="#Spring-中使用-IOC" class="headerlink" title="Spring 中使用 IOC"></a>Spring 中使用 IOC</h2><p>这里使用 Spring IOC 复写上文示例代码，具体步骤如下：</p><ol><li>首先创建一个 Maven 普通 Java 项目，然后添加 <a href="https://mvnrepository.com/artifact/org.springframework/spring-context" target="_blank" rel="noopener">spring-context</a> 依赖：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><a href="https://mvnrepository.com/artifact/org.springframework/spring-context" target="_blank" rel="noopener">spring-context</a> 内部包含了 Spring框架核心容器的所有功能，如下图所示：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-1aebf19bbfcc7a1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="spring-context"></p><ol start="2"><li>在<code>resources</code>资源目录下，创建配置文件<code>bean.xml</code>，并注入被依赖对象：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置 bean 类，交由 Spring IOC容器进行管理 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;redTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$RedTea&quot; &#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li><li>源码获取 IOC容器管理对象，并获取依赖对象：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建Spring框架核心容器对象，并加载配置文件</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        &#x2F;&#x2F; 获取 bean 对象</span><br><span class="line">        Tea tea &#x3D; ac.getBean(&quot;greenTea&quot;, Tea.class);</span><br><span class="line">        Me.drink(tea);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取 bean 对象</span><br><span class="line">        tea &#x3D; ac.getBean(&quot;redTea&quot;, Tea.class);</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void drink(Tea tea) &#123;</span><br><span class="line">        System.out.println(tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private interface Tea &#123;</span><br><span class="line">        String flavor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class RedTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Red Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class GreenTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Green Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Spring框架中-IOC-相关常用-api-讲解"><a href="#Spring框架中-IOC-相关常用-api-讲解" class="headerlink" title="Spring框架中 IOC 相关常用 api 讲解"></a>Spring框架中 IOC 相关常用 api 讲解</h2><ul><li><strong>Spring IOC 容器</strong><br>Spring IOC 容器的设计主要涉及到以下两个接口：<br>1）<strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a></strong>：Spring IOC 容器的访问根接口。其提供的访问接口有：<br><img src="https://upload-images.jianshu.io/upload_images/2222997-181f14d5d0707408.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BeanFactory"></li></ul><p>可以看到，通过 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a> 接口我们就可以对 Spring IOC 容器进行对象获取等操作。</p><p>&ensp;&ensp; 2）<strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a></strong>：为应用提供配置的中央接口。通常在应用程序运行时，该接口只允许读操作，但在某些操作实现允许情况下，支持重载操作。</p><p>先看下 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 的继承体系：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-ab7efbe3ca289284.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ApplicationContext"></p><p>可以看到 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 继承了很多了接口，其中就包括 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a>，因此，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 也具备访问 Spring IOC 容器的功能。具体来说，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 支持以下操作：</p><ul><li>提供 Bean 工厂访问应用组件接口方法，从 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/ListableBeanFactory.html" target="_blank" rel="noopener">ListableBeanFactory</a> 继承而来的。</li><li>具备以通用方式加载资源的能力，从 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/core/io/ResourceLoader.html" target="_blank" rel="noopener">ResourceLoader</a> 接口继承而来的。</li><li>具备事件广播能力，从 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationEventPublisher.html" target="_blank" rel="noopener" title="interface in org.springframework.context">ApplicationEventPublisher</a> 继承而来的。</li><li>具备消息处理，支持国际化操作，从 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/MessageSource.html" target="_blank" rel="noopener">MessageSource</a> 接口继承而来。</li><li>支持多态，子类上下文对象的配置会优先于父类对象。比如，一个父类上下文对象可以在整个 web 应用中使用，但每个 Servlet 可以拥有彼此独立的上下文对象。</li></ul><p><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 是一个功能十分强大的接口，在实际项目中，绝大部分场景下都使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 访问 Spring IOC 容器。</p><p><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 是一个接口，因此它必然有自己的实现类来提供具体操作，我们来看下 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 的子类实现体系：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-f97ddf1b9b2a85ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ApplicationContext子类"></p><p><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 有很多实现类，这里我们着重讲述以下 3 个实现类：</p><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html" target="_blank" rel="noopener">ClassPathXmlApplicationContext</a></strong>：独立的 XML 应用上下文对象，它可以加载类路径下的配置文件。</li><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html" target="_blank" rel="noopener">FileSystemXmlApplicationContext</a></strong>：独立的 XML 应用上下文对象，可以加载磁盘任意路径或 URL 指向的配置文件。</li><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener">AnnotationConfigApplicationContext</a></strong>：独立的应用上下文对象，支持从注解中读取配置。它支持的注解有：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a>，被<code>javax.inject</code>注解的 JSR-330 兼容类。支持 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html#register-java.lang.Class...-" target="_blank" rel="noopener">@register</a> 注解的类，支持扫描 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html#scan-java.lang.String...-" target="_blank" rel="noopener">@scan</a> 注解指定类路径下所有的类。</li></ul><p>通常如果使用 XML 配置 IOC 容器，则一般使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html" target="_blank" rel="noopener">ClassPathXmlApplicationContext</a>；<br>如果使用注解配置 IOC 容器，则使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener">AnnotationConfigApplicationContext</a>。</p><p><strong>注</strong>：默认情况下，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a> 加载配置文件创建 IOC 容器时，使用的是延迟加载模式，也即只有在获取 bean 对象（<code>getBean</code>）时，才会反射创建对应 bean 对象；而 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 在加载配置文件创建 IOC 容器时，采用的是立即加载模式，也即扫描到标签<code>&lt;bean&gt;</code>后，就立即反射创建该 bean 对象。<br>无论是 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a> 还是 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a>，均可以直接在配置文件中指定加载模式（<code>lazy-init</code>）覆盖默认加载。</p><h2 id="Spring-IOC-容器管理-bean-对象方式"><a href="#Spring-IOC-容器管理-bean-对象方式" class="headerlink" title="Spring IOC 容器管理 bean 对象方式"></a>Spring IOC 容器管理 bean 对象方式</h2><p>Spring IOC 容器管理 bean 对象可以大致分为如下几种类型：</p><ul><li><strong>创建 bean 对象</strong>：使用 XML 配置文件创建 bean 对象时，有如下两种配置方式：</li></ul><ol><li><strong>构建 bean 对象</strong>：可使用如下几种方法配置进行构建 bean 对象：</li></ol><p>&ensp;&ensp; 1）使用默认构造函数配置创建 bean 对象：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;redTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$RedTea&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 2）获取对象方法返回的对象，并存入 Spring IOC 容器：<code>factory-bean</code>指定工厂类 bean 对象，<code>factory-method</code>指定工厂类对象方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        Tea tea &#x3D; ac.getBean(&quot;greenTea&quot;, Tea.class);</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 工厂类</span><br><span class="line">    public static class DrinkShop&#123;</span><br><span class="line">        public Tea makeGreenTea()&#123;</span><br><span class="line">            return new GreenTea();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 创建工厂类 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;teaFactory&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$DrinkShop&quot; &#x2F;&gt;</span><br><span class="line">&lt;!-- 指定工厂类对象方法 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; factory-bean&#x3D;&quot;teaFactory&quot; factory-method&#x3D;&quot;makeGreenTea&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 3）获取静态方法返回的对象，并存入 Spring IOC 容器：<code>class</code>指定工厂类，<code>factory-method</code>指定工厂类静态方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 工厂类</span><br><span class="line">public static class DrinkShop&#123;</span><br><span class="line">	&#x2F;&#x2F; 静态方法</span><br><span class="line">	public static Tea makeGreenTea()&#123;</span><br><span class="line">		return new GreenTea();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 指定工厂类静态方法 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$DrinkShop&quot; factory-method&#x3D;&quot;makeGreenTea&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>通常当要创建库提供的一个很复杂的对象时，在 XML 中配置可能相对繁琐，则此时可以采用第2和第3条创建对象的方式，直接在代码中构建复杂对象，再在配置文件中配置从方法获取对象即可。</p><ol start="2"><li><strong>构建 bean 对象并进行依赖注入</strong>：可使用如下几种方法进行配置：</li></ol><p>&ensp;&ensp; 1）<strong>注入数据类型</strong>：构建 bean 对象，并注入基本数据类型或<code>String</code>：<code>value</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.yn.entity.User&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;10&quot; &#x2F;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;Roy&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 2）<strong>注入数据类型</strong>：构建 bean 对象，并注入 bean 类型对象：<code>ref</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;me&quot; class&#x3D;&quot;com.yn.spring.ioc.Me&quot;&gt;</span><br><span class="line">    &lt;!-- 构造函数注入 --&gt;</span><br><span class="line">    &lt;constructor-arg name&#x3D;&quot;tea&quot; ref&#x3D;&quot;greenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 3）<strong>注入数据类型</strong>：构建 bean 对象，并注入复杂/集合类型对象：<code>array</code>，<code>list</code>，<code>set</code>，<code>map</code>，<code>props</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ComplexObject &#123;</span><br><span class="line">    private String[] arrays;</span><br><span class="line">    private List&lt;String&gt; lists;</span><br><span class="line">    private Set&lt;String&gt; sets;</span><br><span class="line">    private Map&lt;String, String&gt; maps;</span><br><span class="line">    private Properties properties;</span><br><span class="line"></span><br><span class="line">    public void setArrays(String[] arrays) &#123;</span><br><span class="line">        this.arrays &#x3D; arrays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLists(List&lt;String&gt; lists) &#123;</span><br><span class="line">        this.lists &#x3D; lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSets(Set&lt;String&gt; sets) &#123;</span><br><span class="line">        this.sets &#x3D; sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMaps(Map&lt;String, String&gt; maps) &#123;</span><br><span class="line">        this.maps &#x3D; maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProperties(Properties properties) &#123;</span><br><span class="line">        this.properties &#x3D; properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return String.format(&quot;%s\n%s\n%s\n%s\n%s&quot;,</span><br><span class="line">                Arrays.toString(this.arrays),</span><br><span class="line">                this.lists,</span><br><span class="line">                this.sets,</span><br><span class="line">                this.maps,</span><br><span class="line">                this.properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;complexObj&quot; class&#x3D;&quot;com.yn.entity.ComplexObject&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;arrays&quot;&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;value&gt;AAA&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;BBB&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;CCC&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;array&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;lists&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;AAA&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;BBB&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;CCC&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;list&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;sets&quot;&gt;</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;value&gt;AAA&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;BBB&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;CCC&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;maps&quot;&gt;</span><br><span class="line">        &lt;map&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;aaa&quot; value&#x3D;&quot;AAA&quot; &#x2F;&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;bbb&quot;&gt;</span><br><span class="line">                &lt;value&gt;BBB&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;&#x2F;entry&gt;</span><br><span class="line">        &lt;&#x2F;map&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;properties&quot;&gt;</span><br><span class="line">        &lt;props&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;aaa&quot;&gt;AAA&lt;&#x2F;prop&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;bbb&quot;&gt;BBB&lt;&#x2F;prop&gt;</span><br><span class="line">        &lt;&#x2F;props&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 4）<strong>依赖注入</strong>：使用构造函数配置创建 bean 对象：<code>constructor-arg</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;me&quot; class&#x3D;&quot;com.yn.spring.ioc.Me&quot;&gt;</span><br><span class="line">    &lt;!-- 构造函数注入 --&gt;</span><br><span class="line">	&lt;constructor-arg name&#x3D;&quot;tea&quot; ref&#x3D;&quot;greenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 5）<strong>依赖注入</strong>：通过<code>setter</code>函数进行配置：<code>property</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;me&quot; class&#x3D;&quot;com.yn.spring.ioc.Me&quot;&gt;</span><br><span class="line">    &lt;!-- setter函数注入 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;tea&quot; ref&#x3D;&quot;greenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 6）<strong>依赖注入</strong>：自动注入<code>autowire</code>，配置了<code>autowire</code>的 bean 对象，Spring IOC 容器会自动查找符合需求的依赖注入到 bean 对象中。<code>autowire</code>有如下几个选项可供配置：<br><strong><code>no</code></strong>：不进行自动注入，该值为默认值；<br><strong><code>byName</code></strong>：根据属性名称自动进行注入；<br><strong><code>byType</code></strong>：根据属性类型自动进行注入（要求：IOC 容器不能存在两个相同类型的 bean 对象）；<br><strong><code>constructor</code></strong>：根据构造函数参数类型自动进行注入，与<code>byType</code>类似。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line">    private Tea tea;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        Me me &#x3D; ac.getBean(&quot;me&quot;, Me.class);</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTea(Tea tea) &#123;</span><br><span class="line">        this.tea &#x3D; tea;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;me&quot; class&#x3D;&quot;com.yn.spring.ioc.Me&quot; autowire&#x3D;&quot;byType&quot; &#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;tea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>控制 bean 对象的作用域</strong>：默认情况下，Spring IOC 容器对配置文件中的 bean 对象都保存为单例对象，因此根据名称从 IOC 容器中获取对象，均为同一对象。可以在配置文件中使用<code>scope</code>属性配置 bean 对象的作用域：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;redTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$RedTea&quot; scope&#x3D;&quot;singleton&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><code>scope</code>属性其值有如下几个选项：</p></li><li><p><em><code>singleton</code>*</em>：全局单例模式，该选项为默认值；</p></li><li><p><em><code>prototype</code>*</em>：原型模式，也即多例模式，每次<code>getBean</code>时，重新创建一个 bean 对象；</p></li><li><p><em><code>request</code>*</em>：作用于 Web 应用的请求范围；</p></li><li><p><em><code>session</code>*</em>：作用于 Web 应用的会话范围；</p></li><li><p><em><code>global-session</code>*</em>：作用于集群环境的会话范围（全局会话范围），若处于非集群环境时，该选项等同于<code>session</code>；</p></li><li><p><strong>bean 对象的生命周期</strong>：对于不同的<code>scope</code>，bean 对象具有不同的生命周期。<br>1）当<code>scope=&quot;singleton&quot;</code>时，也即默认情况下，bean 对象的生命周期与 Spring IOC 容器一致：当加载配置文件创建 IOC 容器时，bean 对象也会被加载并执行初始化函数<code>init-method</code>，当 IOC 容器关闭时，bean 对象就会执行销毁函数<code>destroy-method</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建 IOC 容器并加载配置文件</span><br><span class="line">        ClassPathXmlApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        &#x2F;&#x2F; 获取 bean 对象</span><br><span class="line">        User user &#x3D; context.getBean(&quot;user&quot;, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        &#x2F;&#x2F; 关闭 IOC 容器，调用 bean 对象销毁方法</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init() &#123;</span><br><span class="line">        System.out.println(&quot;invoke init method&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        System.out.println(&quot;invoke destroy method&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean name&#x3D;&quot;user&quot; class&#x3D;&quot;com.yn.entity.User&quot; init-method&#x3D;&quot;init&quot; destroy-method&#x3D;&quot;destroy&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;10&quot; &#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;Roy&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;2）当<code>scope=prototype</code>时，bean 对象只有在获取（<code>getBean</code>）的时候，进行创建并执行其初始化函数<code>init-method</code>，无论 IOC 容器关闭与否，bean 对象的销毁函数绝不会被调用，因为对于原型对象，Spring IOC 容器只负责反射创建，但不进行维护。</p></li></ul><h2 id="Spring-IOC-常用注解"><a href="#Spring-IOC-常用注解" class="headerlink" title="Spring IOC 常用注解"></a>Spring IOC 常用注解</h2><p>使用 XML 配置 IOC 容器时，配置与代码的隔离十分彻底，但是当配置项较多时，XML 配置会显得臃肿并且难以维护。因此，Spring框架还为我们提供了注解配置方法。</p><p>我们将 Spring 的注解配置分为如下几类：</p><ul><li><strong>配置类</strong>：配置类相当于 XML 配置文件。其涉及的注解主要有：</li></ul><ol><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a></strong>：该注解用于定义配置类，可替换 XML 配置文件，被注解的类内部通常会包含有一个或多个被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener">@Bean</a> 注解的方法，这些方法将会被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener">AnnotationConfigApplicationContext</a> 或 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.html" target="_blank" rel="noopener">AnnotationConfigWebApplicationContext</a> 类进行扫描，并用于构建 bean 对象，初始化 Spring IOC 容器。其相当于 XML 文件配置中的<code>&lt;beans /&gt;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TestConfiguration &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 使用 AnnotationConfigApplicationContext 加载注解 @Configuration 注解的类，启动 IOC 容器</span><br><span class="line">        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(TestConfiguration.class);</span><br><span class="line">        if (context !&#x3D; null) &#123;</span><br><span class="line">            System.out.println(&quot;Spring IOC 容器初始化成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：查看 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 源码，可以看到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Component</span><br><span class="line">public @interface Configuration &#123;</span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; Component.class</span><br><span class="line">    )</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中说 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 是 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 的别名，即两者作用一致。但实际上，两者不仅概念上存在区别，在一些场合下效果可能还存在不同之处（下文有提及）。</p><ol start="2"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Import.html" target="_blank" rel="noopener">@Import</a></strong>：导入其他配置类（<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a>）。通常，存在多个配置文件时，可以在一个总配置类中使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Import.html" target="_blank" rel="noopener">@Import</a> 导入其他配置类：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; config.ConfigAll</span><br><span class="line">@Configuration &#x2F;&#x2F; 总配置类</span><br><span class="line">@Import(&#123;Config1.class,Config2.class&#125;)</span><br><span class="line">public class ConfigAll &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 加载配置类 ConfigAll.class，创建 IOC 容器并进行扫描</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(ConfigAll.class);</span><br><span class="line">        Date config1Bean &#x3D; ac.getBean(&quot;date&quot;,Date.class);</span><br><span class="line">        System.out.println(config1Bean);</span><br><span class="line">        String config2Bean &#x3D; ac.getBean(&quot;string&quot;,String.class);</span><br><span class="line">        System.out.println(config2Bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; config1.Config1</span><br><span class="line">@Configuration </span><br><span class="line">public class Config1 &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;date&quot;)</span><br><span class="line">    @Scope(&quot;prototype&quot;)</span><br><span class="line">    public Date date() &#123;</span><br><span class="line">        return new Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; config2.Config2</span><br><span class="line">&#x2F;&#x2F; @Import 时可省略 @Configuration 注解，但建议加上，表明该类是一个配置类</span><br><span class="line">&#x2F;&#x2F;@Configuration</span><br><span class="line">public class Config2 &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;string&quot;)</span><br><span class="line">    public String str()&#123;</span><br><span class="line">        return &quot;Hello Import!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：上述代码中直接使用：<code>new AnnotationConfigApplicationContext(Config1.class,Config2.class)</code>或<code>@ComponentScan(&quot;config1&quot;,&quot;config2&quot;)</code>也可以加载<code>Config1</code>和<code>Config2</code>两个配置类，但使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Import.html" target="_blank" rel="noopener">@Import</a> 组织效果会更清晰。</p><ol start="3"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/PropertySource.html" target="_blank" rel="noopener">@PropertySource</a></strong>：加载配置文件。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@PropertySource(&quot;classpath:db.properties&quot;)</span><br><span class="line">@Component(&quot;db&quot;)</span><br><span class="line">public class DbConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br><span class="line">    private String driver;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br><span class="line">    private String url;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br><span class="line">    private String username;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(DbConfig.class);</span><br><span class="line">        DbConfig db &#x3D; ac.getBean(&quot;db&quot;,DbConfig.class);</span><br><span class="line">        System.out.println(db.driver);</span><br><span class="line">        System.out.println(db.url);</span><br><span class="line">        System.out.println(db.username);</span><br><span class="line">        System.out.println(db.password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>注解扫描类</strong>：注解扫描类相当于指定 XML 配置文件路径，使用 XML 配置文件时，我们会手动传递该配置文件给到 Spring，让其加载配置。同样，使用注解配置，我们也需要手动指定相关扫描注解类给到 Spring，让其有个入口可以进行扫描配置。有如下两个注解扫描类：</li></ul><ol><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html" target="_blank" rel="noopener">@ComponentScan</a></strong>：指定需要扫描的包，Spring 会扫描该注解指定的包及其子包下的所有类，并把符合需求的类（指被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 等注解的类）创建并存放进 IOC 容器中。其相当于 XML 配置的<code>&lt;context:component-scan&gt;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan(&#123;&quot;com.yn.entity&quot;, &quot;com.yn.spring.ioc&quot;&#125;)</span><br><span class="line">public class Config&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(Config.class);</span><br><span class="line">        ...</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html" target="_blank" rel="noopener">@ComponentScan</a> 有以下属性：</li></ol><table><thead><tr><th>Modifier and Type</th><th>Element</th><th>Description</th></tr></thead><tbody><tr><td>String[]</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#basePackages--" target="_blank" rel="noopener">basePackages</a></td><td>指定需要扫描的根包</td></tr><tr><td>String[]</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#value--" target="_blank" rel="noopener"><strong>value</strong></a></td><td>等同于 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#basePackages--" target="_blank" rel="noopener">basePackages</a>,当未指定具体包名时，默认扫描被注解类所在的包及其子包</td></tr><tr><td>Class&lt;?&gt;[]</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#basePackageClasses--" target="_blank" rel="noopener">basePackageClasses</a></td><td>指定需要扫描的类所在的包及其子包，可替换 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#basePackages--" target="_blank" rel="noopener">basePackages</a></td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.Filter.html" target="_blank" rel="noopener">ComponentScan.Filter[]</a></td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#excludeFilters--" target="_blank" rel="noopener">excludeFilters</a></td><td>指定排除扫描的类型</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.Filter.html" target="_blank" rel="noopener">ComponentScan.Filter[]</a></td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#includeFilters--" target="_blank" rel="noopener">includeFilters</a></td><td>指定进行扫描的类型</td></tr><tr><td>boolean</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#lazyInit--" target="_blank" rel="noopener">lazyInit</a></td><td>指定扫描到的 bean 的加载模式</td></tr><tr><td>Class&lt;? extends <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/support/BeanNameGenerator.html" target="_blank" rel="noopener">BeanNameGenerator</a>&gt;</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#nameGenerator--" target="_blank" rel="noopener">nameGenerator</a></td><td>使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/support/BeanNameGenerator.html" target="_blank" rel="noopener">BeanNameGenerator</a> 命名 Spring容器扫描到的组件</td></tr><tr><td>String</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#resourcePattern--" target="_blank" rel="noopener">resourcePattern</a></td><td>指定要扫描的类文件匹配模式</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ScopedProxyMode.html" target="_blank" rel="noopener">ScopedProxyMode</a></td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#scopedProxy--" target="_blank" rel="noopener">scopedProxy</a></td><td>指定是否需要为扫描到的组件创建代理对象</td></tr><tr><td>Class&lt;? extends <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ScopeMetadataResolver.html" target="_blank" rel="noopener">ScopeMetadataResolver</a>&gt;</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#scopeResolver--" target="_blank" rel="noopener">scopeResolver</a></td><td>使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ScopeMetadataResolver.html" target="_blank" rel="noopener">ScopeMetadataResolver</a> 解决组件的作用域范围</td></tr><tr><td>boolean</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#useDefaultFilters--" target="_blank" rel="noopener">useDefaultFilters</a></td><td>指定是否使能自动扫描被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Repository.html" target="_blank" rel="noopener">@Repository</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Service.html" target="_blank" rel="noopener">@Service</a>,<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Controller.html" target="_blank" rel="noopener">@Controller</a> 注解的类</td></tr></tbody></table><ol start="2"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScans.html" target="_blank" rel="noopener">@ComponentScans</a></strong>：作为 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html" target="_blank" rel="noopener">@ComponentScan</a> 的聚合集。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ComponentScans &#123;</span><br><span class="line">    ComponentScan[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>总结</strong>：一般使用使用注解进行配置，通用模型为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration &#x2F;&#x2F; 配置 &lt;beans &#x2F;&gt;</span><br><span class="line">@ComponentScan &#x2F;&#x2F; 扫描包</span><br><span class="line">@Component     &#x2F;&#x2F; 配置 &lt;bean &#x2F;&gt;</span><br><span class="line">public class Xxxx&#123;...&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：当 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 注解的类与 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener"><code>new AnnotationConfigApplicationContext(Class&lt;?&gt; ...)</code></a> 的参数是同一个类时，此时 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 可省略，因为<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener"><code>new AnnotationConfigApplicationContext(Class&lt;?&gt; ...)</code></a> 的时候，默认就会扫描参数类。</p><ul><li><strong>创建 bean 对象</strong>：对应 XML 配置的<code>&lt;bean&gt;</code>标签，涉及到的注解有如下几个：</li></ul><ol><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a></strong>：表示被注解的类是一个组件，Spring 扫描会把该注解的类创建并存放到 IOC 容器中。相当于 XML 配置中的<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Value(&quot;Whyn&quot;) &#x2F;&#x2F; 使用 @Value 注入简单值</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;12&quot;)</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(User.class);</span><br><span class="line">        User user &#x3D; ac.getBean(&quot;user&quot;,User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：当 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 不指定 bean 的 id 时，则默认使用当前被注解的类名，且首字母小写。<br><strong>当使用注解进行依赖注入时，无须提供<code>setter</code>函数。</strong></p><ol start="2"><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Controller.html" target="_blank" rel="noopener">@Controller</a></strong>/<strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Service.html" target="_blank" rel="noopener">@Service</a></strong>/<strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Repository.html" target="_blank" rel="noopener">@Repository</a></strong>：这三个注解的作用与 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 一摸一样，只是当作用于 MVC 架构时，可以使层次更加清晰：<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Controller.html" target="_blank" rel="noopener">@Controller</a>：一般用于表现层；<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Service.html" target="_blank" rel="noopener">@Service</a>：一般用于业务层；<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Repository.html" target="_blank" rel="noopener">@Repository</a>：一般用于持久层；</p></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener">@Bean</a></strong>：注解在方法上，Spring IOC 容器会对方法返回的 bean 对象进行管理。<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener">@Bean</a> 注解通常用于被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 或 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 注解的类中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration &#x2F;&#x2F; 配置 &lt;beans &#x2F;&gt;</span><br><span class="line">@ComponentScan &#x2F;&#x2F; 扫描包</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;date&quot;)</span><br><span class="line">    @Scope(&quot;prototype&quot;)</span><br><span class="line">    public Date getDate() &#123;</span><br><span class="line">        return new Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(User.class);</span><br><span class="line">        System.out.println(ac.getBean(&quot;date&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：建议 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener">@Bean</a> 注解在 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 注解的类中。如果是注解在 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 类中，可能出现与预期不符的效果，详情请查看：<a href="http://dimafeng.com/2015/08/29/spring-configuration_vs_component/" target="_blank" rel="noopener">Spring @Configuration vs @Component</a></p><ol start="4"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Conditional.html" target="_blank" rel="noopener">@Conditional</a></strong>：根据条件判断是否创建 bean 对象到 Spring IOC 容器中。该注解需要传入一个或多个实现 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Condition.html" target="_blank" rel="noopener"><code>Condition</code></a> 接口的类数组，当类数组返回<code>true</code>时，创建 bean 对象到 Spring IOC 容器中，返回<code>false</code>则不进行创建。<br>该注解可用于类和方法上，当用于类时，会对类内一系列创建 bean 对象进行判断；当用于方法时，只对该方法创建 bean 对象进行条件判断。<br>示例：以下代码用于判断当前项目环境配置了数据库连接信息时，才创建<code>DataSource</code>对象并加载到 Spring IOC 容器。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@PropertySource(value &#x3D; &#123;&quot;classpath:jdbc.properties&quot;&#125;, ignoreResourceNotFound &#x3D; true)</span><br><span class="line">@Component</span><br><span class="line">public class DbConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;dataSource&quot;)</span><br><span class="line">    @Conditional(&#123;DbConfig.DatabaseConditonal.class&#125;)</span><br><span class="line">    public DataSource getDataSource(</span><br><span class="line">            @Value(&quot;$&#123;jdbc.driver&#125;&quot;) String driver,</span><br><span class="line">            @Value(&quot;$&#123;jdbc.url&#125;&quot;) String url,</span><br><span class="line">            @Value(&quot;$&#123;jdbc.username&#125;&quot;) String username,</span><br><span class="line">            @Value(&quot;$&#123;jdbc.password&#125;&quot;) String password</span><br><span class="line">    ) &#123;</span><br><span class="line">        Properties props &#x3D; new Properties();</span><br><span class="line">        props.setProperty(&quot;driver&quot;, driver);</span><br><span class="line">        props.setProperty(&quot;url&quot;, url);</span><br><span class="line">        props.setProperty(&quot;username&quot;, username);</span><br><span class="line">        props.setProperty(&quot;passwork&quot;, password);</span><br><span class="line">        DataSource dataSource &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            dataSource &#x3D; BasicDataSourceFactory.createDataSource(props);</span><br><span class="line">        &#125; catch (</span><br><span class="line">                Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class DatabaseConditonal implements Condition &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * @param conditionContext      条件上下文</span><br><span class="line">         * @param annotatedTypeMetadata 注解类型的元数据</span><br><span class="line">         * @return true 装配 Bean，</span><br><span class="line">         * fasle 不装配 Bean</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取环境配置</span><br><span class="line">            Environment env &#x3D; conditionContext.getEnvironment();</span><br><span class="line">            &#x2F;&#x2F; 判断数据库配置信息是否存在</span><br><span class="line">            return env.containsProperty(&quot;jdbc.driver&quot;)</span><br><span class="line">                    &amp;&amp; env.containsProperty(&quot;jdbc.url&quot;)</span><br><span class="line">                    &amp;&amp; env.containsProperty(&quot;jdbc.username&quot;)</span><br><span class="line">                    &amp;&amp; env.containsProperty(&quot;jdbc.password&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(DbConfig.class);</span><br><span class="line">        System.out.println(ac.containsBean(&quot;dataSource&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Conditional.html" target="_blank" rel="noopener">@Conditional</a> 注解传入多个类时，它们之间的关系为 <strong>与</strong> 关系，只有当所有类都返回<code>true</code>时，才会加载 Bean 对象到 Spring IOC 容器中。</p><ul><li><strong>依赖注入</strong>：依赖注入可分为如下几种类型：</li></ul><ol><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Value.html" target="_blank" rel="noopener">@Value</a></strong>：用于注入基本数据类型或<code>String</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Value(&quot;Whyn&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;12&quot;)</span><br><span class="line">    private int age;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a></strong>：自动按照类型进行注入。当 Spring IOC 容器存在唯一 bean 对象匹配要注入的类型时，则注入成功。该注解可用于成员变量，构造函数，<code>setter</code>函数或者其他配置方法上。其对应于 XML 配置的<code>&lt;bean autowire=&quot;byType&quot;&gt;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line">    @Autowired &#x2F;&#x2F; 自动注入 Tea 类型</span><br><span class="line">    private Tea tea;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(Me.class);</span><br><span class="line">        Me me &#x3D; ac.getBean(&quot;me&quot;, Me.class);</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void drink() &#123;</span><br><span class="line">        System.out.println(this.tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private interface Tea &#123;</span><br><span class="line">        String flavor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Component</span><br><span class="line">    private static class RedTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Red Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>解析</strong>：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html" target="_blank" rel="noopener">@ComponentScan</a> 会扫描<code>Me</code>所在的包，扫描到被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 注解的类有两个：<code>Me</code>和<code>RedTea</code>，则会分别进行反射创建对应 bean 对象并存放到 Spring IOC 容器中。当扫描到 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 注解时，发现其需要注入一个<code>Tea</code>类型对象，则从 Spring IOC 容器中进行查找，刚好有唯一符合的 bean 对象<code>RedTea</code>，则注入成功。</p><p><strong>注</strong>：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 的注入执行模型为：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 首先会根据 <strong>注入类型</strong> 在 Spring IOC 容器中进行依赖查找，当 Spring IOC 容器存在唯一匹配要注入类型时，则注入成功。如果 IOC 容器存在多个匹配注入类型 bean 对象，则 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 就会依据要注入对象的 <strong>名称（id）</strong>进行查找，如果找到名称相同的，则注入成功，否则，无法进行注入，程序报错。<br>比如：<code>@Autowired private Tea tea;</code>，先会依据类型<code>Tea</code>进行查找，若 IOC 容器存在多个<code>Tea</code>类型对象，则再按照名称<code>tea</code>进行查找。</p><ol start="3"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Qualifier.html" target="_blank" rel="noopener">@Qualifier</a></strong>：在自动注入的基础上（依据类型），再按照名称（id）进行注入。该注解通常结合 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 一起使用，其无法单独作用域类成员变量，当可单独作用于方法参数上。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired  </span><br><span class="line">    @Qualifier(&quot;greenTea&quot;) &#x2F;&#x2F; 自动注入类型为Tea，名称为greenTea的bean对象</span><br><span class="line">    private Tea tea;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(Me.class);</span><br><span class="line">        Me me &#x3D; ac.getBean(&quot;me&quot;, Me.class);</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void drink() &#123;</span><br><span class="line">        System.out.println(this.tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private interface Tea &#123;</span><br><span class="line">        String flavor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Component(&quot;redTea&quot;)</span><br><span class="line">    private static class RedTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Red Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Component(&quot;greenTea&quot;)</span><br><span class="line">    private static class GreenTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Green Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong><a href="https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html" target="_blank" rel="noopener">@Resource</a></strong>：根据名称（id）进行注入。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    @Resource(name&#x3D;&quot;greenTea&quot;)</span><br><span class="line">    private Tea tea;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：<a href="https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html" target="_blank" rel="noopener">@Resource</a> 注解属于 JavaEE api。在 Java9 的时候，JavaEE 就被标记为废弃状态，并且在 Java11 进行了移除。因此，我们需要加入相关依赖：<a href="https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api/1.3.2" target="_blank" rel="noopener">javax.annotation-api</a></p><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Scope.html" target="_blank" rel="noopener">@Scope</a></strong>：控制 bean 对象的作用域，其默认值为<code>&quot;&quot;</code>，表示<code>singleton</code>。对应于 XML 配置的<code>&lt;bean scope=&quot;&quot;</code>&gt;`<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>bean 对象的生命周期</strong>：主要用于配置 bean 对象的初始化和销毁函数，对应于 XML 配置的<code>&lt;bean scope=&quot;singleton&quot; init-method=&quot;&quot; destroy-method=&quot;&quot;&gt;</code>，涉及的注解如下所示：</li></ul><ol><li><strong><a href="https://docs.oracle.com/javaee/7/api/javax/annotation/PostConstruct.html" target="_blank" rel="noopener">@PostConstruct</a></strong>：用于指定 bean 对象创建时执行的初始化函数。</li><li><strong><a href="https://docs.oracle.com/javaee/7/api/javax/annotation/PreDestroy.html" target="_blank" rel="noopener">@PreDestroy</a></strong>：用于指定 bean 对象销毁时执行的销毁函数。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line">    ...</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(User.class);</span><br><span class="line">        User user &#x3D; ac.getBean(&quot;user&quot;,User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        System.out.println(&quot;invoke init method&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PreDestroy</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        System.out.println(&quot;invoke destroy method&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：<a href="https://docs.oracle.com/javaee/7/api/javax/annotation/PostConstruct.html" target="_blank" rel="noopener">@PostConstruct</a> 和 <a href="https://docs.oracle.com/javaee/7/api/javax/annotation/PreDestroy.html" target="_blank" rel="noopener">@PreDestroy</a> 都属于 JavaEE api，无法使用时，则需要加入相关依赖：<a href="https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api/1.3.2" target="_blank" rel="noopener">javax.annotation-api</a></p><h2 id="XML-配置和注解配置选择方案"><a href="#XML-配置和注解配置选择方案" class="headerlink" title="XML 配置和注解配置选择方案"></a>XML 配置和注解配置选择方案</h2><p>无论是使用 XML 配置还是注解配置开发，其本质都是一样的。</p><p>通常，对于自己编写的代码，我们选择使用注解开发；对于第三方库提供的 api，我们使用 XML 配置开发。</p><p>由于使用了 XML 配置，因此 Spring IOC 容器的创建一般采用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html" target="_blank" rel="noopener">ClassPathXmlApplicationContext</a>，此时要使能注解开发，就需要在 XML 文件中进行注解扫描相关配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 指定注解相关扫描类 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.yn.spring.ioc&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>具体代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line">    ...</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        Me me &#x3D; ac.getBean(&quot;me&quot;, Me.class);</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-AOP-简介"><a href="#Spring-AOP-简介" class="headerlink" title="Spring AOP 简介"></a>Spring AOP 简介</h2><p>Spring框架提供的两个核心功能就是 IOC 和 AOP。</p><p>前面已对 IOC 进行了讲述，下面主要对 AOP 进行讲解。</p><ul><li><strong>AOP（Aspect Oriented Program）</strong>：即 <strong>面向切面编程</strong>。其作用主要在于切割关注点，分离核心功能与辅助功能，松散耦合各模块，最后在运行时把各模块“编织”到一起，实现完整功能。</li></ul><p>很久之前写过一篇介绍 AOP 的文章：<a href="https://www.jianshu.com/p/1109a4724b16" target="_blank" rel="noopener">AOP简介</a>，现在简单总结一下：</p><p>传统 OOP（Object-Oriented Programing，面向对象编程） 编程中，其思想是将事务对象化，一切皆对象，对象行为完全由自己控制。在实际编程中，对象的某个行为总是会附属带上其他一些辅助性操作（比如日志），使得行为的操作并不具备 <em>单一职责</em>，代码稍显混乱且臃肿。</p><p>而 AOP 具备“编织”代码能力，其可以将不同模块的内容在运行时很好地组织到一起，因此我们便可以将对象行为的核心功能和辅助功能进行切割，在运行时再通过 AOP 组织到一起。AOP 的出现可以让我们更加专注于模块开发，其很好地实现了各模块间的松散耦合。</p><p>简单举个例子：传统 OOP 编程中，日志打印需要嵌入到类的每个方法内部，而在 AOP 中，我们可以将日志打印当成一个辅助模块，并以声明的方式应用到需要日志的其他组件上。系统其他组件无须知道日志模块的存在，日志模块对其他组件无侵入，最后又能完整地实现 OOP 上所需的功能。</p><p>AOP 和 OOP 是两种不同的编程思想，AOP 很好地解决了 OOP 编程中存在的一些缺陷，可以说 AOP 是 OOP 的补充与完善。</p><h2 id="AOP-中的一些术语"><a href="#AOP-中的一些术语" class="headerlink" title="AOP 中的一些术语"></a>AOP 中的一些术语</h2><ul><li><p><em>Joinpoint（连接点）</em>：指程序执行时被拦截到的点（被切入代码的点），例如类中的一个方法,类中设置变量或获取变量的地方都可以视作一个Joinpoint。在 Spring 中，这些点指的是方法，因为 Spring 只支持方法的拦截。</p></li><li><p><strong><em>Pointcut（切入点）</em></strong>：指要具体进行拦截的 Joinpoint，即要被进行切入/增强的点。在 Spring 中，Pointcut 即指定要具体进行拦截/切入的方法。</p></li><li><p><strong><em>Advice（通知 /增强）</em></strong>：是 Pointcut 的执行代码，是执行“方面”的具体逻辑。通知有如下几种类型：<br>1）<strong>前置通知（before）</strong>：指 Pointcut 前切入的代码。<br>2）<strong>后置通知（after-returning）</strong>：指 Pointcut 后切入的代码。<br>3）<strong>异常通知（after-throwing）</strong>：指 Pointcut 后抛出异常处切入的代码。<br>4）<strong>最终通知（after）</strong>：指 Pointcut 后<code>finially</code>处切入的代码。<br>5）<strong>环绕通知（around）</strong>：可以手动控制代码切入时机，即环绕通知可以实现上述所讲的所有通知类型。<br>具体执行顺序如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    before;                     &#x2F;&#x2F; 前置通知</span><br><span class="line">    method.invoke(target,args); &#x2F;&#x2F; 业务方法</span><br><span class="line">    after-returning;            &#x2F;&#x2F; 后置通知</span><br><span class="line">    return;</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">    after-throwing;             &#x2F;&#x2F; 异常通知</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">    after;                      &#x2F;&#x2F; 最终通知</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Introduction（引介）</em>：引介是一种特殊的通知，在不修改代码的前提下，引介可以在运行期为对象动态地属性和方法，从而达到修改对象结构的目的。</p></li><li><p><em>Target（目标对象）</em>：指被代理的对象。</p></li><li><p><em>Weaving（织入）</em>：指为 Target 切入增强代码的过程。Spring 采用动态代理织入，而 AspectJ 采用编译器织入和类装载期织入。</p></li><li><p><em>Proxy（代理）</em>：指 Target 被织入增强代码后生成的代理类。</p></li><li><p><strong><em>Aspect（切面）</em></strong>：指 Pointcut + Advice/Introduction，即 切面=切入点+通知/引介，也即完成切入的地方。</p></li></ul><p><strong>注</strong>：<strong>粗暴理解如下</strong>：</p><ul><li>Joinpoint（连接点）= 方法</li><li>Pointcut（切入点）= 要切入代码的方法</li><li>Advice（通知 /增强）= 切入代码的位置</li><li>Aspect（切面）= 方法（Pointcut）具体位置（Advice）被切入了代码</li></ul><h2 id="Spring-中使用-AOP"><a href="#Spring-中使用-AOP" class="headerlink" title="Spring 中使用 AOP"></a>Spring 中使用 AOP</h2><ol><li>首先导入 Sprig IOC 支持包：<a href="https://mvnrepository.com/artifact/org.springframework/spring-context" target="_blank" rel="noopener">spring-context</a>，再导入 AOP 切入点表达式解析包：<a href="https://mvnrepository.com/artifact/org.aspectj/aspectjweaver" target="_blank" rel="noopener">aspectjweaver</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>创建一个业务类，模拟真实项目的业务方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestService &#123;</span><br><span class="line">    public void doSomething()&#123;</span><br><span class="line">        System.out.println(&quot;执行业务方法!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建一个日志类，模拟日志打印功能：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class Logger &#123;</span><br><span class="line"></span><br><span class="line">    public Object printLog(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;start log: &quot; + joinPoint.getSignature().getName());</span><br><span class="line">        Object obj &#x3D; joinPoint.proceed();</span><br><span class="line">        System.out.println(&quot;end log: &quot;+joinPoint.getSignature().getName());</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件中配置业务类和日志类 bean 对象，并配置一个 AOP 切面，实现业务类注入日志功能：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置业务类 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;testService&quot; class&#x3D;&quot;com.yn.service.TestService&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 配置日志类 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;logger&quot; class&#x3D;&quot;com.yn.utils.Logger&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置AOP --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!-- 配置一个切入点：</span><br><span class="line">                id：切入点名称</span><br><span class="line">                expression：切入点表达式（执行切入的目标方法）</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;aop:pointcut id&#x3D;&quot;logPointcut&quot; expression&#x3D;&quot;execution(* com.yn.service.TestService.*(..))&quot;&#x2F;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 配置一个切面：</span><br><span class="line">                id：切面名称</span><br><span class="line">                ref：切面通知引用的对象</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;aop:aspect id&#x3D;&quot;log&quot; ref&#x3D;&quot;logger&quot;&gt;</span><br><span class="line">            &lt;!-- 配置通知和切入点 --&gt;</span><br><span class="line">            &lt;aop:around method&#x3D;&quot;printLog&quot; pointcut-ref&#x3D;&quot;logPointcut&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li><li>创建一个测试类，运行业务类方法，查看日志是否切入成功：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void doSomething() &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        TestService service &#x3D; ac.getBean(&quot;testService&quot;, TestService.class);</span><br><span class="line">        service.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果如下：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-0eb1b33b79cfd30d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p><p><strong>注</strong>：上述例子中唯一一个需要了解的就是 <strong>切入点表示式（<code>&lt;aop:pointcut expression=&quot;表达式&quot; /&gt;</code>）</strong>。</p><p>切入点表达式的标准格式为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[访问修饰符] 返回值 包名.包名.包名...类名.方法名(参数列表)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：访问修饰符是可选的。</p><p>比如，下面就是一个标准的切入点表达式写法：其作用就是指定要拦截的方法，织入切片代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void com.yn.service.TestService.doSomething()</span><br></pre></td></tr></table></figure><p>切入点表达式支持通配符匹配，其中：</p><ul><li><strong>*</strong> ：表示匹配所有</li><li><strong>..</strong> ：表示匹配0个或多个。常用于匹配多级包名和任意参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 匹配任意包名下的 void TestService.doSomething() 方法</span><br><span class="line">void *..TestService.doSomething()</span><br><span class="line">&#x2F;&#x2F; 匹配任意包名下的任意参数列表的 void TestService.doSomething 方法</span><br><span class="line">void *..TestService.doSomething(..)</span><br></pre></td></tr></table></figure>按上述所讲的切入点表达式写法，我们甚至可以写出一个匹配任何方法的全通配符表达式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 全通配符表达式：任意返回值 任意级包 任意类.任意方法(0个或多个任意参数)</span><br><span class="line">* *..*.*(..)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-基于注解的-AOP-配置"><a href="#Spring-基于注解的-AOP-配置" class="headerlink" title="Spring 基于注解的 AOP 配置"></a>Spring 基于注解的 AOP 配置</h2><p>与 IOC 一样，Spring 同样为 AOP 提供了注解配置功能。</p><p>这里我们使用注解配置更改上面的 AOP 日志示例，具体步骤如下：</p><ol><li>修改配置文件<code>bean.xml</code>，加入注解开启配置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.yn&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置Spring开启注解 AOP 支持 --&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置业务类 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;testService&quot; class&#x3D;&quot;com.yn.service.TestService&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：开启 Spring 注解支持也可以使用注解：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/EnableAspectJAutoProxy.html" target="_blank" rel="noopener">@EnableAspectJAutoProxy</a>，其相当于 XML 配置文件中的<code>&lt;aop:aspectj-autoproxy /&gt;</code>。</p><ol start="2"><li>修改日志类，使用 AOP 相关注解：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect &#x2F;&#x2F;表示该类是一个切面类</span><br><span class="line">public final class Logger &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义一个切入点</span><br><span class="line">    @Pointcut(&quot;execution(* com.yn.service.TestService.*(..))&quot;)</span><br><span class="line">    public void logPointcut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义一个通知，这里使用环绕通知</span><br><span class="line">    @Around(&quot;logPointcut()&quot;)</span><br><span class="line">    public Object printLog(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;start log: &quot; + joinPoint.getSignature().getName());</span><br><span class="line">        Object obj &#x3D; joinPoint.proceed();</span><br><span class="line">        System.out.println(&quot;end log: &quot; + joinPoint.getSignature().getName());</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以上，我们便使用注解完成了 AOP 配置功能。</li></ol><p><strong>注</strong>：Spring AOP 注解配置存在一个问题：在没有异常情况下，最终通知（after）会优先于后置通知（after-returning）执行，与正常执行顺序相反。因此，使用注解配置时，建议使用环绕通知（around）进行处理。</p><p>更多 AOP 注解使用方法，请查看：<a href="https://www.jianshu.com/p/e94cdbe67a84" target="_blank" rel="noopener">AspectJ之切点语法</a></p><h2 id="Spring-整合-junit"><a href="#Spring-整合-junit" class="headerlink" title="Spring 整合 junit"></a>Spring 整合 junit</h2><ol><li><code>pom.xml</code>中导入 JUnit：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">	&lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li><code>pom.xml&#39;</code>导入 <a href="https://mvnrepository.com/artifact/org.springframework/spring-test/5.1.9.RELEASE" target="_blank" rel="noopener">spring-test</a> 包：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>使用 Spring 提供的运行器替换 JUnit 默认运行器：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br></pre></td></tr></table></figure></li><li>告知 Spring 允许器配置方式（xml 或 注解配置），并提供配置文件路径：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注解配置，配置类为 SpringConfiguration.class</span><br><span class="line">@ContextConfiguration(classes &#x3D; SpringConfiguration.class)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; XML 配置，配置文件为 bean.xml</span><br><span class="line">@ContextConfiguration(locations &#x3D; &quot;classpath:bean.xml&quot;)</span><br></pre></td></tr></table></figure></li><li>到此，就可以直接获取 Spring IOC 容器内部的 bean 对象了：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// resources/bean.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations &#x3D; &quot;classpath:bean.xml&quot;)</span><br><span class="line">public class TestSpring &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Date date;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testMerge()&#123;</span><br><span class="line">        Assert.assertNotNull(this.date);</span><br><span class="line">        System.out.println(this.date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5b012b00518825673564cbbe" target="_blank" rel="noopener">Spring技术内幕：设计理念和整体架构概述</a></li></ul><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>rg - 当前最快的文本搜索神器</title>
    <url>/post/2020-02-09/rg%20-%20%E5%BD%93%E5%89%8D%E6%9C%80%E5%BF%AB%E7%9A%84%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2%E7%A5%9E%E5%99%A8/</url>
    <content><![CDATA[<!-- build time:Thu Feb 13 2020 19:46:32 GMT+0800 (China Standard Time) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有写过一篇文本搜索工具简单使用博文：[ag - the Silver Searcher]，后来发现 [ag] 在 Windows 下搜索结果中文显示乱码，官方至今一直仍未解决。</p><p>并且现在，又出现了一款更加优秀的文本搜索神器：[rg]，稍微试了一下，速度很快，跨平台并且支持中文，很符合本人需求。</p><p>下面就简单介绍下 [rg] 及其最常用的几项选项。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>依据正则匹配递归搜索目录</p></blockquote><p>依据给定的正则表达式，rg 以面向行为单位的模式进行递归搜索。默认情况下，rg 会尊重你的<code>.gitignore</code>配置以及自动忽略隐藏文件/目录和二进制文件。</p><p>rg 具有以下一些特性：</p><ul><li>自动递归搜索目录（相当于：<code>grep -R</code>）</li><li>自动高亮匹配结果</li><li>默认自动忽略<code>.gitignore</code>指定的文件，隐藏文件和二进制文件</li><li>可以搜索指定文件类型</li><li>支持<code>grep</code>大部分常用特性</li><li>支持各种文件编译（UTF-8， UTF-16， latin-1, GBK, EUC-JP, Shift_JIS 等等）</li><li>支持搜索常见压缩文件（gzip，xz，lzma，bzip2，lz4）</li><li>不支持多行搜索和花哨的正则</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><strong>***格式：</strong></p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">USAGE:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">rg</span> [<span class="title">OPTIONS</span>] <span class="title">PATTERN</span> [<span class="title">PATH</span> ...]</span></span><br><span class="line"><span class="function">    <span class="title">rg</span> [<span class="title">OPTIONS</span>] [-<span class="title">e</span> <span class="title">PATTERN</span> ...] [-<span class="title">f</span> <span class="title">PATTERNFILE</span> ...] [<span class="title">PATH</span> ...]</span></span><br><span class="line"><span class="function">    <span class="title">rg</span> [<span class="title">OPTIONS</span>] --<span class="title">files</span> [<span class="title">PATH</span> ...]</span></span><br><span class="line"><span class="function">    <span class="title">rg</span> [<span class="title">OPTIONS</span>] --<span class="title">type</span>-<span class="title">list</span></span></span><br><span class="line"><span class="function">    <span class="title">command</span> | <span class="title">rg</span> [<span class="title">OPTIONS</span>] <span class="title">PATTERN</span></span></span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rg RxJava  // 递归搜索当前目录内含 RxJava 的文件</span><br><span class="line">rg install ReadMe.md // 在 ReadMe.txt 中搜索字符串 install</span><br></pre></td></tr></table></figure><h2 id="常用选项简介"><a href="#常用选项简介" class="headerlink" title="常用选项简介"></a>常用选项简介</h2><ul><li><em>输出选项*</em></li></ul><blockquote><p>-g, –glob<glob>…<br>Include or exclude files and directories for searching that match the given<br>glob. This always overrides any other ignore logic. Multiple glob flags may be<br>used. Globbing rules match .gitignore globs. Precede a glob with a ! to exclude<br>it.<br>正则匹配添加或排除搜索某些类型文件或目录。在<code>glob</code>之前加上一个<code>!</code>表示排除搜索。</glob></p></blockquote><p>eg：在当前目录搜索<code>require(&#39;uglifyjs-webpack-plugin&#39;)</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg -F &quot;require(&#39;uglifyjs-webpack-plugin&#39;)&quot; -g &quot;*.md&quot;  &#x2F;&#x2F; 搜索所有&#96;.md&#96;文件</span><br><span class="line">rg -F &quot;require(&#39;uglifyjs-webpack-plugin&#39;)&quot; -g &quot;!*.md&quot; &#x2F;&#x2F; 不搜索&#96;.md&#96;文件</span><br></pre></td></tr></table></figure><blockquote><p><code>--iglob &lt;GLOB&gt;</code>：同<code>-g, --glob &lt;GLOB&gt;</code>,但忽略大小写。</p></blockquote><blockquote><p>-l, –files-with-matches<br>Only print the paths with at least one match.<br>只打印匹配内容的文件名。</p></blockquote><blockquote><p><code>-v, --invert-match</code>：Invert matching. Show lines that do not match the given patterns.<br>反向匹配。</p></blockquote><blockquote><p><code>-C/--context [Lines]</code>: Show the lines surrounding a match.<br>输出匹配内容前后[ LINES ]行内容</p></blockquote><p>eg：搜索<code>require(&#39;uglifyjs-webpack-plugin&#39;)</code>，输出该行前后各2行内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg -C 2 &quot;require\(&#39;uglifyjs-webpack-plugin&#39;\)&quot; &#x2F;&#x2F; 括号需要转义</span><br></pre></td></tr></table></figure><blockquote><p><code>-F, --fixed-strings</code>: Treat the pattern as a literal string instead of a regular expression.<br>When this flag is used, special regular expression meta characters such as <code>.(){}*+</code><br>do not need to be escaped.<br>将匹配字符作为字符串，而不是正则表达式。也就是匹配字符<code>.(){}*+</code>无须进行转义。</p></blockquote><p>eg：搜索<code>require(&#39;uglifyjs-webpack-plugin&#39;)</code>，输出该行前后各2行内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg -C 2 -F &quot;require(&#39;uglifyjs-webpack-plugin&#39;)&quot; .&#x2F;   &#x2F;&#x2F; 括号无须转义</span><br></pre></td></tr></table></figure><blockquote><p><code>--max-depth &lt;NUM&gt;</code>: Limit the depth of directory traversal to NUM levels beyond the paths given. A<br>value of zero only searches the explicitly given paths themselves.</p></blockquote><pre><code>For example, &apos;rg --max-depth 0 dir/&apos; is a no-op because dir/ will not be
descended into. &apos;rg --max-depth 1 dir/&apos; will search only the direct children of
&apos;dir&apos;.</code></pre><p>限制文件夹递归搜索深度。<code>rg --max-depth 0 dir/</code>则不执行任何搜索；<code>rg --max-depth 1 dir/</code>只在<code>dir/</code>当前目录中进行搜索。</p><blockquote><p><code>-M/--max-columns</code>: Limit the length of lines printed by ripgrep.<br>限制输出最大行数。</p></blockquote><blockquote><p><code>--files</code>: Print the files that ripgrep would search, but don’t actually search them.<br>打印会进行查找的文件，该选项并不会执行实际查询操作。格式：<code>rg [OPTIONS] --files [PATH ...]</code>,此处不能加<code>pattern</code>。i</p></blockquote><p>eg：打印当前文件会进行查找的文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg --files . &#x2F;&#x2F; 列出当前文件夹会进行查询的所有文件</span><br></pre></td></tr></table></figure><p><strong>注</strong>：该选项其实可相当于：<code>find . -type f</code>，查找当前目录所有文件</p><blockquote><p><code>-c/--count</code>: Report a count of total matched lines.<br>计算匹配文件数量</p></blockquote><blockquote><p><code>--debug</code>: Shows ripgrep’s debug output. This is useful for understanding why a particular file might be ignored from search, or what kinds of configuration ripgrep is loading from the environment.<br>显示调试信息。有利于了解某一个具体文件被忽略的原因，或者 rg 从环境变量中加载了什么配置。</p></blockquote><ul><li><em>输入选项*</em></li></ul><blockquote><p><code>-e, --regexp &lt;PATTERN&gt;</code>: A pattern to search for. This option can be provided multiple times, where<br>all patterns given are searched. Lines matching at least one of the provided<br>patterns are printed. This flag can also be used when searching for patterns<br>that start with a dash.</p></blockquote><pre><code>For example, to search for the literal &apos;-foo&apos;, you can use this flag:

    rg -e -foo

You can also use the special &apos;--&apos; delimiter to indicate that no more flags
will be provided. Namely, the following is equivalent to the above:

    rg -- -foo</code></pre><p>使用正则搜索。</p><p><strong>注</strong>：rg 本身就支持正则表达式，<code>-e</code>主要用于匹配前缀带<code>-</code>的字符串 或者 想匹配多个字符串（多次使用该选项即可）。</p><p>eg：搜索内容包含<code>startXXXend</code>的字符串：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg -e &quot;start.*end&quot; .  &#x2F;&#x2F; 这样，&#96;startXXXend&#96;，&#96;XXXstartendXXX&#96;，&#96;XXXstartXXXend&#96;，&#96;XXXstartXXXendXXX&#96;都会匹配</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">&gt;&#96;-i&#x2F;--ignore-case&#96;: When searching for a pattern, ignore case differences. That is &#96;rg -i fast&#96; matches &#96;fast&#96;, &#96;fASt&#96;, &#96;FAST&#96;, etc.</span><br><span class="line">忽略大小写</span><br><span class="line"></span><br><span class="line">&gt;&#96;-S&#x2F;--smart-case&#96;: This is similar to &#96;--ignore-case&#96;, but disables itself if the pattern contains any uppercase letters. Usually this flag is put into alias or a config file.</span><br><span class="line">打开智能大小写，通常该选项相当于&#96;--ignore-case&#96;,但在输入大写时，则取消忽略大小写功能。</span><br><span class="line"></span><br><span class="line">&gt;&#96;-w&#x2F;--word-regexp&#96;: Require that all matches of the pattern be surrounded by word boundaries. That is, given &#96;pattern&#96;, the &#96;--word-regexp&#96; flag will cause ripgrep to behave as if &#96;pattern&#96; were actually &#96;\b(?:pattern)\b&#96;.</span><br><span class="line">打开单词边界，只进行单词匹配。</span><br><span class="line"></span><br><span class="line">&gt;&#96;-a&#x2F;--text&#96;: Search binary files as if they were plain text.</span><br><span class="line">搜索二进制文件（将二进制文件看出文本文件）</span><br><span class="line"></span><br><span class="line">&gt;&#96;--hidden&#96;:Search hidden files and directories. By default, hidden files and directories</span><br><span class="line">    are skipped. Note that if a hidden file or a directory is whitelisted in an</span><br><span class="line">    ignore file, then it will be searched even if this flag isn&#39;t provided.</span><br><span class="line">搜索隐藏文件。默认不搜索隐藏文件，如果隐藏文件处于配置白名单中，则会进行搜索，无须显示提供该选项。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他</span><br><span class="line">-------------</span><br><span class="line">* *****自动过滤********：前面说过，rg 在递归搜索时，会自动过滤&#96;.gitignore&#96;匹配规则，忽略隐藏文件和目录，忽略二进制文件和链接。</span><br><span class="line">但所有这些过滤都可以通过各自指定标记进行消除：</span><br><span class="line">1）&#96;--no-ignore&#x2F;-u&#96;：不响应&#96;.gitignore&#96;的匹配规则</span><br><span class="line">2）&#96;--hidden&#x2F;-uu&#96;：搜索隐藏文件和目录</span><br><span class="line">3）&#96;-a&#x2F;--text&#x2F;-uuu&#96;：搜索二进制文件</span><br><span class="line">4）&#96;-L&#x2F;--folow&#96;：追踪链接文件</span><br><span class="line"></span><br><span class="line">* **手动过滤:globs（&#96;-g, --glob&#96;）**：手动过滤会议于&#96;.gitignore&#96;·一样的模式被j解析，也就是，位于后面的 glob 会替换前面的 glob。</span><br><span class="line">举个例子：&#96;rg clap -g &quot;*.toml&quot; -g &quot;!*.toml&quot;&#96;，其实相当于：&#96;rg clap -g &quot;!*.toml&quot;&#96;，也就是不会搜索&#96;.toml&#96;文件了。</span><br><span class="line"></span><br><span class="line">* **手动过滤：文件类型（&#96;-g, --glob&#96;）**：使用上述 **globs** 模式其实就能实现文件类型的过滤了，但每次都写&#96;-g &quot;*.xxx&quot;&#96;太繁琐了，为此，rg 已为我们内置了另一个直接支持文件类型的选项：&#96;-t&#x2F;--type&#96;。</span><br><span class="line">举个例子：</span><br></pre></td></tr></table></figure><p>rg “fn run” –type rust // 文件类型：rust<br>rg “fn run” –trust // 文件类型：rust，更简洁<br>rg “int main” -tc // 文件类型：C，包含<code>.c</code>和<code>.h</code>文件，相当于：rg “int main” -g “*.{c,h}”</p><p>rg clap –type-not rust // 排序 rust 文件<br>rg clap -Trust // 排序 rust 文件,更简洁</p><pre><code>*****注**：即`-t`包含文件类型，`-T`排除文件类型。
文件类型可通过：`rg --type-list`进行查看。














参考
------------
* [User Guide]

* [最快的文本搜索神器ripgrep -- grep的最好代替者]






[ripgrep]:https://github.com/BurntSushi/ripgrep

[ag - the Silver Searcher]:https://www.jianshu.com/p/a6a373636894

[ag]:https://github.com/ggreer/the_silver_searcher


[最快的文本搜索神器ripgrep -- grep的最好代替者]:https://segmentfault.com/a/1190000016170184

[User Guide]:https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md</code></pre><!-- rebuild by neat -->]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>rg</tag>
      </tags>
  </entry>
</search>
