<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>webpack</title>
    <url>/post/2020/02/09/webpack/</url>
    <content><![CDATA[<!-- build time:Tue Feb 11 2020 02:20:22 GMT+0800 (China Standard Time) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本质上，<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p></blockquote><a id="more"></a><p>在开始使用 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 前，需要了解 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 的四个核心概念：</p><ul><li><strong>入口（entry）</strong>：<strong>入口起点（entry point）</strong>指示了 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 要解析的源码模块，<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 会解析这些模块并构建出其内部 <em>依赖图</em>，最后将完整的依赖输出到 bundle 文件中。</li></ul><p>&ensp;&ensp; 可以通过在 <a href="https://www.webpackjs.com/configuration" target="_blank" rel="noopener">webpack 配置</a>中配置 <code>entry</code> 属性，来指定一个入口起点（或多个入口起点）。默认值为 <code>./src</code>。</p><p><strong>单入口配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;path&#x2F;to&#x2F;my&#x2F;entry&#x2F;file.js&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>多入口配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    pageOne: &#39;.&#x2F;src&#x2F;pageOne&#x2F;index.js&#39;, &#x2F;&#x2F; 入口1</span><br><span class="line">    pageTwo: &#39;.&#x2F;src&#x2F;pageTwo&#x2F;index.js&#39;, &#x2F;&#x2F; 入口2</span><br><span class="line">    pageThree: &#39;.&#x2F;src&#x2F;pageThree&#x2F;index.js&#39; &#x2F;&#x2F; 入口3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更多配置内容，请参考：<a href="https://www.webpackjs.com/concepts/entry-points" target="_blank" rel="noopener"><em>入口起点</em></a></p><ul><li><strong>输出（output）</strong>：output 属性指定 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 输出 bundles 路径，以及命名规则。默认值为 <code>./dist</code>。</li></ul><p>&ensp;&ensp; output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist</p><p>&ensp;&ensp; 可以通过配置 <code>output</code> 字段来配置输出的 bundle 文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">const path &#x3D; require(&#39;path&#39;); &#x2F;&#x2F; 使用 nodejs 的 path 库</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;path&#x2F;to&#x2F;my&#x2F;entry&#x2F;file.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 工程根目录的 dist 文件夹</span><br><span class="line">    filename: &#39;my-first-webpack.bundle.js&#39; &#x2F;&#x2F; 输出 bundle 名字</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更多配置选择，请参考：<a href="https://www.webpackjs.com/configuration/output/" target="_blank" rel="noopener"><em>输出</em></a></p><ul><li><strong>loader</strong>：<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 本身只能处理 JavaScript 文件，对于那些非 JavaScript 的文件，则可以通过自定义 loader 来将其转换成 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 能够识别并进行处理的模块。</li></ul><p>&ensp;&ensp; 比如，在 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 打包前，loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p><p>&ensp;&ensp; 本质上，loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</p><p>在 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 中， 配置 loader 主要使用以下两个选项：</p><ul><li><strong><code>test</code> 属性</strong>：标识 loader 要处理的文件类型；</li><li><strong><code>use</code> 属性</strong>：表示进行转换时，应该使用哪个 loader；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">const config &#x3D; &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;my-first-webpack.bundle.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; test: &#x2F;\.txt$&#x2F;, use: &#39;raw-loader&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; config;</span><br></pre></td></tr></table></figure>上述配置中，指定了 webpack 编译器在 <code>require()</code> 或 <code>import</code> 导入 <strong>txt</strong> 文件时，先使用 <strong>raw-loader</strong> 进行转换，然后再打包。</li></ul><p><strong>注</strong>：loader 支持链式传递。一组链式的 loader 将按照<strong>相反的顺序</strong>执行。loader 链中的第一个 loader 返回值给下一个 loader（简而言之，loader 的执行顺序与配置相反，最后配置的 loader 最先执行）。</p><p>更多 loader 的配置，请参考：<a href="https://www.webpackjs.com/concepts/loaders/" target="_blank" rel="noopener"><em>loader</em></a></p><p>更多内置 loader，请查看：<a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noopener"><em>loaders</em></a></p><p>更多第三发 loader，请查看：<a href="https://github.com/webpack-contrib/awesome-webpack#loaders" target="_blank" rel="noopener"><em>awesome-webpack</em></a></p><ul><li><strong>插件（plugins）</strong>：loader 是在打包构建过程中用于处理某些类型的模块转换，而插件的能力更大，其在整个构建过程中起作用，可以执行范围更广的任务，比如打包优化和压缩 bundle 文件，甚至于重新定义环境中的变量。</li></ul><p>&ensp;&ensp; 这样说吧，loader 就是在构建前对某些特定类型的文件进行预处理，而插件是在构建过程中能做任何事情（应该可以这样认为，loader 其实就是一个小型的插件，其只能对某些特定文件进行预处理。而插件的目的就在于解决 loader 无法处理的事情）。</p><p>&ensp;&ensp; 想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;); &#x2F;&#x2F; 通过 npm 安装</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;); &#x2F;&#x2F; 用于访问内置插件</span><br><span class="line"></span><br><span class="line">const config &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; test: &#x2F;\.txt$&#x2F;, use: &#39;raw-loader&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;template: &#39;.&#x2F;src&#x2F;index.html&#39;&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; config;</span><br></pre></td></tr></table></figure><p><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 提供许多开箱可用的插件！查阅我们的 <a href="https://www.webpackjs.com/plugins" target="_blank" rel="noopener"><em>插件列表</em></a> 获取更多信息。</p><p>更多第三方插件，请查看 <a href="https://github.com/webpack-contrib/awesome-webpack#webpack-plugins" target="_blank" rel="noopener"><em>awesome-webpack</em></a> 列表。</p><p>更多插件配置信息，请参考：<a href="https://www.webpackjs.com/concepts/plugins/" target="_blank" rel="noopener"><em>插件（plugins）</em></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>首先安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></p></li><li><p>本地安装 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack  --save-dev </span><br><span class="line">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：也可以全局安装 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a>：<code>npm install --global webpack</code>。但是不推荐。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><strong>例子</strong>：要求在 <code>src/index.js</code> 中为 <code>document.body</code> 添加一个 <code>div</code> 子节点，该 <code>div</code> 子节点内容为：<code>&quot;Hello,Webpack&quot;</code>（要求使用第三方模块 <code>lodash</code> 实现字符串拼接）。最后使用 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 将 <code>src/index.js</code> 模块内容打包到 <code>dist/index.js</code> 中，<code>dist/index.html</code> 引用该生成的 bundle 实现页面动态添加 <code>div</code> 子节点功能。</p><p><strong>实践</strong>：</p><ol><li><p>首先创建目录结构，如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  webpackDemo</span><br><span class="line">+ |- &#x2F;dist</span><br><span class="line">+   |- index.html</span><br><span class="line">+ |- &#x2F;src</span><br><span class="line">+   |- index.js</span><br></pre></td></tr></table></figure></li><li><p>本地安装 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure></li><li><p>创建一个 <code>package.json</code> 文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>根目录下创建 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 默认配置文件：<strong>webpack.config.js</strong>，并配置其入口起点为：<code>src/index.js</code>，打包生产的 bundle 文件为：<code>dist/index.js</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;index.js&#39;,</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>安装 <code>lodash</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install lodash --save-dev</span><br></pre></td></tr></table></figure></li><li><p>编写 <code>src/index.js</code> 代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDiv</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = _.join([<span class="string">'Hello'</span>,<span class="string">','</span>,<span class="string">'Webpack'</span>]);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(createDiv());</span><br></pre></td></tr></table></figure></li><li><p>进行打包，打包完成后即可看到 <code>dist/index.js</code> 生成：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure></li><li><p>手动将生成的 <code>dist/index.js</code> 引入到 <code>dist/index.html</code> 中，打开浏览器，即可看到效果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Webpcak Demo&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script src&#x3D;&quot;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="一些有用配置"><a href="#一些有用配置" class="headerlink" title="一些有用配置"></a>一些有用配置</h2><ul><li><p><a href="https://www.webpackjs.com/concepts/mode/" target="_blank" rel="noopener"><strong>模式(mode)</strong></a>：提供 <code>mode</code> 配置选项，区分生成环境，告知 webpack 使用相应模式的内置优化。其选择有两个值可选：<code>development</code>，<code>production</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode: &#39;production&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>基础配置</strong>：生产环境 + 入口 + 出口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line">  entry: &#39;.&#x2F;foo.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;foo.bundle.js&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.webpackjs.com/configuration/resolve/#resolve-alias" target="_blank" rel="noopener"><strong>resolve.alias</strong></a>：创建 <code>import</code> 或 <code>require</code> 的别名，来确保模块引入变得更简单。例如，一些位于 <code>src/</code> 文件夹下的常用模块：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  Utilities: path.resolve(__dirname, &#39;src&#x2F;utilities&#x2F;&#39;),</span><br><span class="line">  Templates: path.resolve(__dirname, &#39;src&#x2F;templates&#x2F;&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像未配置前需要使用全路径或相对路径引入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Utility from &#39;..&#x2F;..&#x2F;utilities&#x2F;utility&#39;;</span><br></pre></td></tr></table></figure><p>在配置后，就可以使用别名进行导入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Utility from &#39;Utilities&#x2F;utility&#39;; &#x2F;&#x2F; 注意使用的是别名：Utilities</span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://www.webpackjs.com/configuration/watch/" target="_blank" rel="noopener">watch</a></strong>：webpack 可以监听文件变化，当它们修改后会重新编译。<code>watch</code> 默认为关闭。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch: true</span><br></pre></td></tr></table></figure><p>还可以通过 <code>watchOptions</code> 来进一步控制 <code>watch</code> 模式的选项：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watchOptions: &#123;</span><br><span class="line">  aggregateTimeout: 300, &#x2F;&#x2F; 文件更改后，300毫秒后进行重新构建</span><br><span class="line">  poll: 1000, &#x2F;&#x2F; 轮询时间，每 1s 进行一次检测</span><br><span class="line">  ignored: &#x2F;node_modules&#x2F;  &#x2F;&#x2F; 不监听 node_modules 目录</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.webpackjs.com/configuration/externals/" target="_blank" rel="noopener"><strong>外部扩展（externals）</strong></a>：防止将某些 <code>import</code> 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。</p></li></ul><p>&ensp;&ensp; 例如，从 CDN 引入 <a href="https://jquery.com/" target="_blank" rel="noopener">jQuery</a>，而不是把它打包：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.1.0.js"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">integrity</span>=<span class="string">"sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk="</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">externals: &#123;</span><br><span class="line">  jquery: &#39;jQuery&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就剥离了那些不需要改动的依赖模块，换句话，下面展示的代码还可以正常运行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import $ from &#39;jquery&#39;;</span><br><span class="line">$(&#39;.my-element&#39;).animate(...);</span><br></pre></td></tr></table></figure><p>像上述配置了 <code>jquery</code> 为外部依赖后，<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 编译器在遇到：<code>import $ from &#39;jquery&#39;;</code> 时，就知道了应该排除掉 <code>jquery</code> 模块，不将其打包进 bundle 中。</p><ul><li><a href="https://www.webpackjs.com/concepts/targets/" target="_blank" rel="noopener"><strong>构建目标（targets）</strong></a>：使用 <code>target</code> 属性可以配置 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 生成服务器端或者是浏览器端的 JavaScript 代码。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  target: &#39;node&#39; &#x2F;&#x2F; 生成服务器端代码</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>如果想同时生成多个 Target，可以如下配置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">var serverConfig &#x3D; &#123;</span><br><span class="line">  target: &#39;node&#39;,    &#x2F;&#x2F; 生成服务器端代码</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;lib.node.js&#39;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;…</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var clientConfig &#x3D; &#123;</span><br><span class="line">  target: &#39;web&#39;, &#x2F;&#x2F; &lt;&#x3D;&#x3D;&#x3D; 默认是 &#39;web&#39;，可省略</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;lib.js&#39;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;…</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; [ serverConfig, clientConfig ]; &#x2F;&#x2F; 导出两个 bundle</span><br></pre></td></tr></table></figure></li></ul><h2 id="管理资源"><a href="#管理资源" class="headerlink" title="管理资源"></a><a href=":https://www.webpackjs.com/guides/asset-management/">管理资源</a></h2><ul><li><strong>加载 CSS 文件</strong>：需要使用 <a href="https://www.webpackjs.com/loaders/style-loader" target="_blank" rel="noopener">style-loader</a> 和 <a href="https://www.webpackjs.com/loaders/css-loader" target="_blank" rel="noopener">css-loader</a>。</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">  module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: &#39;bundle.js&#39;,</span><br><span class="line">      path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">+   module: &#123;</span><br><span class="line">+     rules: [</span><br><span class="line">+       &#123;</span><br><span class="line">+         test: &#x2F;\.css$&#x2F;,</span><br><span class="line">+         use: [</span><br><span class="line">+           &#39;style-loader&#39;,</span><br><span class="line">+           &#39;css-loader&#39;</span><br><span class="line">+         ]</span><br><span class="line">+       &#125;</span><br><span class="line">+     ]</span><br><span class="line">+   &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：</p><ol><li>现在 <code>src/</code> 目录下新建一个 style.css 文件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; style.css</span><br><span class="line">.container &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改入口文件：<code>src/index.js</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line">+ <span class="keyword">import</span> <span class="string">'./style.css'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDiv</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = _.join([<span class="string">'Hello'</span>,<span class="string">'Webpack'</span>],<span class="string">','</span>);</span><br><span class="line">+    div.classList.add(<span class="string">'container'</span>)</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(createDiv());</span><br></pre></td></tr></table></figure></li><li>最后重新打包即可看到效果：<code>npx webpack</code></li></ol><ul><li><strong>抽离 CSS 文件为单独文件</strong>：前面使用 <a href="https://www.webpackjs.com/loaders/style-loader" target="_blank" rel="noopener">style-loader</a> 最终会将 css 样式注入到页面的 <code>&lt;head&gt;</code> 内的 <code>style</code> 节点中，即为内部样式表。我们更希望使用的是外部样式表，即通过 <code>&lt;link&gt;</code> 标签进行引入，那么通过使用 <a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a> 插件即可实现。</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mini-css-extract-plugin --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">+ const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line">const devMode &#x3D; process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;; &#x2F;&#x2F; 判断当前环境是开发环境还是 部署环境，主要是 mode属性的设置值。</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">+      &#123;</span><br><span class="line">+        test: &#x2F;\.(sa|sc|c)ss$&#x2F;,</span><br><span class="line">+        use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;]</span><br><span class="line">+      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">+  plugins: [</span><br><span class="line">+    new MiniCssExtractPlugin(&#123;</span><br><span class="line">+      filename: devMode ? &#39;[name].css&#39; : &#39;[name].[hash].css&#39;, &#x2F;&#x2F; 设置最终输出的文件名</span><br><span class="line">+      chunkFilename: devMode ? &#39;[id].css&#39; : &#39;[id].[hash].css&#39;</span><br><span class="line">+    &#125;)</span><br><span class="line">+  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：重新打包后，可在浏览器查看是否以外部链接引入样式表。</p><p><strong>注</strong>：由于抽取了样式，因此不再使用 <a href="https://www.webpackjs.com/loaders/style-loader" target="_blank" rel="noopener">style-loader</a> 注入到 html 中了。</p><ul><li><strong>加载 Sass 文件</strong>：需要使用 [sass-loader]</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install sass-loader node-sass webpack --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.(sa|sc|c)ss$&#x2F;,</span><br><span class="line">+        use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;,sass-loader]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>加载图片</strong>：需要使用 <a href="https://www.webpackjs.com/loaders/file-loader" target="_blank" rel="noopener">file-loader</a>。</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install file-loader  --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">  module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: &#39;bundle.js&#39;,</span><br><span class="line">      path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: &#x2F;\.css$&#x2F;,</span><br><span class="line">          use: [</span><br><span class="line">            &#39;style-loader&#39;,</span><br><span class="line">            &#39;css-loader&#39;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">+       &#123;</span><br><span class="line">+          test: &#x2F;\.(png|svg|jpg|gif|jpeg|ico)$&#x2F;,</span><br><span class="line">+         use: [</span><br><span class="line">+           &#39;file-loader&#39;</span><br><span class="line">+         ]</span><br><span class="line">+       &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：只需向项目中增加一张图片。比如，在 style.css 中，引入一张图片：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    color: red;</span><br><span class="line">    background: url(&#39;..&#x2F;static&#x2F;img&#x2F;horse.png&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，重新打包一下即可看到效果：<code>npx webpack</code></p><ul><li><strong>图片压缩和优化</strong>：需要使用 <a href="https://github.com/tcoopman/image-webpack-loader" target="_blank" rel="noopener">image-webpack-loader</a>。</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install image-webpack-loader --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">  module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: &#39;bundle.js&#39;,</span><br><span class="line">      path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: &#x2F;\.css$&#x2F;,</span><br><span class="line">          use: [</span><br><span class="line">            &#39;style-loader&#39;,</span><br><span class="line">            &#39;css-loader&#39;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: &#x2F;\.(png|svg|jpg|gif|jpeg|ico)$&#x2F;,</span><br><span class="line">          use: [</span><br><span class="line">            &#39;file-loader&#39;,</span><br><span class="line">+           &#123;</span><br><span class="line">+             loader: &#39;image-webpack-loader&#39;,</span><br><span class="line">+             options: &#123;</span><br><span class="line">+               mozjpeg: &#123;</span><br><span class="line">+                 progressive: true,</span><br><span class="line">+                 quality: 65</span><br><span class="line">+               &#125;,</span><br><span class="line">+               optipng: &#123;</span><br><span class="line">+                 enabled: false,</span><br><span class="line">+               &#125;,</span><br><span class="line">+               pngquant: &#123;</span><br><span class="line">+                 quality: &#39;65-90&#39;,</span><br><span class="line">+                 speed: 4</span><br><span class="line">+               &#125;,</span><br><span class="line">+               gifsicle: &#123;</span><br><span class="line">+                 interlaced: false,</span><br><span class="line">+               &#125;,</span><br><span class="line">+               webp: &#123;</span><br><span class="line">+                 quality: 75</span><br><span class="line">+               &#125;</span><br><span class="line">+             &#125;</span><br><span class="line">+           &#125;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：重新打包一下，可以看到生成一张已被压缩的图片。</p><ul><li><strong>将图片转换为 base64 编码</strong>：需要使用 <a href="https://www.webpackjs.com/loaders/url-loader/" target="_blank" rel="noopener">url-loader</a>，同时 <a href="https://www.webpackjs.com/loaders/url-loader/" target="_blank" rel="noopener">url-loader</a> 可以替换 <a href="https://www.webpackjs.com/loaders/file-loader" target="_blank" rel="noopener">file-loader</a>，其比 <a href="https://www.webpackjs.com/loaders/file-loader" target="_blank" rel="noopener">file-loader</a> 多了将图片编码为 base64 的功能。</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install url-loader --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.(png|svg|jpg|gif|jpeg|ico|woff|woff2|eot|ttf|otf)$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">+          &#123;</span><br><span class="line">+            loader: &#39;url-loader&#39;, &#x2F;&#x2F; 根据图片大小，把图片优化成base64</span><br><span class="line">+            options: &#123;</span><br><span class="line">+              limit: 10000  &#x2F;&#x2F; 图片小于 10000 字节时，进行 base64 编码</span><br><span class="line">+            &#125;</span><br><span class="line">+          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#39;image-webpack-loader&#39;, &#x2F;&#x2F; 先进行图片优化</span><br><span class="line">            options: &#123;</span><br><span class="line">              mozjpeg: &#123;</span><br><span class="line">                progressive: true,</span><br><span class="line">                quality: 65</span><br><span class="line">              &#125;,</span><br><span class="line">              optipng: &#123;</span><br><span class="line">                enabled: false</span><br><span class="line">              &#125;,</span><br><span class="line">              pngquant: &#123;</span><br><span class="line">                quality: &#39;65-90&#39;,</span><br><span class="line">                speed: 4</span><br><span class="line">              &#125;,</span><br><span class="line">              gifsicle: &#123;</span><br><span class="line">                interlaced: false</span><br><span class="line">              &#125;,</span><br><span class="line">              webp: &#123;</span><br><span class="line">                quality: 75</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：重新打包后，只要图片小于 10000 字节的，就会被转换成 base64 编码的 DataURL。</p><p><strong>注</strong>：<a href="https://www.webpackjs.com/loaders/file-loader" target="_blank" rel="noopener">file-loader</a> 和 <a href="https://www.webpackjs.com/loaders/url-loader/" target="_blank" rel="noopener">url-loader</a> 可以接收并加载任何文件，然后将其输出到构建目录。这就是说，我们可以将它们用于任何类型的文件，包括字体。</p><h2 id="管理输出"><a href="#管理输出" class="headerlink" title="管理输出"></a><a href="https://www.webpackjs.com/guides/output-management/" target="_blank" rel="noopener">管理输出</a></h2><p>前面的操作我们都是手动地对 <code>index.html</code> 文件进行管理，但随着项目的增大，手动管理方式将繁琐且容易出错，因此急需一个自动注入资源的方法，这种操作可以通过插件进行完成。</p><ul><li><strong>自动注入资源</strong>：可以使用 <a href="https://www.webpackjs.com/plugins/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a> 将打包生成的 bundle 自动注入到 <code>index.html</code> 中。</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">+ const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">+    app: &#39;.&#x2F;src&#x2F;index.js&#39; &#x2F;&#x2F; 为入口起点增加命名</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;[name]-[hash].js&#39;,</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">+  plugins: [</span><br><span class="line">+    new HtmlWebpackPlugin(&#123;</span><br><span class="line">+      title: &#39;Output Management&#39;, &#x2F;&#x2F; 默认值：Webpack App</span><br><span class="line">+      filename: &#39;index.html&#39;, &#x2F;&#x2F; 默认值： &#39;index.html&#39;</span><br><span class="line">+      minify: &#123;</span><br><span class="line">+        collapseWhitespace: true,</span><br><span class="line">+        removeComments: true,</span><br><span class="line">+        removeAttributeQuotes: true &#x2F;&#x2F; 移除属性的引号</span><br><span class="line">+      &#125;</span><br><span class="line">+    &#125;)</span><br><span class="line">+  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：安装上述配置，打包完成后，<a href="https://www.webpackjs.com/plugins/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a> 插件就会自动把生成的 js 文件插入到 <code>dist/index.html</code> 文件中。</p><ul><li><strong>清理 <code>/dist</code> 文件夹</strong>：通常，在每次构建前清理 <code>/dist</code> 文件夹，是比较推荐的做法，因此只会生成用到的文件。需要用到插件 <a href="https://www.npmjs.com/package/clean-webpack-plugin" target="_blank" rel="noopener">clean-webpack-plugin</a>。</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">+ const CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;[name]-[hash].js&#39;,</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">+    new CleanWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">	...</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：上述配置完成后，以后每次打包，<code>/dist</code> 目录都会先进行清理，打包后就只生成需要使用到的文件了。</p><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a><a href="https://www.webpackjs.com/guides/development/" target="_blank" rel="noopener">开发环境搭建</a></h2><p>在开发过程中，我们编写的源代码一般有多个，最后交由 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 打包成单独一个 bundle。因此，如果出现错误，错误显示在 bundle 中，就无法直接定位到我们自己的错误代码中。所以，在开发环境（<code>development</code>）中，需要对 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 进行一些配置，方便我们进行开发。</p><ul><li><p><strong>使用 source map</strong>：为了更容易地追踪错误和警告，JavaScript 提供了 <a href="http://blog.teamtreehouse.com/introduction-source-maps" target="_blank" rel="noopener">source map</a> 功能，将编译后的代码映射回原始源代码。如果一个错误来自于 <code>b.js</code>，source map 就会明确的告诉你。</p></li><li><p><em>配置*</em>：开启 source map</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">	devtool: &#39;inline-source-map&#39;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用观察模式</strong>：每次我们修改源码后，都需要使用 <code>npx webpack</code> 进行手动打包，不免繁琐了点。可以通过配置 webpack “watch” 自动监视文件更改，自动进行编译打包。</p></li><li><p><em>配置*</em>：启动 “watch” 的方法为控制台输入：<code>npx webpack --watch</code>，也可以将该命令配置到 <code>package.json</code> 的 <code>scripts</code> 中，启动一个脚本命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line">&#123;</span><br><span class="line">  ···</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">+    &quot;start&quot;: &quot;npx webpack --watch&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>使用*</em>：控制台输入：<code>npm run watch</code></p></li><li><p><strong>使用 webpack-dev-server</strong>：webpack “watch” 可以自动进行打包，但是浏览器端我们还是需要手动进行刷新才能看到修改效果。如果我们也想让浏览器实时监测文件修改，自动刷新，则可以使用 webpack-dev-server。</p></li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install  webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">	devServer: &#123;</span><br><span class="line">		contentBase: &#39;.&#x2F;dist&#39;  &#x2F;&#x2F; 监听目录变化，实时重载</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：通过在 <code>package.json</code> 中配置一个脚本命令进行启动：<code>npm run hotload</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line">&#123;</span><br><span class="line">  ···</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">    &quot;start&quot;: &quot;npx webpack --watch&quot;,</span><br><span class="line">+    &quot;hotload&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生产环境搭建"><a href="#生产环境搭建" class="headerlink" title="生产环境搭建"></a><a href="https://www.webpackjs.com/guides/production/" target="_blank" rel="noopener">生产环境搭建</a></h2><p>在生产环境（<code>production</code>）中，我们的目标是倾向于生成更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。<br>因此，可通过以下配置来输出更好匹配生产环境的 bundle。</p><ul><li><strong>压缩 CSS</strong>：需要使用插件：[optimize-css-assets-webpack-plugin]</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line">+ const OptimizeCSSAssetsPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">+  mode: &#39;production&#39;,</span><br><span class="line">+  optimization: &#123;</span><br><span class="line">+    minimizer: [new OptimizeCSSAssetsPlugin(&#123;&#125;)]</span><br><span class="line">+  &#125;,</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>压缩 JavaScript</strong>：需要的插件：[uglifyjs-webpack-plugin]，此插件只在 <code>mode: ’production’</code> 下起作用。</li></ul><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D uglifyjs-webpack-plugin</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ const UglifyJsPlugin &#x3D; require(&#39;uglifyjs-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode: &#39;production&#39;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">+      new UglifyJsPlugin(&#123;</span><br><span class="line">+        cache: true,</span><br><span class="line">+        parallel: true,</span><br><span class="line">+        sourceMap: true &#x2F;&#x2F; set to true if you want JS source maps</span><br><span class="line">+      &#125;),</span><br><span class="line">      new OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="区分开发环境和生产环境"><a href="#区分开发环境和生产环境" class="headerlink" title="区分开发环境和生产环境"></a><a href="https://www.webpackjs.com/guides/production/" target="_blank" rel="noopener">区分开发环境和生产环境</a></h2><p>开发环境（<code>development</code>）和生产环境（<code>production</code>）的构建目标差异很大。两者的构建目标既存在相同部分，也存在不同之处。因此，通常会为每个环境编写 <strong>彼此独立的 webpack 配置</strong>，对于两者皆有的配置，则抽取到一个公共的配置文件中即可。这种分文件配置方法可通过插件 <a href="https://github.com/survivejs/webpack-merge" target="_blank" rel="noopener">webpack-merge</a> 完成。</p><p><strong>安装</strong>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack-merge --save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong>：具体配置详情如下：</p><ul><li><p>新建一个文件：<strong>webpack.common.js</strong>。作为开发环境和生产环境公共配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.common.js</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">&#x2F;&#x2F; 清理 &#x2F;dist</span><br><span class="line">const CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class="line">&#x2F;&#x2F; 注入资源到 html</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new CleanWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: &#39;Production&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;[name].bundle.js&#39;,</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>新建一个文件：<strong>webpack.dev.js</strong>。作为开发环境的配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.dev.js</span><br><span class="line">const merge &#x3D; require(&#39;webpack-merge&#39;);</span><br><span class="line">const common &#x3D; require(&#39;.&#x2F;webpack.common.js&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; merge 第二参数的配置会覆盖第一个参数相同的配置</span><br><span class="line">module.exports &#x3D; merge(common, &#123;</span><br><span class="line">  &#x2F;&#x2F; 使能 source map</span><br><span class="line">  devtool: &#39;inline-source-map&#39;,</span><br><span class="line">  &#x2F;&#x2F; 使能 webpack-dev-server，浏览器自动重载</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: &#39;.&#x2F;dist&#39; &#x2F;&#x2F; 监听目录内容改变</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>新建一个文件：<strong>webpack.prod.js</strong>。作为生产环境的配置文件：</p><pre><code></code></pre></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack 官网</a></p></li><li><p><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">webpack 中文网</a></p></li><li><p><a href="https://malun666.github.io/aicoder_vip_doc/#/pages/vip_2webpack?id=webpack-入门教程" target="_blank" rel="noopener">webpack 入门教程</a></p></li></ul><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/post/2020/02/09/SpringMVC/</url>
    <content><![CDATA[<!-- build time:Tue Feb 11 2020 02:20:22 GMT+0800 (China Standard Time) --><h2 id="三层架构-和-MVC模型"><a href="#三层架构-和-MVC模型" class="headerlink" title="三层架构 和 MVC模型"></a>三层架构 和 MVC模型</h2><ul><li><strong>三层架构</strong>：我们在<a href="https://www.jianshu.com/p/a1b278560621" target="_blank" rel="noopener">Servlet 学习笔记</a>讲过，当前 Web应用体系主要为 <strong>C/S架构</strong> 和 <strong>B/S架构</strong>。<strong>C/S架构</strong> 是一种历史悠久且技术非常成熟的一种架构，<strong>B/S架构</strong> 从 <strong>C/S架构</strong> 演变而来，属于新生代架构，在当今 Web 应用时代，是最被广泛进行使用的架构。</li></ul><p>在标准 <strong>B/S架构</strong> 中，系统分为以下三层：</p><ul><li><strong>表现层</strong>：也就是我们常说的 web 层，该层主要负责与客户端进行交互，接受客户端请求（控制层）和向客户端响应结果（展示层）。SpringMVC框架就属于表现层。</li><li><strong>业务层</strong>：也就是我们常说的 service 层，该层主要负责业务逻辑的处理。Spring框架其实属于业务层。</li><li><strong>持久层</strong>：也就是我们常说的 dao（Data Access Object，数据访问对象） 层，该层主要负责数据持久化，也即对数据库进行增删改查操作。MyBatis框架就属于持久层。</li></ul><p>整个服务器 <strong>B/S架构</strong> 简单示意图如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-e40d496cdfffca38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B/S架构"></p><ul><li><strong>MVC模型</strong>：MVC 是 Model - View - Controller 的缩写，即 模型 - 视图 - 控制器。</li></ul><p>MVC模型也是一种分层模型，与 <strong>B/S架构</strong> 一样，其也分为了三层：</p><ul><li><strong>模型（Model）</strong>：对应于数据模型，该层主要负责对数据进行封装，也就是我们常说的 dao，bean。</li><li><strong>视图（View）</strong>：用于展示模型中的数据，通常指的就是 jsp页面 或 html页面。</li><li><strong>控制器（Controller）</strong>：接收客户端请求，处理程序逻辑，从模型中获取需要的数据，显示到不同的视图上。控制器的典型角色就是 Servlet。</li></ul><p>综上：服务器 <strong>B/S架构</strong> 中，表现层的设计模型一般使用的都是 MVC。更具体来讲，宏观上看，<strong>B/S架构</strong> 三层架构之间职责明确，各层间存在一定的依赖关系，呈相互合作之势。将表现层拆分成 MVC 模型，层次更加精细，可以说将原本表现层对业务层的依赖，精细化为控制器（Controller）层对业务层的依赖，当表现层控制器（Controller）接收到请求时，就会对请求进行解析，然后将解析结果给到业务层，业务层就会调用持久层进行 CRUD 操作，然后将结果传递给表现层的模型层（Model）进行数据封装，最后返回给客户端。</p><h2 id="SpringMVC-简介"><a href="#SpringMVC-简介" class="headerlink" title="SpringMVC 简介"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 简介</h2><ul><li><strong><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a></strong>：其正式名称为 Spring Web MVC，其是以 MVC 作为设计模型，基于 Servlet API 的基础上构建的一套 <strong>请求驱动类型（请求 - 响应模型 ）</strong> 的轻量级 Web 框架，从最开始的时候就集成到 Spring框架中。</li></ul><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 目前已成为最主流的 MVC 框架之一，它通过一套注解，可以让一个 POJO 类作为请求处理的控制器（Controller），无须实现任何额外接口，对源码侵入性低，并且它还支持 RESTful 编程风格的请求。</p><h2 id="SpringMVC-优势"><a href="#SpringMVC-优势" class="headerlink" title="SpringMVC 优势"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 优势</h2><ul><li><p>采用组件化开发，组件可插拔，组件间松散耦合。</p></li><li><p>基于 MVC 设计模型，各层分工明确，扩展性极强。</p></li><li><p>无缝集成 Spring框架，无须额外配置。</p></li></ul><h2 id="SpringMVC-使用"><a href="#SpringMVC-使用" class="headerlink" title="SpringMVC 使用"></a>SpringMVC 使用</h2><p>举个例子：浏览器请求地址：<code>http://localhost:8080/hello</code>，要求服务器返回页面<code>hello.html</code>。</p><p>我们使用 IDEA 创建该工程，具体步骤如下：</p><ol><li>创建一个 Maven 的 webapp 工程，如下图所示：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-1eed3e68e502c614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/711/format/webp" alt="maven-archetype-webapp"></p><ol start="2"><li>IDEA 默认创建的 web 工程目录补全，因此我们需要手动进行补全：</li></ol><ul><li><p><strong>补全源代码目录</strong>：在 src/main/ 目录下，创建文件夹 java - 右键该文件夹 - Mark Directory as - Sources Root。</p></li><li><p><strong>补全源代码资源目录</strong>：在 src/main/ 目录下，创建文件夹 resources - 右键该文件夹 - Mark Directory as - Resources Root。</p></li><li><p><strong>补全测试代码目录</strong>：在 src/ 目录下，创建文件夹 test/java - 右键该文件夹 - Mark Directory as - Test Sources Root。</p></li><li><p><strong>补全测试代码资源目录</strong>：在 src/test 目录下，创建文件夹 resources - 右键该文件夹 - Mark Directory as - Test Resources Root。</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2222997-29b85ff8bfdfaf63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol start="3"><li>在<code>pom.xml</code>中导入相关依赖：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">        &lt;!-- 统一版本号 --&gt;</span><br><span class="line">        &lt;spring.version&gt;5.1.9.RELEASE&lt;&#x2F;spring.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></li><li>在<code>webapp/WEB-INF/</code>目录下，创建文件夹<code>pages</code>，再创建一个<code>hello.jsp</code>页面：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-7ec1285aa41d95b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pages"></p><ol start="5"><li>创建类<code>HellController</code>，接收客户端请求，返回<code>hello.jsp</code>页面：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    public String hello()&#123;       </span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在<code>resources</code>目录下，创建 Spring 配置文件<code>applicationContext.xml</code>，开启注解扫描和 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 注解支持，并配置一个视图解析器：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.yn&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!-- 开启SpringMVC注解 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven &#x2F;&gt;</span><br><span class="line">    &lt;!-- 视图解析器 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;viewResolver&quot; class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;pages&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li><li>在<code>webapp/WEB-INF/web.xml</code>中，配置一个前端控制器，当前端控制器启动时，同时加载 Spring 配置文件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">    &lt;display-name&gt;Archetype Created Web Application&lt;&#x2F;display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置前端控制器 --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">        &lt;!-- 加载 Spring 配置文件 --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">    &lt;&#x2F;servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;!-- 拦截所有 --&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure></li><li>配置 Tomcat 服务器：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-96fc4b79973b8784.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置tomcat"></p><ol start="9"><li>运行项目，此时浏览器输入：<code>localhost:8080/hello</code>，就可以看到输出了。</li></ol><h2 id="SpringMVC-执行模型"><a href="#SpringMVC-执行模型" class="headerlink" title="SpringMVC 执行模型"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 执行模型</h2><p>在分析上述例子之前，我们首先需要了解下 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的执行模型。</p><ul><li><strong><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 执行模型</strong>：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 是基于组件的方式完成整个请求流程的。具体流程如下图所示：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2222997-9968fed79274231a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SpringMVC 执行模型"></p><p>其中，各个组件的具体功能如下：</p><ol><li><p><strong>前端控制器（DispatcherServlet）</strong>：客户端请求都会统一被<code>DispatcherServlet</code>接收，由<code>DispatcherServlet</code>委托给其他组件进行处理，其是整个请求流程控制中心，协同调配各组件共同完成一次 HTTP 请求。<code>DispatcherServlet</code>的存在降低了组件间的耦合。</p></li><li><p><strong>处理器映射器（HandlerMapping）</strong>：HandlerMapping 会根据请求URL 找到对应的处理器（Handler），生成一个处理器执行链（HandlerExecutionChain），其包含一个处理器（Handler）对象（即 Controller）和0个或多个拦截器对象（HandlerInterceptor））。</p></li></ol><p><strong>注</strong>：处理器（Handler）即控制器（Controller），HandlerMapping 会解析出 请求URL 的路径，找到对应的 Controller，将请求交由其进行处理。</p><ol start="3"><li><strong>处理器适配器（HandlerAdapter）</strong>：HandlerAdapter 会调用 Hanlder 处理请求，然后将结果适配为一个的 ModelAndView 对象（模型+视图），返回给 DispatcherServlet。</li></ol><p><strong>注</strong>：HandlerAdapter 采用适配器模式，将不同的 Handler 处理的结果适配为统一的样式 ModelAndView，通过扩展适配器可以对更多类型的 Handler 进行执行。</p><ol start="4"><li><strong>视图解析器（ViewResolver）</strong>：ViewResolver 会接收 ModelAndView 对象，根据其逻辑视图名解析成具体的物理页面地址，即返回一个具体的页面。</li></ol><p>现在，我们就可以对上文例子进行解析了。其完整的请求过程如下：</p><ol><li><p>浏览器访问<code>http://localhost:8080/hello</code>，发送一个请求。</p></li><li><p>服务器配置前端请求器（DispatcherServlet）对所有请求进行拦截，因此 DispatcherServlet 会拦截到<code>http://localhost:8080/hello</code>这个请求。</p></li><li><p>DispatcherServlet 会将请求转发给处理器映射器（HandlerMapping），HandlerMapping 会解析请求URL：<code>http://localhost:8080/hello</code>，得到请求路径<code>/hello</code>，然后根据路径找到了其对应的处理器（Handler）为：<code>HelloController</code>，然后将该 Handler 和 该路径对应的拦截器（HandlerInterceptor）封装到一个处理器执行链（HandlerExecutionChain）对象中，返回给 DispatcherServlet。</p></li><li><p>DispatcherServlet 获取到 HandlerExecutionChain 后，先执行所有我们定义的拦截器（interceptor）的<code>preHandle</code>方法，然后将处理器（Handler）发送给相应处理器适配器（HandlerAdapter），HandlerAdapter 会执行 Handler，并将其结果封装到一个 ModelAndView 对象中，返回给 DispatcherServlet，最后还会执行拦截器（interceptor）的<code>postHandle</code>方法。</p></li><li><p>DispatcherServlet 从返回的 ModelAndView 对象中获取到其逻辑视图名，将之传递给视图解析器（ViewResolver），ViewResolver 根据该逻辑视图名就可以解析出实际的具体页面 View，然后将该 View 发送给 DispatcherServlet 。</p></li><li><p>View 进行视图渲染，View 会根据传进来的 Model模型数据进行渲染。</p></li><li><p>返回控制权给 DispatcherServlet，由 DispatcherServlet 返回响应给用户，完成一个请求流程。</p></li></ol><p><strong>注</strong>：在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的各个组件中，处理器映射器（HandlerMapping），处理器适配器（HandlerAdapter）和 视图解析器（ViewResolver）称为 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的三大组件。<br>当配置了 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 注解支持：<code>&lt;mvc:annotation-driven /&gt;</code>时，这个配置会自动帮我们加载 <strong>处理映射器（RequestMappingHandlerMapping）</strong> 和 <strong>处理器适配器（RequestMappingHandlerAdapter）</strong>。因此，一般情况下， 我们只需配置一个 视图解析器 即可。</p><p>上面较详细地阐述了 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的执行模型，为了方便理解，我们可以对其进行简化，大致可以理解为：</p><ol><li><p>客户端发送请求，被服务器前端控制器（DispatcherServlet）拦截到。</p></li><li><p>DispatcherServlet 将请求转发给处理器映射器（HandlerMapping）查找得到对应的控制器（Controller）（可以根据 XML配置，注解进行查找）。</p></li><li><p>DispatcherServlet 通过处理器适配器去执行 Controller 对应的映射方法，然后将结果封装到一个 视图对象（ModelAndView）中。</p></li><li><p>DispatcherServlet 从该 ModleAndView 中取出逻辑视图名发送给视图解析器（ViewResolver），ViewResolver 根据该逻辑视图名就可找到真实的页面对象（View）。</p></li><li><p>最后由 DispatcherServlet 将 ModelAndView 中的 Model 数据传递给页面对象（View），让其进行渲染。</p></li><li><p>渲染完成后交由 DispatcherServlet 响应给客户端，完成请求过程。</p></li></ol><h2 id="SpringMVC-常用注解"><a href="#SpringMVC-常用注解" class="headerlink" title="SpringMVC 常用注解"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 常用注解</h2><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/" target="_blank" rel="noopener">@RequestMapping</a></strong>：用于建立请求URL 和 请求处理方法 之间的对应/映射关系。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Mapping</span><br><span class="line">public @interface RequestMapping &#123;</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;path&quot;)</span><br><span class="line">    String[] value() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String[] path() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    RequestMethod[] method() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] params() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] headers() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] consumes() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] produces() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/" target="_blank" rel="noopener">@RequestMapping</a> 注解可用于类和方法上，分别作为第一，二级目录，其属性具体含义如下表所示：</li></ul><table><thead><tr><th>Modify and Type</th><th>Element</th><th>Description</th></tr></thead><tbody><tr><td>Sting[]</td><td>path</td><td>URL路径</td></tr><tr><td>String[]</td><td>value</td><td>等同于 path</td></tr><tr><td>String</td><td>name</td><td>该映射名称</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html" target="_blank" rel="noopener">RequestMethod[]</a></td><td>method</td><td>指定请求方法</td></tr><tr><td>String[]</td><td>params</td><td>指定限制的请求参数</td></tr><tr><td>String[]</td><td>headers</td><td>指定限制的请求头部</td></tr><tr><td>String[]</td><td>consumes</td><td>指定请求的媒体资源类型（匹配头部：Content-Type）</td></tr><tr><td>String[]</td><td>produces</td><td>指定可接收的媒体类型（匹配头部：Accept）</td></tr></tbody></table><ul><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/GetMapping.html" target="_blank" rel="noopener">@GetMapping</a></strong>：映射方法支持 HTTP GET请求。其是<code>@RequestMapping(method = RequestMethod.GET)</code>的缩写。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@RequestMapping(</span><br><span class="line">    method &#x3D; &#123;RequestMethod.GET&#125;</span><br><span class="line">)</span><br><span class="line">public @interface GetMapping &#123;</span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; RequestMapping.class</span><br><span class="line">    )</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; RequestMapping.class</span><br><span class="line">    )</span><br><span class="line">    String[] value() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; RequestMapping.class</span><br><span class="line">    )</span><br><span class="line">    String[] path() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; RequestMapping.class</span><br><span class="line">    )</span><br><span class="line">    String[] params() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; RequestMapping.class</span><br><span class="line">    )</span><br><span class="line">    String[] headers() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; RequestMapping.class</span><br><span class="line">    )</span><br><span class="line">    String[] consumes() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; RequestMapping.class</span><br><span class="line">    )</span><br><span class="line">    String[] produces() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/PostMapping.html" target="_blank" rel="noopener">@PostMapping</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/PutMapping.html" target="_blank" rel="noopener">@PutMapping</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/DeleteMapping.html" target="_blank" rel="noopener">@DeleteMapping</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/PatchMapping.html" target="_blank" rel="noopener">@PatchMapping</a> 分别支持 Post，Put，Delete，Patch 请求。</p></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestBody.html" target="_blank" rel="noopener">@RequestBody</a></strong>：表示将请求体作为<code>Controller</code>方法的参数。<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestBody.html" target="_blank" rel="noopener">@RequestBody</a> 会读取请求体内容，然后通过系统默认配置的<code>HttpMessageConverter</code>进行解析，并将解析结果绑定到<code>Controller</code>方法参数上。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface RequestBody &#123;</span><br><span class="line">    boolean required() default true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>注*</em>：Get 方法不适用该注解。</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;requestBody&quot;)</span><br><span class="line">public String requestBody(@RequestBody String body) &#123;</span><br><span class="line">    return body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ResponseBody.html" target="_blank" rel="noopener">@ResponseBody</a></strong>：表示方法返回值作为响应体内容。即将<code>Controller</code>方法返回的对象，通过适当的<code>HttpMessageConverter</code>转换为指定格式后，写入到<code>Response</code>对象的响应体中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ResponseBody &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RestController.html" target="_blank" rel="noopener">@RestController</a></strong>：该注解是一个组合注解，相当于 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Controller.html" target="_blank" rel="noopener">@Controller</a> 和 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ResponseBody.html" target="_blank" rel="noopener">@ResponseBody</a> 的组合。当使用该注解时，方法上的 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/" target="_blank" rel="noopener">@RequestMapping</a> 注解默认会带上 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ResponseBody.html" target="_blank" rel="noopener">@ResponseBody</a> 的语义。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Controller</span><br><span class="line">@ResponseBody</span><br><span class="line">public @interface RestController &#123;</span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; Controller.class</span><br><span class="line">    )</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html" target="_blank" rel="noopener">@RequestParam</a></strong>：用于把请求携带的参数赋值给控制器方法参数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface RequestParam &#123;</span><br><span class="line">    @AliasFor(&quot;name&quot;)</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    boolean required() default true;</span><br><span class="line"></span><br><span class="line">    String defaultValue() default &quot;\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html" target="_blank" rel="noopener">@RequestParam</a> 注解只能用于参数上，其属性具体含义如下表所示：</p></li></ul><table><thead><tr><th>Modifier and Type</th><th>Element</th><th>Description</th></tr></thead><tbody><tr><td>String</td><td>name</td><td>请求参数名称</td></tr><tr><td>String</td><td>value</td><td>等同于 name</td></tr><tr><td>String</td><td>defaultValue</td><td>默认值。当请求参数未提供或为空时，使用该默认值。</td></tr><tr><td>boolean</td><td>required</td><td>请求参数是否必须提供此参数</td></tr><tr><td>示例：</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;requestParam&quot;)</span><br><span class="line">public String requestParam(@RequestParam(&quot;name&quot;) String username) &#123;</span><br><span class="line">    return username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr><tr><td>* <strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestHeader.html" target="_blank" rel="noopener">@RequestHeader</a></strong>：用于获取请求头，赋值给方法参数。</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface RequestHeader &#123;</span><br><span class="line">    @AliasFor(&quot;name&quot;)</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    boolean required() default true;</span><br><span class="line"></span><br><span class="line">    String defaultValue() default &quot;\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr><tr><td>示例：</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;requestHeader&quot;)</span><br><span class="line">public String requestHeader(@RequestHeader(&quot;User-Agent&quot;) String userAgent) &#123;</span><br><span class="line">    return userAgent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr></tbody></table><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html" target="_blank" rel="noopener">@PathVariable</a></strong>：用于绑定 URL 占位符，赋值给方法参数。比如，url为<code>/delete/{id}</code>，则<code>{id}</code>即为占位符。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface PathVariable &#123;</span><br><span class="line">    @AliasFor(&quot;name&quot;)</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    boolean required() default true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;pathVariable&#x2F;&#123;uid&#125;&quot;)</span><br><span class="line">public String pathVariable(@PathVariable(&quot;uid&quot;) Integer userId) &#123;</span><br><span class="line">    return &quot;Your id is &quot; + userId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a></strong>：用于把一个方法参数或方法返回值绑定到一个模型属性上。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ModelAttribute &#123;</span><br><span class="line">    @AliasFor(&quot;name&quot;)</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    boolean binding() default true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>该注解可用于方法和参数上：</p><ol><li>注解于参数上时，当该模型不存在时（没有 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解的方法返回相应模型对象），会自动实例化一个新的模型对象，并且当请求携带有与模型字段相匹配的参数时，模型会自动将这些参数值绑定到对应域变量上（数据绑定）。</li></ol><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    static class User implements Serializable &#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line"></span><br><span class="line">        public User(String name, Integer age) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            if (this.age &#x3D;&#x3D; null) &#123;</span><br><span class="line">                return String.format(&quot;[%s]&quot;, this.name);</span><br><span class="line">            &#125;</span><br><span class="line">            return String.format(&quot;[%s:%d years old]&quot;, this.name, this.age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;modelAttribute&quot;)</span><br><span class="line">    public String modelAttribute(@ModelAttribute User user) &#123;</span><br><span class="line">        return user.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：当客户端请求<code>/modelAttribute</code>时，被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解的参数<code>user</code>会自动创建一个实例对象，如果请求携带参数：<code>/modelAttribute?name=Whyn</code>，则该实例对象的属性<code>name</code>就会自动获取请求对应值，即：<code>user.name=Whyn</code>。</p><ol start="2"><li>注解于方法上时，当接收到请求时，会先执行被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解的方法，然后再执行控制器对应请求映射方法。</li></ol><p>&ensp;&ensp;注解于方法上可分为两种情形：</p><p>&ensp;&ensp;1）方法没有返回值，也即不提供模型对象给控制器方法参数。不过一般使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a>，都是为了提供自定义的模型对象给到控制器映射方法，因此，对于没有返回值的方法，若想提供模型对象，则需要<code>Model</code>对象进行辅助：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ModelAttribute</span><br><span class="line">public void getUser(@RequestParam(&quot;name&quot;) String name,</span><br><span class="line">                    @RequestParam(value &#x3D; &quot;age&quot;, required &#x3D; false) Integer age,</span><br><span class="line">                    Model model) &#123;</span><br><span class="line">    User user &#x3D; new User(name, age);</span><br><span class="line">    model.addAttribute(&quot;user&quot;,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;&#x2F;modelAttribute&quot;)</span><br><span class="line">public String modelAttribute(@ModelAttribute(&quot;user&quot;) User user) &#123;</span><br><span class="line">    return user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：参数<code>Model</code>具体类型为<code>BindingAwareModelMap</code>，其实质就是一个<code>Map</code>键值对对象，使用该<code>Map</code>帮助我们存储模型对象，内部的具体实现其实是将键值对存储到<code>Request</code>域中，因此我们可以在控制器内不同方法间共享该模型对象。<br>控制器方法参数的 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解属性<code>value</code>用于指定<code>Model</code>键值，可忽略，忽略时系统直接根据参数名称进行获取。<br>控制器方法参数的 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解可忽略不写，系统会自动查找相应模型进行注入。</p><p>&ensp;&ensp;2）当 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 注解的方法有返回值时，该返回值会被传入给控制器请求映射方法的参数上。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ModelAttribute(&quot;user&quot;)</span><br><span class="line">public User getUser(@RequestParam(&quot;name&quot;) String name,</span><br><span class="line">                    @RequestParam(value &#x3D; &quot;age&quot;, required &#x3D; false) Integer age) &#123;</span><br><span class="line">    return new User(name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;&#x2F;modelAttribute&quot;)</span><br><span class="line">public String modelAttribute(@ModelAttribute(&quot;user&quot;) User user) &#123;</span><br><span class="line">    return user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：方法<code>getUser</code>其实就相当于调用了<code>model.addAttribute(&quot;user&quot;,user)</code>，键从注解 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 获取，值即为方法返回值。</p><ul><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="noopener">@ExceptionHandler</a></strong>：用于捕获控制器/方法抛出的异常的处理方案。当<code>Controller</code>或映射方法抛出异常时，如果该异常符合 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="noopener">@ExceptionHandler</a> 注解声明的异常时，则会被该注解声明的方法进行捕获。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ExceptionHandler &#123;</span><br><span class="line">    Class&lt;? extends Throwable&gt;[] value() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ExceptionController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;runtimeexception&quot;)</span><br><span class="line">    public String exception() &#123;</span><br><span class="line">        throw new RuntimeException(&quot;runtime exception occured!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ResponseStatus(HttpStatus.NOT_FOUND) &#x2F;&#x2F; 404</span><br><span class="line">    @ExceptionHandler(&#123;IOException.class, RuntimeException.class&#125;)</span><br><span class="line">    public ModelAndView handlerException(Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return new ModelAndView(&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a></strong>：该注解用于初始化 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/WebDataBinder.html" target="_blank" rel="noopener">WebDataBinder</a>，从而可以对前台请求参数进行预处理。<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 支持 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/" target="_blank" rel="noopener">@RequestMapping</a> 注解方法上的所有参数，除了命令/表单对象和相应的验证结果对象。<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 注解的方法不能有返回结果，通常都设置返回值为<code>void</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface InitBinder &#123;</span><br><span class="line">    String[] value() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>注*</em>：当前端控制器（DispatcherServlet）接收到请求时，在调用相应控制器（<code>Controller</code>）映射方法前，都会调用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 注解的方法对相应请求参数进行预处理。</p></li></ul><p>示例：对前台请求参数日期数据（形如<code>2019-08-30</code>）进行转换，使控制器映射方法能接收该参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;date&quot;)</span><br><span class="line">public String today(@RequestParam(&quot;date&quot;) Date date)&#123;</span><br><span class="line">    return date.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@InitBinder</span><br><span class="line">public void transformDate(WebDataBinder binder)&#123;</span><br><span class="line">    binder.addCustomFormatter(new DateFormatter(&quot;yyyy-MM-dd&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：对于大多数请求参数，Spring 已经为我们实现了自动数据绑定功能。但是总有一些自定义的参数数据，Spring 无法自动进行转换，因此需要我们手动提供一个转换器，就比如对于上例自定义上传的日期格式（<code>yyyy-MM-dd</code>），Spring 没有提供相应转换器，此时我们就可以借助 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 对参数进行预处理，使之能转换成相应的类型。<br><strong>注</strong>：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 的属性只有<code>value</code>，其用于声明要进行预处理的命令/表单属性 或者 请求参数名称。默认则对所有参数进行预处理。</p><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html" target="_blank" rel="noopener">@ControllerAdvice</a></strong>：用于为 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="noopener">@ExceptionHandler</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html" target="_blank" rel="noopener">@InitBinder</a> 和 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html" target="_blank" rel="noopener">@ModelAttribute</a> 定义多控制器（<code>Controller</code>）共享的组件。相当于声明一个全局处理组件，为多个<code>Controller</code>设置一套相同的处理机制。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Component</span><br><span class="line">public @interface ControllerAdvice &#123;</span><br><span class="line">    @AliasFor(&quot;basePackages&quot;)</span><br><span class="line">    String[] value() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(&quot;value&quot;)</span><br><span class="line">    String[] basePackages() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] assignableTypes() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Annotation&gt;[] annotations() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html" target="_blank" rel="noopener">@ControllerAdvice</a> 只能作用于类上，其属性具体含义如下表所示：</li></ul><table><thead><tr><th>Modifier and Type</th><th>Element</th><th>Description</th></tr></thead><tbody><tr><td>String[]</td><td>basePackages</td><td>指定要进行拦截的包（根包）</td></tr><tr><td>String[]</td><td>value</td><td>等同于 basePackages</td></tr><tr><td>Class&lt;?&gt;[]</td><td>basePackageClasses</td><td>指定要进行拦截的类所在的包（根包）</td></tr><tr><td>Class&lt;?&gt;[]</td><td>assignableTypes</td><td>指定要进行拦截的具体类（类型）</td></tr><tr><td>Class&lt;? extends Annotation&gt;[]</td><td>annotations</td><td>指定拦截被相关注解注解的类</td></tr></tbody></table><p>示例：为所有控制器（<code>Controller</code>）设置一个全局异常处理器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class ExceptionController &#123;</span><br><span class="line"></span><br><span class="line">    @ResponseStatus(HttpStatus.NOT_FOUND) &#x2F;&#x2F; 404</span><br><span class="line">    @ExceptionHandler(&#123;IOException.class, RuntimeException.class&#125;)</span><br><span class="line">    public ModelAndView handlerException(Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return new ModelAndView(&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>当我们发送一个请求时，一般都会携带请求参数，服务器则需要解析请求获取参数值。</p><p>比如，我们发送了请求：<code>curl &quot;localhost:8080/params?name=Whyn&amp;password=1234&quot;</code>，对于服务器来说，其需要获取参数<code>name</code>和<code>password</code>的值，进行使用。</p><p>对于原生 Servlet 来说，获取请求参数方法如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@WebServlet(&quot;&#x2F;params&quot;)</span><br><span class="line">public class BindServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        String name &#x3D; request.getParameter(&quot;name&quot;);</span><br><span class="line">        String password &#x3D; request.getParameter(&quot;password&quot;);</span><br><span class="line">        System.out.println(String.format(&quot;%s:%s&quot;,name,password));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中，我们同样可以在控制器中接收<code>HttpServletRequest</code> 和 <code>HttpServletResponse</code>对象，从而获取请求参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class BindController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">    public void bindParams(HttpServletRequest request, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">        String name &#x3D; request.getParameter(&quot;name&quot;);</span><br><span class="line">        String password &#x3D; request.getParameter(&quot;password&quot;);</span><br><span class="line">        String result &#x3D; String.format(&quot;%s:%s&quot;, name, password);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        response.getWriter().write(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子的做法其实是直接使用底层 Servlet API 进行参数获取，这样一方面数据获取需要手动操作，比较繁琐；另一方面，控制器（<code>Controller</code>）由于映射方法接收了<code>HttpServletRequest</code>类型等作为参数，使得<code>Controller</code>和 Servlet 产生了耦合。</p><p>其实，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 已经为我们提供了对请求参数进行解析和绑定的功能，我们称之为 <strong>数据绑定</strong>。</p><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 提供了对 <strong>简单类型</strong>，<strong>实体类型（Bean）</strong> 和 <strong>复杂类型</strong> 以及 <strong>自定义类型</strong> 的数据绑定功能。</p><ul><li><p><strong>简单类型</strong>：即自动绑定基本数据类型和字符串数据。<br>示例：发送请求：<code>curl &quot;localhost:8080/params?name=Whyn&amp;age=10&quot;</code><br>要求：解析得到参数值<br>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String bindParams(@RequestParam(&quot;name&quot;) String name, @RequestParam(&quot;age&quot;) Integer age) &#123;</span><br><span class="line">    return String.format(&quot;%s:%s&quot;, name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>注*</em>：参数注解<code>@RequestParam</code>指定了请求参数名称，此处可忽略不写，则 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 会根据参数名称自动进行数据绑定，通常建议加上<code>@RequestParam</code>注解进行显示指定参数名称。</p></li><li><p><strong>实体类型</strong>：即自动绑定请求参数到 Java Bean 中。<br>示例：发送请求：<code>curl &quot;localhost:8080/params?name=Whyn&amp;age=10&quot;</code><br>要求：解析参数，将其值封装到一个<code>User</code>类中。<br>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class BindController &#123;</span><br><span class="line"></span><br><span class="line">    static class User implements Serializable &#123;</span><br><span class="line">        &#x2F;&#x2F; 请求参数必须于属性名一致</span><br><span class="line">        private String name;</span><br><span class="line">        private Integer age;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 需要提供 setter 方法，让 Spring 进行注入</span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setAge(Integer age) &#123;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;User&#123;&quot; +</span><br><span class="line">                    &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                    &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                    &#39;&#125;&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String bindParams(User user) &#123;</span><br><span class="line">        return user.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：当请求参数要封装到 Java Bean 类时，要求 Bean 类对象属性名与请求参数名一致才会进行注入：即<code>name</code>赋给<code>user.name</code>，<code>age</code>赋给<code>user.age</code>（通过反射<code>setter</code>函数注入）。</p></li></ul><p>如果 Java Bean 内还嵌套有 Java Bean，如下代码所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class Book implements Serializable &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Double price;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(Double price) &#123;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, price&#x3D;&quot; + price +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class User implements Serializable &#123;</span><br><span class="line">    &#x2F;&#x2F; 请求参数必须于属性名一致</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    &#x2F;&#x2F; 嵌套 Java Bean</span><br><span class="line">    private Book book;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 需要提供 setter 方法，让 Spring 进行注入</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBook(Book book) &#123;</span><br><span class="line">        this.book &#x3D; book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 对于嵌套 bean 类，需要提供 getter 函ServletModelAttributeMethodProcessor数</span><br><span class="line">    public Book getBook() &#123;</span><br><span class="line">        return book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &quot;, book&#x3D;&quot; + book +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：对于嵌套 Bean 需提供相应<code>getter</code>函数才能注入成功。</p><p><code>User</code>类内部嵌套了一个 Bean 类<code>Book</code>，此时如果还想能进行自动数据绑定，则需要在发送请求时，指明参数具体类型，比如：<br>示例：发送请求：<code>curl &quot;localhost:8080/params?name=Whyn&amp;age=10&amp;book.name=SpringMVC&amp;book.price=100.00&quot;</code><br>要求：解析参数，自动绑定到一个<code>User</code>类中。<br>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String bindParams(User user) &#123;</span><br><span class="line">    return user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：请求参数<code>book.name</code>和<code>book.price</code>，前缀<code>book</code>表示嵌套 Bean 在外部 Bean 的名称，后缀表示嵌套 Bean 的各个属性名。</p><ul><li><strong>复杂类型</strong>：即自动绑定集合类型。集合类型大致可以分为以下两种：</li></ul><ol><li><strong>绑定数组类型</strong>：主要用于当请求参数具备一个或多个相同名称的时候。<br>示例：发送请求：<code>curl &quot;localhost:8080/params?name=Whyn01&amp;name=Whn02&quot;</code><br>要求：解析参数，将参数名相同的值封装到数组中。<br>代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String bindParams(@RequestParam(&quot;name&quot;) String[] names) &#123;</span><br><span class="line">    return Arrays.toString(names);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>绑定集合对象（<code>List</code>，<code>Set</code>，<code>Map</code>）</strong>：对于集合类型，在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中，我们需要单独设置一个包装类进行辅助，其属性为请求参数的集合类型（比如<code>List&lt;Book&gt;</code>，<code>Set&lt;Book&gt;</code>，<code>Map&lt;String,Book&gt;</code>）。<br>示例：发送请求：<code>curl &quot;localhost:8080/params&quot; -d &quot;bookList[0].name=SpringMVC01&amp;bookList[0].price=10.0&amp;bookSet[0].name=SpringMVC02&amp;bookSet[0].price=20.0&amp;bookMap[&#39;one&#39;].name=SpringMVC03&amp;bookMap[&#39;one&#39;].price=30.0&quot;</code><br>要求：解析参数，将参数名相同的值封装到相应集合中。<br>代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class BookVo implements Serializable &#123;</span><br><span class="line">    private List&lt;Book&gt; bookList;</span><br><span class="line">    private Set&lt;Book&gt; bookSet;</span><br><span class="line">    private Map&lt;String, Book&gt; bookMap;</span><br><span class="line"></span><br><span class="line">    public BookVo() &#123;</span><br><span class="line">        &#x2F;&#x2F; Set 集合必须进行初始化，且每次传参时，不能超过该集合大小</span><br><span class="line">        this.bookSet &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F; Set 集合大小为 1</span><br><span class="line">        this.bookSet.add(new Book());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Book&gt; getBookList() &#123;</span><br><span class="line">        return bookList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookList(List&lt;Book&gt; bookList) &#123;</span><br><span class="line">        this.bookList &#x3D; bookList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Set&lt;Book&gt; getBookSet() &#123;</span><br><span class="line">        return bookSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookSet(Set&lt;Book&gt; bookSet) &#123;</span><br><span class="line">        this.bookSet &#x3D; bookSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Map&lt;String, Book&gt; getBookMap() &#123;</span><br><span class="line">        return bookMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookMap(Map&lt;String, Book&gt; bookMap) &#123;</span><br><span class="line">        this.bookMap &#x3D; bookMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;BookVo&#123;&quot; +</span><br><span class="line">                &quot;bookList&#x3D;&quot; + bookList +</span><br><span class="line">                &quot;, bookSet&#x3D;&quot; + bookSet +</span><br><span class="line">                &quot;, bookMap&#x3D;&quot; + bookMap +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@PostMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String bindParams(BookVo bookVo) &#123;</span><br><span class="line">    return bookVo.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 对于复杂类型的数据绑定支持并不是很好，实际使用中，对于复杂类型，更多的是通过 JSON，XML 等数据格式进行传输。</p><ul><li><strong>自定义类型</strong>：前台传递的请求参数，对于后台来说，都是字符串类型。对于大多数常见类型，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 已经提供了相关转换器进行转换，但对于自定义类型数据，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 无法进行转换，此时就需要我们自己手动实现一个转换器，并注册给 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a>。<br>示例：我们为类<code>Book</code>增加一个属性：发布日期<code>publishDate</code>，其格式为<code>yyyy-MM-dd</code>。<br>前台会发送请求：<code>curl &quot;localhost:8080/params?name=SpringMVC&amp;price=100.0&amp;publishDate=2019-08-31&quot;</code>。<br>要求：解析参数，封装到一个<code>Book</code>对象中。<br>分析：对于请求参数<code>name</code>和<code>price</code>，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 内置转换器已可进行数据类型正确转换，但对于参数<code>publishDate</code>，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 无法进行转换，因此，我们需要手动实现一个转换器，并注册给 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a>，具体操作如下：</li></ul><ol><li>自定义一个转换器：<code>String2DateConverter</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line">public class String2DateConverter implements Converter&lt;String, Date&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Date convert(String source) &#123;</span><br><span class="line">        String dateFormat &#x3D; &quot;yyyy-MM-dd&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            return new SimpleDateFormat(dateFormat).parse(source);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;无效日期格式，请使用：&quot; + dateFormat);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注册自定义转换器，并配置让其生效：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    ...</span><br><span class="line">    &lt;!-- 配置类型转换器 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;converterService&quot; class&#x3D;&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;converters&quot;&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;!-- 注入自定义类型转换器 --&gt;</span><br><span class="line">                &lt;bean class&#x3D;&quot;com.yn.convverter.String2DateConverter&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;set&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!-- 开启SpringMVC注解，并使能自定义类型转换器 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven conversion-service&#x3D;&quot;converterService&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li><li>完成控制器代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class DataBindController &#123;</span><br><span class="line"></span><br><span class="line">    static class Book implements Serializable &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private Double price;</span><br><span class="line"></span><br><span class="line">        private Date publishDate;</span><br><span class="line"></span><br><span class="line">        public Date getPublishDate() &#123;</span><br><span class="line">            return publishDate;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setPublishDate(Date publishDate) &#123;</span><br><span class="line">            this.publishDate &#x3D; publishDate;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;params&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String bindParams(Book book) &#123;</span><br><span class="line">        return book.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="拦截器（HandlerInterceptor）"><a href="#拦截器（HandlerInterceptor）" class="headerlink" title="拦截器（HandlerInterceptor）"></a>拦截器（HandlerInterceptor）</h2><ul><li><strong>拦截器（HandlerInterceptor）</strong>：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中的拦截器（HandlerInterceptor）与 Servlet 中的过滤器（Filter）功能类似，都是用于拦截请求。区别在于 Filter 是对 Servlet 进行拦截，HandlerInterceptor 是对 Controller 进行拦截。</li></ul><p>Filter 和 HandlerInterceptor 的一次完整请求过程大致如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-70d49c9cdc1f2a36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>理解上面这张图，应该就可以很清晰地掌握 Filter 和 HandlerInterceptor 的关系与执行模型。</p><p><strong>注</strong>：对于 tomcat 服务器来说，所有的资源访问都是通过 Servlet 来实现的，对于静态资源，其使用的是 DefaultServlet 来处理。<br>因此，Filter 可以拦截静态资源，而 HandlerInterceptor 由于只能拦截 Controller 方法，故其不能拦截静态资源。</p><p>下面看下 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 的 HandlerInterceptor 接口：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-a69919c5523d2c01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HandlerInterceptor"></p><p>HandlerInterceptor 提供了三个接口方法：</p><ul><li><strong><code>preHandle</code></strong>：该方法在<code>Controller</code>映射方法执行前调用，用以对请求做一些预处理操作。需要注意的是，该方法是 HandlerInterceptor 接口方法中唯一一个有返回值的接口，其返回值类型为<code>boolean</code>：当返回<code>true</code>时，表示继续执行处理器执行链（HandlerExecutionChain）的下一结点；当返回<code>false</code>时，表示打断处理器执行链，直接由该方法处理请求给到 DispatcherServlet，完成请求。因此，处理器执行链的后续节点不会得到执行。</li><li><strong><code>postHandle</code></strong>：该方法在<code>Controller</code>映射方法执行后，返回<code>ModelAndView</code>之前执行。</li><li><strong><code>afterCompletion</code></strong>：该方法视图页面渲染完成后执行。</li></ul><p><strong>注</strong>：<code>postHandle</code>对于<code>@ResponseBody</code>和<code>ResponseEntity</code>方法来说作用相对有限，因为这些方法在<code>HandlerAdapter</code>内部的响应就会被写入并进行提交，时序上优先于<code>postHandle</code>，因此<code>postHandle</code>此时就无法对响应进行修改。在这种场景下，可以通过实现<code>ResponseBodyAdvice</code>，并将其声明为一个 Controller Advice bean 或者直接通过<code>RequestMappingHandlerAdapter</code>进行配置。</p><p>构建一个 HandlerInterceptor 很简单，只需两个步骤：</p><ol><li>首先构建一个 HandlerInterceptor 类：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class InterceptorOne implements HandlerInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName()+&quot; preHandle&quot;);</span><br><span class="line">        return true; &#x2F;&#x2F; don&#39;t break the chain</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName()+&quot; postHandler&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName()+&quot; afterCompletion&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对创建的 HandlerInterceptor 类进行配置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicatioinContext.xml --&gt;</span><br><span class="line">&lt;!-- 拦截器 --&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;!-- 配置拦截器 --&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!-- 配置拦截路径，&#x2F;**：表示拦截所有URL及其子路径--&gt;</span><br><span class="line">        &lt;mvc:mapping path&#x3D;&quot;&#x2F;**&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 配置拦截器对象 --&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;com.yn.interceptor.InterceptorOne&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mvc:interceptor&gt;</span><br><span class="line">&lt;&#x2F;mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="文件上传-下载"><a href="#文件上传-下载" class="headerlink" title="文件上传/下载"></a>文件上传/下载</h2><ul><li><strong>文件上传原理</strong>：文件上传是以<code>multipart/form-data</code>的 MIME 类型进行上传，此时请求报文的<code>Content-Type</code>会随机生成一个 boundary（分界符），这个 boundary 标记请求体的一段数据（多个文件用多个 boundary 进行分隔）。也即服务端只需查找请求头<code>Content-Type</code>，获取 boundary，然后根据该 boundary，在请求体中第一次出现该 boundary 的位置到第二次出现该 boundary 的位置的中间部分即为上传文件的内容，具体格式如下所示：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2222997-5a74df8a61b5e7e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件上传格式"></p><p><strong>注</strong>：文件上传 from 表单的请求正文类型<code>enctype</code>必须为<code>multipart/form-data</code>，其他客户端则设置<code>Content-Type:multipart/data</code>，<code>method</code>的取值必须为<code>post</code></p><p>这里我们借助开源库 <a href="https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload/1.4" target="_blank" rel="noopener">commons-fileupload</a> 对上传文件进行解析，首先导入该库：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>对于文件上传，传统方式是对<code>request</code>对象进行解析，获取请求体内容，再解析出文件内容，进行保存。</p><p>而在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中，其是由组件构建完成请求，因此，我们只需添加一个文件上传解析器，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 就能自动帮我们将上传文件解析处理（具体为<code>MultipartFile</code>对象），因此，控制器映射方法只需接收解析出来的文件即可。</p><p>文件解析器配置方法如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;!-- 配置文件上传解析器 --&gt;</span><br><span class="line">&lt;!-- id 必须为 multipartResolver --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;multipartResolver&quot; class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>到这里，我们就可以实现文件上传了。</p><p>常见的文件上传有三种方式，以下依次进行讲解：</p><ul><li><strong>单文件上传</strong>：每次只上传一个文件，具体步骤如下：</li></ul><ol><li>前端页面写一个单文件上传 form 表单：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;上传单文件&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;form enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;&#x2F;uploadSingleFile&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;uploadFile&quot;&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li><li>控制器映射方法接收上传文件，并进行磁盘保存操作：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UploadController &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 支持单文件上传</span><br><span class="line">    @PostMapping(&quot;&#x2F;uploadSingleFile&quot;)</span><br><span class="line">    public String uploadSingleFile(HttpServletRequest request,</span><br><span class="line">                                   @RequestParam(&quot;uploadFile&quot;) MultipartFile uploadFile) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建上传目录</span><br><span class="line">        String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File dir &#x3D; new File(path);</span><br><span class="line">        if (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取上传文件名</span><br><span class="line">        String filename &#x3D; uploadFile.getOriginalFilename();</span><br><span class="line">        &#x2F;&#x2F; 写入磁盘</span><br><span class="line">        uploadFile.transferTo(new File(dir, filename));</span><br><span class="line">        return filename + &quot; upload successful&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>多文件上传</strong>：每次上传多个文件，具体步骤如下：</li></ul><ol><li>前端页面 form 表单支持多文件选择：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;上传多文件&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;form enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;&#x2F;uploadMultiFiles&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;uploadFiles&quot; multiple&#x3D;&quot;multiple&quot;&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：其实就是多个<code>multiple</code>属性。<br>2. 多文件上传与单文件上传其实实现很相似，借助于 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 数据绑定功能，我们只需将控制器映射方法设成数组即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UploadController &#123;</span><br><span class="line">    &#x2F;&#x2F; 支持多文件上传</span><br><span class="line">    @PostMapping(&quot;&#x2F;uploadMultiFiles&quot;)</span><br><span class="line">    public String uploadMultiFiles(HttpServletRequest request,</span><br><span class="line">                                  @RequestParam(&quot;uploadFiles&quot;)MultipartFile[] uploadFiles) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建上传目录</span><br><span class="line">        String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File dir &#x3D; new File(path);</span><br><span class="line">        if (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for (MultipartFile file : uploadFiles) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取上传文件名</span><br><span class="line">            String filename &#x3D; file.getOriginalFilename();</span><br><span class="line">            System.out.println(&quot;upload file: &quot; + filename);</span><br><span class="line">            &#x2F;&#x2F; 写入磁盘</span><br><span class="line">            file.transferTo(new File(dir, filename));</span><br><span class="line">            System.out.println(&quot;upload file done: &quot; + filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;upload files done&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>多文件上传+额外表单字段</strong>：有时候可能需要对上传文件进行一些额外信息描述，此时除了上传文件外，还需上传一些额外字段：</li></ul><ol><li>前端页面 form 表单增加额外字段：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;上传多文件&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;form enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;&#x2F;uploadMultiFiles&quot;&gt;</span><br><span class="line">    name:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    description:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;description&quot;&#x2F;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    upload files:&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;uploadFiles&quot; multiple&#x3D;&quot;multiple&quot;&#x2F;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li><li>后端我们使用一个新的 Java Bean 类，用于 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 封装表单数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UploadController &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 封装表单数据</span><br><span class="line">    static class UploadFiles implements Serializable &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private String description;</span><br><span class="line">        private List&lt;MultipartFile&gt; uploadFiles;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getDescription() &#123;</span><br><span class="line">            return description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setDescription(String description) &#123;</span><br><span class="line">            this.description &#x3D; description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;MultipartFile&gt; getUploadFiles() &#123;</span><br><span class="line">            return uploadFiles;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setUploadFiles(List&lt;MultipartFile&gt; uploadFiles) &#123;</span><br><span class="line">            this.uploadFiles &#x3D; uploadFiles;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;UploadFiles&#123;&quot; +</span><br><span class="line">                    &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                    &quot;, description&#x3D;&#39;&quot; + description + &#39;\&#39;&#39; +</span><br><span class="line">                    &quot;, uploadFiles&#x3D;&quot; + uploadFiles +</span><br><span class="line">                    &#39;&#125;&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 支持多文件上传</span><br><span class="line">    @PostMapping(&quot;&#x2F;uploadMultiFiles&quot;)</span><br><span class="line">    public String uploadMultiFiles(HttpServletRequest request,</span><br><span class="line">                                   @ModelAttribute UploadFiles uploadFiles) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建上传目录</span><br><span class="line">        String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File dir &#x3D; new File(path);</span><br><span class="line">        if (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(uploadFiles.getName());</span><br><span class="line">        System.out.println(uploadFiles.getDescription());</span><br><span class="line"></span><br><span class="line">        List&lt;MultipartFile&gt; files &#x3D; uploadFiles.getUploadFiles();</span><br><span class="line">        for (MultipartFile file : files) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取上传文件名</span><br><span class="line">            String filename &#x3D; file.getOriginalFilename();</span><br><span class="line">            System.out.println(&quot;upload file: &quot; + filename);</span><br><span class="line">            &#x2F;&#x2F; 写入磁盘</span><br><span class="line">            file.transferTo(new File(dir, filename));</span><br><span class="line">            System.out.println(&quot;upload file done: &quot; + filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;upload files done&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>文件下载原理</strong>：服务端<code>response</code>对象可以获取输出流，通过输出流将文件输入流写到浏览器即可完成文件下载功能。</li></ul><p>文件下载的关键是设置以下两个头信息：</p><ol><li>设置响应文件的 MIME 类型：<code>ContentType:xxx/yyyy</code></li></ol><p><strong>注</strong>：如果想浏览器一直弹出下载对话框，可直接设置：<code>Content-Type:application/octet-stream</code>或<code>Content-Type:application/x-msdownload</code></p><ol start="2"><li>设置文件下载名称：<code>Content-Disposition:attachement;filename=下载名称</code></li></ol><p>示例：下载一个图片文件。</p><p>具体步骤如下：</p><ol><li>假设我们要下载的图片的真实路径为<code>/WEB-INF/downloads/images/</code>：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-6f37a2446714ecca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="downloads"></p><ol start="2"><li>由于<code>/WEB-INF</code>目录为默认安全目录，浏览器无法直接访问。因此服务器端通过一个控制器进行转发获取资源：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class DownloadController &#123;</span><br><span class="line">    @GetMapping(&quot;&#x2F;downloads&#x2F;&#123;filename:.+&#125;&quot;) &#x2F;&#x2F; .+ 表示不过滤 PathVariable 点后缀</span><br><span class="line">    public void download(HttpServletRequest request,</span><br><span class="line">                         HttpServletResponse response,</span><br><span class="line">                         @PathVariable(&quot;filename&quot;) String filename) throws IOException &#123;</span><br><span class="line">        ServletContext context &#x3D; request.getServletContext();</span><br><span class="line">        String downloadDir &#x3D; context.getRealPath(&quot;WEB-INF&#x2F;downloads&#x2F;images&#x2F;&quot;);</span><br><span class="line">        Path file &#x3D; Paths.get(downloadDir, filename);</span><br><span class="line">        System.out.println(filename + &quot; exists? &quot; + Files.exists(file));</span><br><span class="line">        if (Files.exists(file)) &#123;</span><br><span class="line">            String fileMime &#x3D; context.getMimeType(filename);</span><br><span class="line">            System.out.println(filename + &quot;:&quot; + fileMime);</span><br><span class="line">            response.setContentType(fileMime);</span><br><span class="line">            response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot; + filename);</span><br><span class="line">            Files.copy(file, response.getOutputStream());</span><br><span class="line">            response.getOutputStream().flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><strong>不拦截静态资源</strong>：在 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 中，前端控制器（DispatcherServlet）一般配置为对所有请求进行拦截，这同时包括了对静态资源（js，css，images…）的拦截，导致静态资源无法获取。因此，我们需要配置前端控制器，让其不对静态资源进行拦截，具体的配置方法有如下两种：</li></ul><ol><li>配置 default servlet，优先处理请求：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler&#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li>手动指定静态资源映射及路径，让前端控制器不进行拦截：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;static&#x2F;**&quot; location&#x3D;&quot;&#x2F;static&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;resources&#x2F;**&quot; location&#x3D;&quot;&#x2F;resources&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;images&#x2F;**&quot; location&#x3D;&quot;&#x2F;images&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;js&#x2F;**&quot; location&#x3D;&quot;&#x2F;js&#x2F;&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>JSON 支持</strong>：为控制器添加接收 JSON 参数和返回 JSON 数据。当前很多应用都采用了 Restful 请求，通讯格式基本都采用 JSON 进行数据交互，我们可以配置 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a>，让其支持 JSON 数据绑定，具体步骤如下：</li></ul><ol><li>添加 JSON 支持库，这里我们使用 <a href="https://github.com/FasterXML/jackson" target="_blank" rel="noopener">jackson</a>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;jackson.version&gt;2.9.9&lt;&#x2F;jackson.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;jackson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;jackson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure></li><li>编写后端接收 JSON 数据控制器：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">public class JsonController &#123;</span><br><span class="line"></span><br><span class="line">    static class User implements Serializable &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private Integer age;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Integer getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setAge(Integer age) &#123;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;User&#123;&quot; +</span><br><span class="line">                    &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                    &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                    &#39;&#125;&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;json&quot;)</span><br><span class="line">    public @ResponseBody User jsonUser(@RequestBody User user)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">       return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>前台页面使用 jQuery 发送 JSON 数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.4.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">       $(&#39;#btn&#39;).click(()&#x3D;&gt;&#123;</span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               url:&#39;user&#x2F;json&#39;,</span><br><span class="line">               type:&#39;post&#39;,</span><br><span class="line">               contentType:&#39;application&#x2F;json;charset&#x3D;utf-8&#39;,</span><br><span class="line">               data:&#39;&#123;&quot;name&quot;:&quot;Whyn&quot;,&quot;age&quot;:10&#125;&#39;,</span><br><span class="line">               success:function(data)&#123;</span><br><span class="line">                   alert(data);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>解决中文乱码</strong>：请求体和响应体都可能携带中文：</li></ul><ol><li>请求携带中文：<br>1）对于 Get 请求，在 Tomcat 8 以后，统一采用 UTF-8 格式接收请求，此时就无须进行编码转换了（前提：网页编码使用的是 UTF-8）。<br>2）对于 Post 请求，参数位于请求体，如果请求头<code>Content-Type</code>没有指定请求体编码方式，那么 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 默认使用 <em>ISO-8859-1</em> 进行处理，那么对于客户端发送的 utf-8 数据，则会产生乱码。<br>解决方案：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 为我们提供了一个编码过滤器，可以通过设置该编码过滤器让 web 容器使用 utf-8 编码解析请求参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- web.xml --&gt;</span><br><span class="line">&lt;!-- 解决中文乱码过滤器 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;forceEncoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure></li><li>对于响应：使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestBody.html" target="_blank" rel="noopener">@RequestBody</a> 返回字符串响应时，<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 默认使用 <em>ISO-8859-1</em> 格式进行编码，因此客户端接收到数据后，使用 utf-8 格式进行解码，此时就会出现乱码。<br>解决方案：配置 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 响应使用 utf-8 编码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ApplicationContext.xml --&gt;</span><br><span class="line">&lt;!-- 开启SpringMVC注解  --&gt;</span><br><span class="line">&lt;mvc:annotation-driven &gt;</span><br><span class="line">    &lt;!-- 消息转换器 --&gt;</span><br><span class="line">    &lt;mvc:message-converters register-defaults&#x3D;&quot;true&quot;&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;supportedMediaTypes&quot;&gt;</span><br><span class="line">                &lt;list&gt;</span><br><span class="line">                    &lt;value&gt;text&#x2F;plain;charset&#x3D;UTF-8&lt;&#x2F;value&gt;</span><br><span class="line">                    &lt;value&gt;text&#x2F;html;charset&#x3D;UTF-8&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;&#x2F;list&gt;</span><br><span class="line">            &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;mvc:message-converters&gt;</span><br><span class="line">&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://crowhawk.github.io/2017/04/10/SpringMVC_1/" target="_blank" rel="noopener">SpringMVC学习笔记(1)——SpringMVC介绍</a></li><li><a href="http://cxis.me/2017/04/06/SpringMVC执行流程及源码解析/" target="_blank" rel="noopener">SpringMVC执行流程及源码解析</a></li><li><a href="https://my.oschina.net/zhangxufeng/blog/2222434" target="_blank" rel="noopener">Spring MVC之@ControllerAdvice详解</a></li><li><a href="https://blog.csdn.net/lplife/article/details/79593316" target="_blank" rel="noopener">POST和GET请求参数编码方式详细处理</a></li></ul><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/post/2020/02/09/SpringBoot/</url>
    <content><![CDATA[<!-- build time:Tue Feb 11 2020 02:20:22 GMT+0800 (China Standard Time) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当前 Java 领域主流的 Web 应用开发框架是 <strong>SSM</strong>，即 Spring+SpringMVC+MyBatis。</p><p>Spring 的核心功能是 IOC 和 AOP，大量的其他框架组件借助这两个功能很好地集成到了 Spring Framework 中，简化了代码的开发难度。然而，其基于配置的开发模式，不同的框架有不同的设计理念，导致对每一个框架，都有不同的配置选项，随着项目规模的不断扩大，第三方框架的不断集成，最终配置文件逐渐冗余与复杂，导致“配置地狱”。</p><p>代码编写与文件配置是两种不同的思维方法，Spring 简化了代码编写，却又带来了文件配置方面的时间损耗，再加上复杂的依赖管理等问题，Java Web 开发逐渐变得不是那么顺畅。</p><p>Java 的一个生命力体现就在于它每每都能在某个关键时期迸发出自己的活力，无论是 PC互联网的 Spring 大家族，还是移动互联网的 Android，甚至于当前大数据时代下，Java 还是拥有一席之地···</p><p>因此对于上述 Spring 开发企业级 JavaEE 出现的问题，Java 又再一次展现出勃勃生机，新的框架应运而生 - <strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a></strong>。</p><h2 id="Spring-Boot-简介"><a href="#Spring-Boot-简介" class="headerlink" title="Spring Boot 简介"></a><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 简介</h2><blockquote><p><strong>BUILD ANYTHING WITH SPRING BOOT</strong></p><p>Spring Boot is the starting point for building all Spring-based applications. Spring Boot is designed to get you up and running as quickly as possible, with minimal upfront configuration of Spring.</p></blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 是用于构建基于 Spring 应用的起点。<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的设计理念是 <strong>约定优于配置</strong>，以最小的配置让应用尽可能快的运行起来。</p><ul><li><strong>约定优于配置（convention over configuration）</strong>：其是一种软件设计范式，通过定制一些默认约定规则，减少程序员自定义行为，简化程序开发。</li></ul><p>通过遵守约定的行为，就可以省略一些默认配置选项；<br>对于不符合约定的部分，才需要进行相关配置。</p><p>比如：</p><ul><li>我们约定 Controller 层就是 Web 请求层，那么就可以省略 SpringMVC 的配置；</li><li>我们约定以 Service 结尾的类就是业务层，我们就会对其自动注入事务，此时就可以省略 Spring 切面事务的配置。<br>···</li></ul><p><strong>约定优于配置</strong> 的设计理念在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 体系中体现的淋漓尽致，小到配置文件、中间件的默认配置，大到内置容器、生态中的各种 Starters 无不遵循此设计规则。</p><p>遵循 <strong>约定优于配置</strong> 理念，以后无论我们引入多少第三方框架库，也无须进行配置，可以直接进行业务开发，让编程变得简单。</p><h2 id="Spring-Boot-特点"><a href="#Spring-Boot-特点" class="headerlink" title="Spring Boot 特点"></a><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 特点</h2><ul><li><p>创建独立 Spring 应用</p></li><li><p>内置 Tomcat，Jetty 和 Undertow 三种 Web容器（无需发布 WAR 包）</p></li><li><p>提供内置 <strong>Starter</strong> 依赖，简化构建配置</p></li><li><p>自动配置 Spring 和 第三方库</p></li><li><p>提供测量，健康检测和外部配置等产品特性</p></li><li><p>无代码生成，无需 XML 配置</p></li><li><p><strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 不是对 Spring 功能上的增强，而是提供了一种快速使用 Spring 的方式</strong></p></li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>例子：编写一个 Web 应用，要求浏览器访问<code>localhost:8080/hello</code>，输出<code>Hello Spring Boot!</code>。</p><p>具体步骤如下：</p><ol><li>创建一个 Maven 普通 Java 工程：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-f90548059407d33c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Java Project"></p><ol start="2"><li>添加 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 项目起步依赖：<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent" target="_blank" rel="noopener">spring-boot-starter-parent</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Spring Boot所有项目都要继承起步依赖：spring-boot-starter-parent --&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure></li><li>我们需要 Web 功能，因此需要添加一个提供 Web 功能的起步依赖：<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web" target="_blank" rel="noopener">spring-boot-starter-web</a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 Web 功能起步依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 引导类：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication &#x2F;&#x2F; 声明当前类是 Sprig Boot 的一个引导类</span><br><span class="line">public class SpringBootApp &#123;</span><br><span class="line">    public static void main(String[] agrs) &#123;</span><br><span class="line">        SpringApplication.run(SpringBootApp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建一个<code>Controller</code>，支持 Web 访问：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return &quot;Hello Spring Boot!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动应用，浏览器直接输入：<code>localhost:8080/hello</code>，就可以看到结果。</li></ol><p><strong>总结</strong>：根本无须任何 XML 配置。</p><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 核心功能有两个：<strong>起步依赖（Starter）</strong> 和 <strong>自动配置</strong>。</p><ul><li><strong>起步依赖（Starter）</strong>：Starter 是一种为应用添加依赖的简便描述符，具备为快速应用开发提供 “一站式服务” 的能力。本质上 Starter 是一个 Maven 项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，共同完成某一项功能。</li></ul><p>传统应用开发，我们导入第三方库时，需要拷贝粘贴该库及其关联库，还要抓取一些样本代码，但是借助于 Starter，我们只需引入该库对应 Starter 即可，由于其遵循 <strong>约定优于配置</strong>，因此很多配置都采用了默认项，一般情况下只需零配置或少量配置就可以使用组件功能。</p><p>比如，像之前我们要搭建一个 Web 工程的时候，会导入 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 相关依赖：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>也就是分别需要导入<code>spring-web</code>和<code>spring-webmvc</code>两个依赖，且版本号最好保持一致。而在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 中，只需导入一个相关 Starter：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>这里我们无需导入版本号，因为<code>spring-boot-starter-parent</code>内部已提供了常用库的默认版本依赖。</p><p>进入<code>spring-boot-starter-web</code>，可以看到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-json&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.hibernate.validator&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;6.0.17.Final&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p><code>spring-boot-starter-web</code>这个 Starter 其实内置了常用的 Web 依赖，包括：</p><ul><li><code>spring-web</code>/<code>spring-webmvc</code>：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">SpringMVC</a> 依赖包</li><li><code>spring-boot-starter-json</code>：JSON 支持库</li><li><code>spring-boot-starter-tomcat</code>：内置 Tomcat 服务器<br>……</li></ul><p>简单来说，<strong>起步依赖（Starter）</strong> 就是将具备某种功能的坐标打包到一起，并且自动处理各个坐标之间的依赖与版本匹配问题。</p><p>下面 简单分析下 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> <strong>起步依赖（Starter）</strong> 的实现原理：</p><ol><li>首先看下<code>spring-boot-starter-parent</code>内容：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project ...&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&gt;..&#x2F;..&#x2F;spring-boot-dependencies&lt;&#x2F;relativePath&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;resource.delimiter&gt;@&lt;&#x2F;resource.delimiter&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;$&#123;java.version&#125;&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;$&#123;java.version&#125;&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;basedir&#125;&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;application*.yml&lt;&#x2F;include&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;application*.yaml&lt;&#x2F;include&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;application*.properties&lt;&#x2F;include&gt;</span><br><span class="line">                &lt;&#x2F;includes&gt;</span><br><span class="line">            &lt;&#x2F;resource&gt;</span><br><span class="line">            ...</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><code>spring-boot-starter-parent</code>该 Starter 主要三方面内容：<br>1）对 Java 版本，源码编译版本，源码编码等进行设置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;resource.delimiter&gt;@&lt;&#x2F;resource.delimiter&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;$&#123;java.version&#125;&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;$&#123;java.version&#125;&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>2）引入自定义配置文件：<code>resources/application*.yml</code>/<code>resources/application*.yaml</code>/<code>resources/application*.properties</code>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;resource&gt;</span><br><span class="line">    &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">    &lt;directory&gt;$&#123;basedir&#125;&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">    &lt;includes&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.yml&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.yaml&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.properties&lt;&#x2F;include&gt;</span><br><span class="line">    &lt;&#x2F;includes&gt;</span><br><span class="line">&lt;&#x2F;resource&gt;</span><br></pre></td></tr></table></figure>开发人员可通过自定义配置文件覆盖 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的默认配置。</li></ol><p>3）<code>spring-boot-starter-parent</code>继承起步依赖：<code>spring-boot-dependencies</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&gt;..&#x2F;..&#x2F;spring-boot-dependencies&lt;&#x2F;relativePath&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure><p>我们进入<code>spring-boot-dependencies</code>，可以看到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;!-- 版本控制 --&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;aspectj.version&gt;1.9.4&lt;&#x2F;aspectj.version&gt;</span><br><span class="line">    &lt;dom4j.version&gt;1.6.1&lt;&#x2F;dom4j.version&gt;</span><br><span class="line">    &lt;elasticsearch.version&gt;6.4.3&lt;&#x2F;elasticsearch.version&gt;</span><br><span class="line">    &lt;jackson.version&gt;2.9.9&lt;&#x2F;jackson.version&gt;</span><br><span class="line">    &lt;junit.version&gt;4.12&lt;&#x2F;junit.version&gt;</span><br><span class="line">    &lt;mysql.version&gt;8.0.17&lt;&#x2F;mysql.version&gt;</span><br><span class="line">    &lt;netty.version&gt;4.1.38.Final&lt;&#x2F;netty.version&gt;</span><br><span class="line">    &lt;slf4j.version&gt;1.7.26&lt;&#x2F;slf4j.version&gt;</span><br><span class="line">    &lt;spring.version&gt;5.1.9.RELEASE&lt;&#x2F;spring.version&gt;</span><br><span class="line">    &lt;spring-framework.version&gt;$&#123;spring.version&#125;&lt;&#x2F;spring-framework.version&gt;</span><br><span class="line">    &lt;spring-security.version&gt;5.1.6.RELEASE&lt;&#x2F;spring-security.version&gt;</span><br><span class="line">    &lt;thymeleaf.version&gt;3.0.11.RELEASE&lt;&#x2F;thymeleaf.version&gt;</span><br><span class="line">    &lt;tomcat.version&gt;9.0.22&lt;&#x2F;tomcat.version&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line">  &lt;!-- 依赖管理 --&gt;</span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-autoconfigure&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;junit.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.fasterxml.jackson&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jackson-bom&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;jackson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j-to-slf4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;log4j2.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat-annotations-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;tomcat.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">          &lt;exclusion&gt;</span><br><span class="line">            &lt;artifactId&gt;protobuf-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.protobuf&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;&#x2F;exclusion&gt;</span><br><span class="line">        &lt;&#x2F;exclusions&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;aspectj.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      ...</span><br><span class="line">      &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p><code>spring-boot-dependencies</code>内置了许多常用库的版本（<code>&lt;properties&gt;</code>）与依赖管理（<code>&lt;dependencyManagement&gt;</code>）。当我们在自己的项目中引入了第三方库时，如果此时<code>spring-boot-dependencies</code>已经内置了该库（根据<code>groupId</code>和<code>artifactId</code>进行匹配），那么就会加载该库并使用内置定义的版本及其配置。这也是为什么我们前面说有些 Starter 无须引入版本号的原因，因为<code>spring-boot-dependencies</code>已经为我们配置了兼容当前版本<code>spring-boot-starter-parent</code>的所有依赖版本。</p><p><strong>Starter</strong> 是 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的一大特色，在项目启动的时候，根据约定信息对组件进行加载，初始化，达到 ”开箱即用“ 的效果</p><p><strong>Starter</strong> 的效用已深入人心，不仅 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 官方提供了大量的 Starter，其他的开源框架也都主动提供了相应的 Starter 组件，比如 MyBatis···。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 现在如此受欢迎的原因之一，就在于其提供了大量的 Starter，依赖如此丰富且功能强大，却又支持 “开箱即用” 的模块，可以让软件开发人员更加专注与高效地进行业务开发。</p><ul><li><strong>自动配置</strong>：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 提供了一些满足日常开发常用库的默认配置类，在应用程序启动时，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 会反射加载对应库的默认配置类到 Spring 容器中，完成默认配置。</li></ul><p><strong>自动配置</strong> 的实现原理如下所示：</p><ol><li>在快速入门案例中，我们知道需要使用注解<code>@SpringBootApplication</code>来标记一个 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的启动引导类，因此我们首先看下<code>@SpringBootApplication</code>源码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@SpringBootConfiguration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(</span><br><span class="line">    excludeFilters &#x3D; &#123;@Filter(</span><br><span class="line">    type &#x3D; FilterType.CUSTOM,</span><br><span class="line">    classes &#x3D; &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), @Filter(</span><br><span class="line">    type &#x3D; FilterType.CUSTOM,</span><br><span class="line">    classes &#x3D; &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line">public @interface SpringBootApplication &#123;</span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; ComponentScan.class,</span><br><span class="line">        attribute &#x3D; &quot;basePackages&quot;</span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; ComponentScan.class,</span><br><span class="line">        attribute &#x3D; &quot;basePackageClasses&quot;</span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>可以看到，<code>@SpringBootApplication</code>其实是一个组合注解，相当于<code>@SpringBootConfiguration</code>+<code>@ComponentScan</code>+<code>@EnableAutoConfiguration</code>，其中：<br>1）<strong><code>@SpringBootConfiguration</code></strong>：其实就是注解<code>@Configuration</code>，即 Spring 的一个配置类，相当于 XML 配置的<code>&lt;beans&gt;</code>，其源码如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Configuration</span><br><span class="line">public @interface SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2）<strong><code>@ComponentScan</code></strong>：该注解会扫描当前类的包及其子包的所有类。因此，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 在启动时，就会自动扫描启动引导类所在的包及其子包，把被<code>@Configuration</code>/<code>@Controller</code>等注解注解的类配置到 Spring 容器中。</li></ol><p>3）<strong><code>@EnableAutoConfiguration</code></strong>：见名知意，该注解就是用于使能自动配置功能，我们看下该注解源码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY &#x3D; &quot;spring.boot.enableautoconfiguration&quot;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中看到，该注解导入了一个配置类：<code>AutoConfigurationImportSelector（自动配置导入选择器）</code>，那我们看下该配置类源码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;</span><br><span class="line">    public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        ...</span><br><span class="line">        AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry &#x3D; this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        ...</span><br><span class="line">        List&lt;String&gt; configurations &#x3D; this.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">        List&lt;String&gt; configurations &#x3D; SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</span><br><span class="line">        Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF&#x2F;spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">        return configurations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">        return EnableAutoConfiguration.class;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类中方法<code>getAutoConfigurationEntry</code>用于获取自动配置入口，其内部调用了方法<code>getCandidateConfigurations</code>，用于获取可选的默认配置项。<br>从<code>getCandidateConfigurations</code>内部注释中可以看到，其自动配置类位于<code>META-INF/spring.factories</code>文件中，我们来看下<code>SpringFactoriesLoader.loadFactoryNames</code>源码，看下是否正确：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class SpringFactoriesLoader &#123;</span><br><span class="line">    ...</span><br><span class="line">    public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) &#123;</span><br><span class="line">        &#x2F;&#x2F; 即 EnableAutoConfiguration</span><br><span class="line">        String factoryClassName &#x3D; factoryClass.getName(); </span><br><span class="line">        return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line">        ...</span><br><span class="line">        Enumeration&lt;URL&gt; urls &#x3D; classLoader !&#x3D; null ? classLoader.getResources(&quot;META-INF&#x2F;spring.factories&quot;) : ClassLoader.getSystemResources(&quot;META-INF&#x2F;spring.factories&quot;);</span><br><span class="line">        while(urls.hasMoreElements()) &#123;</span><br><span class="line">            Properties properties &#x3D; PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SpringFactoriesLoader.loadFactoryNames</code>的第一个参数为<code>EnableAutoConfiguration.class</code>，然后该方法会调用<code>SpringFactoriesLoader.loadSpringFactories</code>方法，<code>loadSpringFactories</code>内部会加载<code>META-INF/spring.factories</code>文件，把配置文件内容封装成<code>Properties</code>对象，最终封装到一个<code>Map</code>中，组后将<code>META-INF/spring.factories</code>文件中<code>key</code>为<code>EnableAutoConfiguration</code>的所有值取出（<code>getOrDefault</code>），这些值其实就是 <strong>自动配置类的全限定名</strong>。</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-5a346d9cefa8bc2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>接下来我们看下<code>META-INF/spring.factories</code>的文件内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 内置了许多我们常用的自动配置类，比如<code>aop</code>，<code>web</code>，<code>elasticsearch</code>等等，这些类的命名遵循一定规则：<code>xxxAutoConfiguration</code>，即末尾都为<code>AutoConfiguration</code>。</p><p>到此，我们就知道了，在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 启动时，就会加载<code>META-INF/spring.factories</code>文件信息，筛选出<code>key</code>为<code>EnableAutoConfiguration</code>的自动配置类全限定名，然后反射创建类实现自动配置。</p><p>接下来我们来分析下自动配置类的默认配置过程，此处随便选择一个自动配置类，比如：<code>ServletWebServerFactoryAutoConfiguration</code>，查看下其源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedTomcat</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedJetty</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedUndertow</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>@EnableConfigurationProperties(ServerProperties.class)</code>表示加载配置属性类<code>ServerProperties</code>，查看下<code>ServerProperties</code>源码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;server&quot;, ignoreUnknownFields &#x3D; true)</span><br><span class="line">public class ServerProperties &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * Server HTTP port.</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	private Integer port;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * Network address to which the server should bind.</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	private InetAddress address;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解<code>@ConfigurationProperties</code>支持 Spring 元数据，被<code>@ConfigurationProperties</code>注解的节点对象在被创建时，其成员变量会从外部配置文件（<code>application*.yml</code>/<code>application*.yaml</code>/<code>application*.properties</code>）中获取对应值并进行设置。</p><p>因此，对于<code>ServerProperties</code>来说，在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 进行加载时，如果有外部配置文件设置了<code>server.port</code>，则其成员变量<code>port</code>会自动被赋值；如果没有进行设置，则使用默认值，默认值位于类<code>Tomcat</code>中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.apache.catalina.startup;</span><br><span class="line"></span><br><span class="line">public class Tomcat &#123;</span><br><span class="line">    ...</span><br><span class="line">    protected int port &#x3D; 8080;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，便是 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 的自动配置全过程。</p><h2 id="Spring-Boot-配置文件"><a href="#Spring-Boot-配置文件" class="headerlink" title="Spring Boot 配置文件"></a><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 配置文件</h2><p>前面我们提过，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 是基于约定的，因此有很多的配置项都有默认值（具体配置项默认值请查看：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">common-application-properties</a>）。</p><p>如果我们想修改默认配置，那么可以通过在<code>resources</code>目录下创建配置文件：<code>application*.yml</code>/<code>application*.yaml</code>/<code>application*.properties</code>，在其中覆写配置项即可。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 支持 properties 和 YML格式的配置文件：</p><ul><li><strong>properties</strong>：就是键值对，比较简单直接。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># application.properties</span><br><span class="line">server.port&#x3D;8081</span><br></pre></td></tr></table></figure></li><li><strong>YML</strong>：YML 文件格式是 YAML（YAML Aint Markup Language）编写的文件格式，YAML 是一种直观的能够被电脑识别的的数据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，比如： C/C++，Ruby，Python，Java，Perl，C#，PHP 等。YML 文件是 <strong>以数据为核心</strong> 的，比传统的 xml 方式更加简洁。</li><li><em>注*</em>：YML 文件的扩展名可以使用<code>.yml</code>或者<code>.yaml</code>。</li></ul><p><strong>注</strong>：前面 <strong>起步依赖（Starter）</strong>中有提及，<code>spring-boot-starter-parent</code>里面配置了外部配置文件的加载顺序：<strong><code>application*.yml</code> &gt; <code>application*.yaml</code> &gt; <code>application*.properties</code></strong>，越晚加载则优先级越高，即<code>application*.properties</code>的配置会覆盖<code>.yaml</code>/<code>.yml</code>配置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;resource&gt;</span><br><span class="line">    &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">    &lt;directory&gt;$&#123;basedir&#125;&#x2F;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">    &lt;includes&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.yml&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.yaml&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;include&gt;**&#x2F;application*.properties&lt;&#x2F;include&gt;</span><br><span class="line">    &lt;&#x2F;includes&gt;</span><br><span class="line">&lt;&#x2F;resource&gt;</span><br></pre></td></tr></table></figure><p>下面对 YML 文件配置语法进行简单介绍：</p><ul><li><strong>配置普通键值对数据</strong></li></ul><p>语法：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Whyn</span></span><br></pre></td></tr></table></figure><ul><li><strong>配置对象数据</strong></li></ul><p>语法：YML 配置对象语法有两种格式：</p><ol><li>缩进配置（推荐）<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">object:</span></span><br><span class="line">  <span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line">  <span class="attr">key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure></li><li>行内对象配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">object:</span> <span class="string">&#123;key1:</span> <span class="string">value1,key2:</span> <span class="string">value2&#125;</span></span><br></pre></td></tr></table></figure>示例：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缩进配置</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Whyn</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">shenzhen</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行内对象配置</span></span><br><span class="line"><span class="attr">user2:</span> <span class="string">&#123;name:</span> <span class="string">Whyn,age:</span> <span class="number">10</span><span class="string">,addr:</span> <span class="string">shenzhen&#125;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>配置复杂/集合类型数据</strong></li></ul><p>语法：YML 配置复杂/集合类型数据语法有两种格式：</p><ol><li>缩进配置（推荐）<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">array:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure></li><li>行内配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">array:</span> <span class="string">[value1,value2]</span></span><br></pre></td></tr></table></figure></li></ol><p>示例：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缩进配置</span></span><br><span class="line"><span class="comment"># 集合元素为普通字符串</span></span><br><span class="line"><span class="attr">city:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">guangzhou</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shenzhen</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合元素为对象</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Whyn1</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">shenzhen</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Whyn2</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">11</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行内配置</span></span><br><span class="line"><span class="attr">city1:</span> <span class="string">[beijing,shanghai,guangzhou,shenzhen]</span></span><br><span class="line"><span class="attr">users1:</span> <span class="string">[&#123;name:</span> <span class="string">Whyn1,age:</span> <span class="number">10</span><span class="string">,addr:</span> <span class="string">shenzhen&#125;,&#123;name:</span> <span class="string">Whyn2,age:</span> <span class="number">11</span><span class="string">,addr:</span> <span class="string">beijing&#125;]</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：YML 配置文件中，冒号<code>:</code>和横杠<code>-</code>后面若带值，必须在其后带一个空格。<br>建议在 YML 文件中，凡是遇到冒号<code>:</code>和横杠<code>-</code>就在其后加一个空格。</p><h2 id="Spring-Boot-集成其他框架"><a href="#Spring-Boot-集成其他框架" class="headerlink" title="Spring Boot 集成其他框架"></a><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 集成其他框架</h2><p>前面说过，很多第三方库都提供了相应的 Starter，这为 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 集成该框架带来了极大便利性。</p><p>下面我们主要介绍两个集成案例，其他框架的集成与之类似。</p><ul><li><strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 集成 JUnit</strong>：具体步骤如下：</li></ul><ol><li>导入 JUnit 的起步依赖（Starter）：<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test" target="_blank" rel="noopener">spring-boot-starter-test</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>下面就可以编写 Spring 的测试程序：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes &#x3D; SpringBootApp.class) &#x2F;&#x2F; 引导类</span><br><span class="line">public class HelloControllerTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private HelloController controller;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void hello() &#123;</span><br><span class="line">        assertNotNull(this.controller);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 集成 MyBatis</strong>：具体步骤如下：</li></ul><ol><li>导入 MyBatis 的 起步依赖（Starter）：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter" target="_blank" rel="noopener">mybatis-spring-boot-starter</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>导入数据库连接驱动：<a href="https://mvnrepository.com/artifact/MySQL/mysql-connector-java" target="_blank" rel="noopener">mysql-connector-java</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>创建一张<code>users</code>表：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table if not exists users (</span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(20) not null,</span><br><span class="line">    -&gt; age int not null,</span><br><span class="line">    -&gt; address varchar(30));</span><br></pre></td></tr></table></figure></li><li>创建<code>users</code>表对应 POJO 类：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address &#x3D; address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &quot;, address&#x3D;&#39;&quot; + address + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建<code>users</code>表操作接口：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface IUserDao &#123;</span><br><span class="line">    &#x2F;&#x2F; 增：添加用户</span><br><span class="line">    void add(User user);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 删：删除用户</span><br><span class="line">    void delete(String name);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 改：更改信息</span><br><span class="line">    void update(User user);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 查：查询所有</span><br><span class="line">    List&lt;User&gt; selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>resources</code>目录下创建表的映射配置文件：<code>mapper/UserMapper.xml</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.dao.IUserDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id&#x3D;&quot;add&quot; parameterType&#x3D;&quot;com.yn.entity.User&quot;&gt;</span><br><span class="line">        insert into users(name,age,address) values(#&#123;name&#125;,#&#123;age&#125;,#&#123;address&#125;)</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id&#x3D;&quot;delete&quot; parameterType&#x3D;&quot;String&quot;&gt;</span><br><span class="line">        delete from users where name&#x3D;#&#123;name&#125;</span><br><span class="line">    &lt;&#x2F;delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id&#x3D;&quot;update&quot; parameterType&#x3D;&quot;com.yn.entity.User&quot;&gt;</span><br><span class="line">        update users set age&#x3D;#&#123;age&#125;,address&#x3D;#&#123;address&#125; where name&#x3D;#&#123;name&#125;</span><br><span class="line">    &lt;&#x2F;update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectAll&quot; resultType&#x3D;&quot;com.yn.entity.User&quot;&gt;</span><br><span class="line">        select * from users</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure></li><li>在<code>resources/application.properties</code>中配置数据库相关信息 和 MyBatis 相关信息：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数据库连接信息</span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?serverTimezone&#x3D;UTC&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;true</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;password</span><br><span class="line"># 配置 MyBatis 信息</span><br><span class="line"># Spring 集成 MyBatis环境</span><br><span class="line"># POJO 别名扫描包</span><br><span class="line">mybatis.type-aliases-package&#x3D;com.yn.entity</span><br><span class="line"># 加载 MyBatis 映射文件</span><br><span class="line">mybatis.mapper-locations&#x3D;classpath:mapper&#x2F;*Mapper.xml</span><br></pre></td></tr></table></figure><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 会自动加载<code>spring.datasource.*</code>相关配置，数据源就会自动注入到<code>SqlSessionFactory</code>中，<code>SqlSessionFactory</code>会自动注入到<code>Mapper</code>中，我们什么都不用管，直接使用就行。</li><li>到上面其实已经配置完成了，这里我们可以编写测试用例进行检测：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes &#x3D; SpringBootApp.class)</span><br><span class="line">public class IUserDaoTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void add() &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setName(&quot;Whyn01&quot;);</span><br><span class="line">        user.setAge(10);</span><br><span class="line">        user.setAddress(&quot;深圳&quot;);</span><br><span class="line">        this.userDao.add(user);</span><br><span class="line"></span><br><span class="line">        user &#x3D; new User();</span><br><span class="line">        user.setName(&quot;Whyn02&quot;);</span><br><span class="line">        user.setAge(12);</span><br><span class="line">        user.setAddress(&quot;北京&quot;);</span><br><span class="line">        this.userDao.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        this.userDao.delete(&quot;Whyn02&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setName(&quot;Whyn01&quot;);</span><br><span class="line">        user.setAge(12);</span><br><span class="line">        user.setAddress(&quot;上海&quot;);</span><br><span class="line">        this.userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void selectAll() &#123;</span><br><span class="line">        List&lt;User&gt; users &#x3D; this.userDao.selectAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其他</li></ol><hr><ul><li><strong><del><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 支持热部署</del></strong>：热部署在修改代码后，<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener">Spring Boot</a> 可以自动进行编译并启动，达到实时更新效果。具体配置步骤如下：</li></ul><ol><li>导入热部署起步依赖（Starter）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>对于 IDEA，还需进行以下设置：<br>1）打开自动编译：<em>File - Settings - Compiler<em>，勾选：</em>Build project automatically</em><br>2）开启 IDEA 的自动编译（动态）：快捷键 <em>Ctrl+Shift+Alt+/<em>，选择 *Registry</em>，勾选：*compiler.automake.allow.when.app.running</em></li><li>重新运行程序，热部署即可启动。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://gitbook.cn/gitchat/column/5b86228ce15aa17d68b5b55a/topic/5b93c957780fdb5e97d2f35c" target="_blank" rel="noopener">Spring Boot 产生的背景和它的设计理念</a></li><li><a href="https://blog.csdn.net/u014745069/article/details/83820511" target="_blank" rel="noopener">Spring Boot面试杀手锏————自动配置原理</a></li><li><a href="https://segmentfault.com/a/1190000018011535" target="_blank" rel="noopener">SpringBoot自动配置原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/53294876" target="_blank" rel="noopener">Spring Boot 配置文件</a></li></ul><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/post/2020/02/09/Spring/</url>
    <content><![CDATA[<!-- build time:Tue Feb 11 2020 02:20:22 GMT+0800 (China Standard Time) --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先明确一下概念：</p><ul><li><p><strong>Spring</strong>：指 Spring Framework 以及基于 Spring Framework 上构建的<a href="https://spring.io/projects" target="_blank" rel="noopener">项目</a>的集合。简而言之，Spring 是一个大集合，它由许多基于 Spring Framework 构建的开源框架和组件组成。</p></li><li><p><strong><a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">Spring Framework</a></strong>：中文称为 <em>Spring框架</em>，是 Spring 里面的一个开源框架，提供了很多模块与组件，方便快速进行 JavaEE 企业级应用开发。</p></li></ul><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/overview.html#overview-spring" target="_blank" rel="noopener">注</a></strong>：现实生活中，我们一般讲到 Spring，一般就是指代 Spring Framework。因此，下文中所有出现 Spring 位置的地方，均指 Spring Framework，请知悉。</p><h2 id="Spring-架构体系（5-0）"><a href="#Spring-架构体系（5-0）" class="headerlink" title="Spring 架构体系（5.0）"></a><a href="https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#overview" target="_blank" rel="noopener">Spring 架构体系（5.0）</a></h2><p><img src="https://upload-images.jianshu.io/upload_images/2222997-c57fa2d581efc4bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Spring Framework Runtime"></p><p>Spring框架是一个分层架构，从总体来看，Spring 分为3层，最底层是核心层，包括 IOC、AOP 等核心模块，中间层是封装的 JavaEE 服务、作为中间的驱动组件，最上层是各个应用。</p><p>组成 Spring框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p><ul><li><strong>核心容器（Core Conatiner）</strong>：Spring 核心容器是 Spring框架中最重要的模块，其主要提供了 Spring 基础功能之一的 IOC 功能，其他层次的模块必须构建于核心容器之上。</li></ul><p>核心容器由 spring-core、spring-beans、spring-context、spring-context-support 和 spring-expression 模块组成：</p><p>核心容器中 spring-core、spring-beans 提供了框架的基本功能，包括控制反转（IOC），其主要组件是 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a>，借助复杂工厂模式的实现，将配置和特定的依赖从实际程序逻辑中解耦。</p><p>context 模块建立在 core 和 beans 模块的基础上，增加了对国际化的支持、事件广播、资源加载和创建上下文，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 是 context 模块的重点。</p><p>spring-context-support 提供对常见第三方库的支持，集成到 Spring上下文中，比如缓存(ehcache,guava)、通信(javamail)、调度(commonj,quartz)、模板引擎等(freemarker,velocity)。</p><p>spring-expression 模块提供了一个强大的表达式语言用来在运行时查询和操作对象图，这种语言支持对属性值、属性参数、方法调用、数组内容存储、集合和索引、逻辑和算数操作及命名变量，并且通过名称从spring的控制反转容器中取回对象。</p><ul><li><p><strong>面向切面编程（AOP）</strong>：spring-aop 模块为 Spring框架提供了面向切面的编程实现，spring-aspects 模块提供了aspectj 的集成与使用。</p></li><li><p><strong>服务器工具（Instrumentation）</strong>：spring-instrument 提供一些类级的工具支持和 ClassLoader 级的实现，用于服务器。spring-instrument-tomcat 针对 tomcat 的 instrument 实现。</p></li><li><p><strong>消息组件（Messaging）</strong>：Spring框架4 包含了 spring-messaging 模块，从 Spring 集成项目中抽象出来，比如 Messge、MessageChannel、MessageHandler 及其他用来提供基于消息的基础服务。</p></li><li><p><strong>数据访问/集成（Data Access/Integration）</strong>：数据访问和集成层主要作为持久层的解决方案，其由 JDBC、ORM、OXM、JMS 和事务模块组成。</p></li><li><p><strong>网络（Web）</strong>：Web层由 spring-web、spirng-webmvc、spring-websocket 和 spring-webmvc-portlet 模块组成。</p></li></ul><p>spring-web 模块提供了基本的面向 Web 开发的集成功能，例如多文件上传、使用 servert listeners 和 Web 开发应用程序上下文初始化 IOC 容器。也包含 HTTP 客户端以及 Spring 远程访问的支持的 Web 相关部分。</p><p>spring-webmvc 包含 Spring 的 model-view-controller 和 REST web services 实现的 Web 应用程序。</p><ul><li><strong>测试（Test）</strong>：<a href="https://mvnrepository.com/artifact/org.springframework/spring-test/5.1.9.RELEASE" target="_blank" rel="noopener">spring-test</a> 模块支持通过组合 Junit 或 TestNG 来进行单元测试和集成测试，提供了连续的加载 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 并且缓存这些上下文。</li></ul><h2 id="Spring-优势"><a href="#Spring-优势" class="headerlink" title="Spring 优势"></a>Spring 优势</h2><ul><li><p><strong>方便解耦，简化开发</strong>：通过 Spring 提供的 IOC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。</p></li><li><p><strong>低侵入 / 低耦合</strong>：降低组件之间的耦合度，实现软件各层之间的解耦</p></li><li><p><strong>AOP 编程支持</strong>：通过 Spring 的 AOP 功能，为程序增加了面向切面的编程方式，从另一个维度上进行编程，可以解决传统 OOP 上难以优雅实现的一些辅助功能编程。</p></li><li><p><strong>声明式事务的支持</strong>：通过声明式方式（即配置文件方式）灵活的进行事务的管理，可以优雅解决之前单调繁琐的事务管理代码。</p></li><li><p><strong>方便程序的测试</strong>：可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作而是随手可做的事情。</p></li><li><p><strong>方便集成各种优秀第三方框架</strong>：Spring 可以降低各种框架的使用难度，提供了对各种优秀框架（SpringMVC，MyBatis等）的直接支持。</p></li></ul><h2 id="控制反转（IOC）和-依赖注入（DI）"><a href="#控制反转（IOC）和-依赖注入（DI）" class="headerlink" title="控制反转（IOC）和 依赖注入（DI）"></a>控制反转（IOC）和 依赖注入（DI）</h2><p>以 OOP 的思想进行代码编写时，基本上我们都会创建多个类，类与类之间存在协作关系，共同完成某个功能。</p><p>比如，假设现在我想喝绿茶，那我们就会自己去泡杯绿茶，如下代码所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 自己泡杯绿茶</span><br><span class="line">        Tea tea &#x3D; new GreenTea();</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void drink(Tea tea) &#123;</span><br><span class="line">        System.out.println(tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private interface Tea &#123;</span><br><span class="line">        String flavor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class GreenTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Green Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是现在我突然想喝红茶了（业务需求更改），那我们就把绿茶去掉，改为红茶：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 自己泡杯红茶</span><br><span class="line">        Tea tea &#x3D; new RedTea();</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    private static class RedTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Red Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里其实就可以看出，如果我们自己（<code>Me</code>）动手创建依赖类（<code>GreenTea</code>/<code>RedTea</code>），每次当业务需求更改时，我们都要手动更改业务代码，两者之间的正向依赖耦合太重。</p><p>其实一个更好的方法就是我们自己不去泡茶，而是直接向饮品店（第三方）进行购买，想买啥口味的直接更饮品店说即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 向饮品店直接购买茶</span><br><span class="line">        Tea tea &#x3D; DrinkShop.makeTea(&quot;Red Tea&quot;);</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    public static class DrinkShop &#123;</span><br><span class="line">        public static Tea makeTea(String flavor) &#123;</span><br><span class="line">            Tea tea &#x3D; null;</span><br><span class="line">            switch (flavor) &#123;</span><br><span class="line">                case &quot;Red Tea&quot;:</span><br><span class="line">                    tea &#x3D; new RedTea();</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;Green Tea&quot;:</span><br><span class="line">                    tea &#x3D; new GreenTea();</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            return tea;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过一个第三方类<code>DrinkShop</code>就解耦了客户<code>Me</code>与具体饮品<code>GreenTea</code>/<code>RedTea</code>的耦合了。这其实就是工厂模式的应用，也是 IOC 的一个简单实现。</p><ul><li><p><strong>IOC（Inversion of Control）</strong>：即 <strong>控制反转</strong>，IOC 不是一种具体的技术，而是一种设计思想。指的是将程序原本的依赖对象创建交由第三方进行管理控制，程序直接向第三方获取所需依赖对象即可。</p></li><li><p><strong>依赖正控</strong>：类间存在依赖关系时，通常直接在依赖类内直接<code>new</code>一个被依赖类，如上文在<code>Me</code>中直接创建：<code>new GreenTea()</code>/<code>new RedTea()</code>。自己需要某个对象，就自己进行创建，这种行为即称为 <strong>依赖正控</strong>。</p></li><li><p><strong>依赖反控</strong>：类间存在依赖关系时，依赖类直接向一个第三方管理容器获取所需依赖类即可。如上文<code>Me</code>想喝茶，直接向<code>DrinkShop</code>获取茶即可。依赖类对象的创建交由第三方容器进行管理，这种方式称为 <strong>依赖反控</strong>。</p></li></ul><p>对于上文示例来说，<code>Me</code>从刚开始的自己动手泡茶<code>new GreenTea()</code>/<code>new ReaTea()</code>，到最后通过饮品店<code>DrinkShop</code>获取茶<code>DrinkShop.makeTea</code>，最后这个过程就是<code>Me</code>的控制被反转了（更具体来说，是<code>Me</code>获取依赖对象的过程被反转了）。</p><ul><li><strong>DI（Dependency Injection）</strong>：即 <strong>依赖注入</strong>。类间存在依赖关系时，使用依赖类<code>Me</code>之前，必须向注入被依赖类<code>Tea</code>。依赖注入的方法可以通过构造函数注入或者<code>setter</code>函数注入：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line">    private Tea tea;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 构造函数注入依赖</span><br><span class="line">        Me me &#x3D; new Me(new GreenTea());</span><br><span class="line">        me.drink();</span><br><span class="line"></span><br><span class="line">        me &#x3D; new Me();</span><br><span class="line">        &#x2F;&#x2F; setter注入依赖</span><br><span class="line">        me.setTea(new RedTea());</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Me()&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Me(Tea tea)&#123;</span><br><span class="line">        this.tea &#x3D; tea;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setTea(Tea tea)&#123;</span><br><span class="line">        this.tea &#x3D; tea;</span><br><span class="line">    &#125;</span><br><span class="line">    public void drink()&#123;</span><br><span class="line">        System.out.println(this.tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>IOC</strong> 和 <strong>DI</strong> 其实是对同一概念的不同描述，两者都是为了解决类间耦合，但 <strong>IOC</strong> 关注的是由第三方容器管理被依赖类，强调的是控制反转，而 <strong>DI</strong> 关注的是被依赖类如何注入到依赖类，强调的是注入。</li></ul><p><strong>DI</strong> 其实可以借助 <strong>IOC容器</strong> 进行依赖注入：<strong>IOC容器</strong> 先进行依赖查找，再进行依赖注入。</p><p>不严格情况下，通常我们将 <strong>DI</strong> 等同于 <strong>IOC</strong>。</p><h2 id="Spring-中使用-IOC"><a href="#Spring-中使用-IOC" class="headerlink" title="Spring 中使用 IOC"></a>Spring 中使用 IOC</h2><p>这里使用 Spring IOC 复写上文示例代码，具体步骤如下：</p><ol><li>首先创建一个 Maven 普通 Java 项目，然后添加 <a href="https://mvnrepository.com/artifact/org.springframework/spring-context" target="_blank" rel="noopener">spring-context</a> 依赖：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><a href="https://mvnrepository.com/artifact/org.springframework/spring-context" target="_blank" rel="noopener">spring-context</a> 内部包含了 Spring框架核心容器的所有功能，如下图所示：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-1aebf19bbfcc7a1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="spring-context"></p><ol start="2"><li>在<code>resources</code>资源目录下，创建配置文件<code>bean.xml</code>，并注入被依赖对象：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置 bean 类，交由 Spring IOC容器进行管理 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;redTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$RedTea&quot; &#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li><li>源码获取 IOC容器管理对象，并获取依赖对象：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建Spring框架核心容器对象，并加载配置文件</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        &#x2F;&#x2F; 获取 bean 对象</span><br><span class="line">        Tea tea &#x3D; ac.getBean(&quot;greenTea&quot;, Tea.class);</span><br><span class="line">        Me.drink(tea);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取 bean 对象</span><br><span class="line">        tea &#x3D; ac.getBean(&quot;redTea&quot;, Tea.class);</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void drink(Tea tea) &#123;</span><br><span class="line">        System.out.println(tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private interface Tea &#123;</span><br><span class="line">        String flavor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class RedTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Red Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class GreenTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Green Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Spring框架中-IOC-相关常用-api-讲解"><a href="#Spring框架中-IOC-相关常用-api-讲解" class="headerlink" title="Spring框架中 IOC 相关常用 api 讲解"></a>Spring框架中 IOC 相关常用 api 讲解</h2><ul><li><strong>Spring IOC 容器</strong><br>Spring IOC 容器的设计主要涉及到以下两个接口：<br>1）<strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a></strong>：Spring IOC 容器的访问根接口。其提供的访问接口有：<br><img src="https://upload-images.jianshu.io/upload_images/2222997-181f14d5d0707408.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BeanFactory"></li></ul><p>可以看到，通过 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a> 接口我们就可以对 Spring IOC 容器进行对象获取等操作。</p><p>&ensp;&ensp; 2）<strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a></strong>：为应用提供配置的中央接口。通常在应用程序运行时，该接口只允许读操作，但在某些操作实现允许情况下，支持重载操作。</p><p>先看下 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 的继承体系：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-ab7efbe3ca289284.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ApplicationContext"></p><p>可以看到 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 继承了很多了接口，其中就包括 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a>，因此，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 也具备访问 Spring IOC 容器的功能。具体来说，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 支持以下操作：</p><ul><li>提供 Bean 工厂访问应用组件接口方法，从 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/ListableBeanFactory.html" target="_blank" rel="noopener">ListableBeanFactory</a> 继承而来的。</li><li>具备以通用方式加载资源的能力，从 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/core/io/ResourceLoader.html" target="_blank" rel="noopener">ResourceLoader</a> 接口继承而来的。</li><li>具备事件广播能力，从 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationEventPublisher.html" target="_blank" rel="noopener" title="interface in org.springframework.context">ApplicationEventPublisher</a> 继承而来的。</li><li>具备消息处理，支持国际化操作，从 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/MessageSource.html" target="_blank" rel="noopener">MessageSource</a> 接口继承而来。</li><li>支持多态，子类上下文对象的配置会优先于父类对象。比如，一个父类上下文对象可以在整个 web 应用中使用，但每个 Servlet 可以拥有彼此独立的上下文对象。</li></ul><p><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 是一个功能十分强大的接口，在实际项目中，绝大部分场景下都使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 访问 Spring IOC 容器。</p><p><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 是一个接口，因此它必然有自己的实现类来提供具体操作，我们来看下 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 的子类实现体系：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-f97ddf1b9b2a85ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ApplicationContext子类"></p><p><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 有很多实现类，这里我们着重讲述以下 3 个实现类：</p><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html" target="_blank" rel="noopener">ClassPathXmlApplicationContext</a></strong>：独立的 XML 应用上下文对象，它可以加载类路径下的配置文件。</li><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html" target="_blank" rel="noopener">FileSystemXmlApplicationContext</a></strong>：独立的 XML 应用上下文对象，可以加载磁盘任意路径或 URL 指向的配置文件。</li><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener">AnnotationConfigApplicationContext</a></strong>：独立的应用上下文对象，支持从注解中读取配置。它支持的注解有：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a>，被<code>javax.inject</code>注解的 JSR-330 兼容类。支持 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html#register-java.lang.Class...-" target="_blank" rel="noopener">@register</a> 注解的类，支持扫描 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html#scan-java.lang.String...-" target="_blank" rel="noopener">@scan</a> 注解指定类路径下所有的类。</li></ul><p>通常如果使用 XML 配置 IOC 容器，则一般使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html" target="_blank" rel="noopener">ClassPathXmlApplicationContext</a>；<br>如果使用注解配置 IOC 容器，则使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener">AnnotationConfigApplicationContext</a>。</p><p><strong>注</strong>：默认情况下，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a> 加载配置文件创建 IOC 容器时，使用的是延迟加载模式，也即只有在获取 bean 对象（<code>getBean</code>）时，才会反射创建对应 bean 对象；而 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a> 在加载配置文件创建 IOC 容器时，采用的是立即加载模式，也即扫描到标签<code>&lt;bean&gt;</code>后，就立即反射创建该 bean 对象。<br>无论是 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">BeanFactory</a> 还是 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a>，均可以直接在配置文件中指定加载模式（<code>lazy-init</code>）覆盖默认加载。</p><h2 id="Spring-IOC-容器管理-bean-对象方式"><a href="#Spring-IOC-容器管理-bean-对象方式" class="headerlink" title="Spring IOC 容器管理 bean 对象方式"></a>Spring IOC 容器管理 bean 对象方式</h2><p>Spring IOC 容器管理 bean 对象可以大致分为如下几种类型：</p><ul><li><strong>创建 bean 对象</strong>：使用 XML 配置文件创建 bean 对象时，有如下两种配置方式：</li></ul><ol><li><strong>构建 bean 对象</strong>：可使用如下几种方法配置进行构建 bean 对象：</li></ol><p>&ensp;&ensp; 1）使用默认构造函数配置创建 bean 对象：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;redTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$RedTea&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 2）获取对象方法返回的对象，并存入 Spring IOC 容器：<code>factory-bean</code>指定工厂类 bean 对象，<code>factory-method</code>指定工厂类对象方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        Tea tea &#x3D; ac.getBean(&quot;greenTea&quot;, Tea.class);</span><br><span class="line">        Me.drink(tea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 工厂类</span><br><span class="line">    public static class DrinkShop&#123;</span><br><span class="line">        public Tea makeGreenTea()&#123;</span><br><span class="line">            return new GreenTea();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 创建工厂类 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;teaFactory&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$DrinkShop&quot; &#x2F;&gt;</span><br><span class="line">&lt;!-- 指定工厂类对象方法 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; factory-bean&#x3D;&quot;teaFactory&quot; factory-method&#x3D;&quot;makeGreenTea&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 3）获取静态方法返回的对象，并存入 Spring IOC 容器：<code>class</code>指定工厂类，<code>factory-method</code>指定工厂类静态方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 工厂类</span><br><span class="line">public static class DrinkShop&#123;</span><br><span class="line">	&#x2F;&#x2F; 静态方法</span><br><span class="line">	public static Tea makeGreenTea()&#123;</span><br><span class="line">		return new GreenTea();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 指定工厂类静态方法 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$DrinkShop&quot; factory-method&#x3D;&quot;makeGreenTea&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>通常当要创建库提供的一个很复杂的对象时，在 XML 中配置可能相对繁琐，则此时可以采用第2和第3条创建对象的方式，直接在代码中构建复杂对象，再在配置文件中配置从方法获取对象即可。</p><ol start="2"><li><strong>构建 bean 对象并进行依赖注入</strong>：可使用如下几种方法进行配置：</li></ol><p>&ensp;&ensp; 1）<strong>注入数据类型</strong>：构建 bean 对象，并注入基本数据类型或<code>String</code>：<code>value</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.yn.entity.User&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;10&quot; &#x2F;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;Roy&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 2）<strong>注入数据类型</strong>：构建 bean 对象，并注入 bean 类型对象：<code>ref</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;me&quot; class&#x3D;&quot;com.yn.spring.ioc.Me&quot;&gt;</span><br><span class="line">    &lt;!-- 构造函数注入 --&gt;</span><br><span class="line">    &lt;constructor-arg name&#x3D;&quot;tea&quot; ref&#x3D;&quot;greenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 3）<strong>注入数据类型</strong>：构建 bean 对象，并注入复杂/集合类型对象：<code>array</code>，<code>list</code>，<code>set</code>，<code>map</code>，<code>props</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ComplexObject &#123;</span><br><span class="line">    private String[] arrays;</span><br><span class="line">    private List&lt;String&gt; lists;</span><br><span class="line">    private Set&lt;String&gt; sets;</span><br><span class="line">    private Map&lt;String, String&gt; maps;</span><br><span class="line">    private Properties properties;</span><br><span class="line"></span><br><span class="line">    public void setArrays(String[] arrays) &#123;</span><br><span class="line">        this.arrays &#x3D; arrays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLists(List&lt;String&gt; lists) &#123;</span><br><span class="line">        this.lists &#x3D; lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSets(Set&lt;String&gt; sets) &#123;</span><br><span class="line">        this.sets &#x3D; sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMaps(Map&lt;String, String&gt; maps) &#123;</span><br><span class="line">        this.maps &#x3D; maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProperties(Properties properties) &#123;</span><br><span class="line">        this.properties &#x3D; properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return String.format(&quot;%s\n%s\n%s\n%s\n%s&quot;,</span><br><span class="line">                Arrays.toString(this.arrays),</span><br><span class="line">                this.lists,</span><br><span class="line">                this.sets,</span><br><span class="line">                this.maps,</span><br><span class="line">                this.properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;complexObj&quot; class&#x3D;&quot;com.yn.entity.ComplexObject&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;arrays&quot;&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;value&gt;AAA&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;BBB&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;CCC&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;array&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;lists&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;AAA&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;BBB&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;CCC&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;list&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;sets&quot;&gt;</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;value&gt;AAA&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;BBB&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;CCC&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;set&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;maps&quot;&gt;</span><br><span class="line">        &lt;map&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;aaa&quot; value&#x3D;&quot;AAA&quot; &#x2F;&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;bbb&quot;&gt;</span><br><span class="line">                &lt;value&gt;BBB&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;&#x2F;entry&gt;</span><br><span class="line">        &lt;&#x2F;map&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;properties&quot;&gt;</span><br><span class="line">        &lt;props&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;aaa&quot;&gt;AAA&lt;&#x2F;prop&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;bbb&quot;&gt;BBB&lt;&#x2F;prop&gt;</span><br><span class="line">        &lt;&#x2F;props&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 4）<strong>依赖注入</strong>：使用构造函数配置创建 bean 对象：<code>constructor-arg</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;me&quot; class&#x3D;&quot;com.yn.spring.ioc.Me&quot;&gt;</span><br><span class="line">    &lt;!-- 构造函数注入 --&gt;</span><br><span class="line">	&lt;constructor-arg name&#x3D;&quot;tea&quot; ref&#x3D;&quot;greenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 5）<strong>依赖注入</strong>：通过<code>setter</code>函数进行配置：<code>property</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;greenTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;me&quot; class&#x3D;&quot;com.yn.spring.ioc.Me&quot;&gt;</span><br><span class="line">    &lt;!-- setter函数注入 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;tea&quot; ref&#x3D;&quot;greenTea&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp; 6）<strong>依赖注入</strong>：自动注入<code>autowire</code>，配置了<code>autowire</code>的 bean 对象，Spring IOC 容器会自动查找符合需求的依赖注入到 bean 对象中。<code>autowire</code>有如下几个选项可供配置：<br><strong><code>no</code></strong>：不进行自动注入，该值为默认值；<br><strong><code>byName</code></strong>：根据属性名称自动进行注入；<br><strong><code>byType</code></strong>：根据属性类型自动进行注入（要求：IOC 容器不能存在两个相同类型的 bean 对象）；<br><strong><code>constructor</code></strong>：根据构造函数参数类型自动进行注入，与<code>byType</code>类似。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Me &#123;</span><br><span class="line">    private Tea tea;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        Me me &#x3D; ac.getBean(&quot;me&quot;, Me.class);</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTea(Tea tea) &#123;</span><br><span class="line">        this.tea &#x3D; tea;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;me&quot; class&#x3D;&quot;com.yn.spring.ioc.Me&quot; autowire&#x3D;&quot;byType&quot; &#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;tea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$GreenTea&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>控制 bean 对象的作用域</strong>：默认情况下，Spring IOC 容器对配置文件中的 bean 对象都保存为单例对象，因此根据名称从 IOC 容器中获取对象，均为同一对象。可以在配置文件中使用<code>scope</code>属性配置 bean 对象的作用域：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;redTea&quot; class&#x3D;&quot;com.yn.spring.ioc.Me$RedTea&quot; scope&#x3D;&quot;singleton&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><code>scope</code>属性其值有如下几个选项：</p></li><li><p><em><code>singleton</code>*</em>：全局单例模式，该选项为默认值；</p></li><li><p><em><code>prototype</code>*</em>：原型模式，也即多例模式，每次<code>getBean</code>时，重新创建一个 bean 对象；</p></li><li><p><em><code>request</code>*</em>：作用于 Web 应用的请求范围；</p></li><li><p><em><code>session</code>*</em>：作用于 Web 应用的会话范围；</p></li><li><p><em><code>global-session</code>*</em>：作用于集群环境的会话范围（全局会话范围），若处于非集群环境时，该选项等同于<code>session</code>；</p></li><li><p><strong>bean 对象的生命周期</strong>：对于不同的<code>scope</code>，bean 对象具有不同的生命周期。<br>1）当<code>scope=&quot;singleton&quot;</code>时，也即默认情况下，bean 对象的生命周期与 Spring IOC 容器一致：当加载配置文件创建 IOC 容器时，bean 对象也会被加载并执行初始化函数<code>init-method</code>，当 IOC 容器关闭时，bean 对象就会执行销毁函数<code>destroy-method</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建 IOC 容器并加载配置文件</span><br><span class="line">        ClassPathXmlApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        &#x2F;&#x2F; 获取 bean 对象</span><br><span class="line">        User user &#x3D; context.getBean(&quot;user&quot;, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        &#x2F;&#x2F; 关闭 IOC 容器，调用 bean 对象销毁方法</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init() &#123;</span><br><span class="line">        System.out.println(&quot;invoke init method&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        System.out.println(&quot;invoke destroy method&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean name&#x3D;&quot;user&quot; class&#x3D;&quot;com.yn.entity.User&quot; init-method&#x3D;&quot;init&quot; destroy-method&#x3D;&quot;destroy&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;10&quot; &#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;Roy&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;2）当<code>scope=prototype</code>时，bean 对象只有在获取（<code>getBean</code>）的时候，进行创建并执行其初始化函数<code>init-method</code>，无论 IOC 容器关闭与否，bean 对象的销毁函数绝不会被调用，因为对于原型对象，Spring IOC 容器只负责反射创建，但不进行维护。</p></li></ul><h2 id="Spring-IOC-常用注解"><a href="#Spring-IOC-常用注解" class="headerlink" title="Spring IOC 常用注解"></a>Spring IOC 常用注解</h2><p>使用 XML 配置 IOC 容器时，配置与代码的隔离十分彻底，但是当配置项较多时，XML 配置会显得臃肿并且难以维护。因此，Spring框架还为我们提供了注解配置方法。</p><p>我们将 Spring 的注解配置分为如下几类：</p><ul><li><strong>配置类</strong>：配置类相当于 XML 配置文件。其涉及的注解主要有：</li></ul><ol><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a></strong>：该注解用于定义配置类，可替换 XML 配置文件，被注解的类内部通常会包含有一个或多个被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener">@Bean</a> 注解的方法，这些方法将会被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener">AnnotationConfigApplicationContext</a> 或 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.html" target="_blank" rel="noopener">AnnotationConfigWebApplicationContext</a> 类进行扫描，并用于构建 bean 对象，初始化 Spring IOC 容器。其相当于 XML 文件配置中的<code>&lt;beans /&gt;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TestConfiguration &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 使用 AnnotationConfigApplicationContext 加载注解 @Configuration 注解的类，启动 IOC 容器</span><br><span class="line">        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(TestConfiguration.class);</span><br><span class="line">        if (context !&#x3D; null) &#123;</span><br><span class="line">            System.out.println(&quot;Spring IOC 容器初始化成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：查看 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 源码，可以看到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Component</span><br><span class="line">public @interface Configuration &#123;</span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; Component.class</span><br><span class="line">    )</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中说 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 是 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 的别名，即两者作用一致。但实际上，两者不仅概念上存在区别，在一些场合下效果可能还存在不同之处（下文有提及）。</p><ol start="2"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Import.html" target="_blank" rel="noopener">@Import</a></strong>：导入其他配置类（<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a>）。通常，存在多个配置文件时，可以在一个总配置类中使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Import.html" target="_blank" rel="noopener">@Import</a> 导入其他配置类：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; config.ConfigAll</span><br><span class="line">@Configuration &#x2F;&#x2F; 总配置类</span><br><span class="line">@Import(&#123;Config1.class,Config2.class&#125;)</span><br><span class="line">public class ConfigAll &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 加载配置类 ConfigAll.class，创建 IOC 容器并进行扫描</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(ConfigAll.class);</span><br><span class="line">        Date config1Bean &#x3D; ac.getBean(&quot;date&quot;,Date.class);</span><br><span class="line">        System.out.println(config1Bean);</span><br><span class="line">        String config2Bean &#x3D; ac.getBean(&quot;string&quot;,String.class);</span><br><span class="line">        System.out.println(config2Bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; config1.Config1</span><br><span class="line">@Configuration </span><br><span class="line">public class Config1 &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;date&quot;)</span><br><span class="line">    @Scope(&quot;prototype&quot;)</span><br><span class="line">    public Date date() &#123;</span><br><span class="line">        return new Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; config2.Config2</span><br><span class="line">&#x2F;&#x2F; @Import 时可省略 @Configuration 注解，但建议加上，表明该类是一个配置类</span><br><span class="line">&#x2F;&#x2F;@Configuration</span><br><span class="line">public class Config2 &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;string&quot;)</span><br><span class="line">    public String str()&#123;</span><br><span class="line">        return &quot;Hello Import!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：上述代码中直接使用：<code>new AnnotationConfigApplicationContext(Config1.class,Config2.class)</code>或<code>@ComponentScan(&quot;config1&quot;,&quot;config2&quot;)</code>也可以加载<code>Config1</code>和<code>Config2</code>两个配置类，但使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Import.html" target="_blank" rel="noopener">@Import</a> 组织效果会更清晰。</p><ol start="3"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/PropertySource.html" target="_blank" rel="noopener">@PropertySource</a></strong>：加载配置文件。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@PropertySource(&quot;classpath:db.properties&quot;)</span><br><span class="line">@Component(&quot;db&quot;)</span><br><span class="line">public class DbConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br><span class="line">    private String driver;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br><span class="line">    private String url;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br><span class="line">    private String username;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(DbConfig.class);</span><br><span class="line">        DbConfig db &#x3D; ac.getBean(&quot;db&quot;,DbConfig.class);</span><br><span class="line">        System.out.println(db.driver);</span><br><span class="line">        System.out.println(db.url);</span><br><span class="line">        System.out.println(db.username);</span><br><span class="line">        System.out.println(db.password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>注解扫描类</strong>：注解扫描类相当于指定 XML 配置文件路径，使用 XML 配置文件时，我们会手动传递该配置文件给到 Spring，让其加载配置。同样，使用注解配置，我们也需要手动指定相关扫描注解类给到 Spring，让其有个入口可以进行扫描配置。有如下两个注解扫描类：</li></ul><ol><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html" target="_blank" rel="noopener">@ComponentScan</a></strong>：指定需要扫描的包，Spring 会扫描该注解指定的包及其子包下的所有类，并把符合需求的类（指被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 等注解的类）创建并存放进 IOC 容器中。其相当于 XML 配置的<code>&lt;context:component-scan&gt;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan(&#123;&quot;com.yn.entity&quot;, &quot;com.yn.spring.ioc&quot;&#125;)</span><br><span class="line">public class Config&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(Config.class);</span><br><span class="line">        ...</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html" target="_blank" rel="noopener">@ComponentScan</a> 有以下属性：</li></ol><table><thead><tr><th>Modifier and Type</th><th>Element</th><th>Description</th></tr></thead><tbody><tr><td>String[]</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#basePackages--" target="_blank" rel="noopener">basePackages</a></td><td>指定需要扫描的根包</td></tr><tr><td>String[]</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#value--" target="_blank" rel="noopener"><strong>value</strong></a></td><td>等同于 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#basePackages--" target="_blank" rel="noopener">basePackages</a>,当未指定具体包名时，默认扫描被注解类所在的包及其子包</td></tr><tr><td>Class&lt;?&gt;[]</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#basePackageClasses--" target="_blank" rel="noopener">basePackageClasses</a></td><td>指定需要扫描的类所在的包及其子包，可替换 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#basePackages--" target="_blank" rel="noopener">basePackages</a></td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.Filter.html" target="_blank" rel="noopener">ComponentScan.Filter[]</a></td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#excludeFilters--" target="_blank" rel="noopener">excludeFilters</a></td><td>指定排除扫描的类型</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.Filter.html" target="_blank" rel="noopener">ComponentScan.Filter[]</a></td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#includeFilters--" target="_blank" rel="noopener">includeFilters</a></td><td>指定进行扫描的类型</td></tr><tr><td>boolean</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#lazyInit--" target="_blank" rel="noopener">lazyInit</a></td><td>指定扫描到的 bean 的加载模式</td></tr><tr><td>Class&lt;? extends <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/support/BeanNameGenerator.html" target="_blank" rel="noopener">BeanNameGenerator</a>&gt;</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#nameGenerator--" target="_blank" rel="noopener">nameGenerator</a></td><td>使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/support/BeanNameGenerator.html" target="_blank" rel="noopener">BeanNameGenerator</a> 命名 Spring容器扫描到的组件</td></tr><tr><td>String</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#resourcePattern--" target="_blank" rel="noopener">resourcePattern</a></td><td>指定要扫描的类文件匹配模式</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ScopedProxyMode.html" target="_blank" rel="noopener">ScopedProxyMode</a></td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#scopedProxy--" target="_blank" rel="noopener">scopedProxy</a></td><td>指定是否需要为扫描到的组件创建代理对象</td></tr><tr><td>Class&lt;? extends <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ScopeMetadataResolver.html" target="_blank" rel="noopener">ScopeMetadataResolver</a>&gt;</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#scopeResolver--" target="_blank" rel="noopener">scopeResolver</a></td><td>使用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ScopeMetadataResolver.html" target="_blank" rel="noopener">ScopeMetadataResolver</a> 解决组件的作用域范围</td></tr><tr><td>boolean</td><td><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html#useDefaultFilters--" target="_blank" rel="noopener">useDefaultFilters</a></td><td>指定是否使能自动扫描被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Repository.html" target="_blank" rel="noopener">@Repository</a>，<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Service.html" target="_blank" rel="noopener">@Service</a>,<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Controller.html" target="_blank" rel="noopener">@Controller</a> 注解的类</td></tr></tbody></table><ol start="2"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScans.html" target="_blank" rel="noopener">@ComponentScans</a></strong>：作为 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html" target="_blank" rel="noopener">@ComponentScan</a> 的聚合集。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ComponentScans &#123;</span><br><span class="line">    ComponentScan[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>总结</strong>：一般使用使用注解进行配置，通用模型为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration &#x2F;&#x2F; 配置 &lt;beans &#x2F;&gt;</span><br><span class="line">@ComponentScan &#x2F;&#x2F; 扫描包</span><br><span class="line">@Component     &#x2F;&#x2F; 配置 &lt;bean &#x2F;&gt;</span><br><span class="line">public class Xxxx&#123;...&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：当 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 注解的类与 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener"><code>new AnnotationConfigApplicationContext(Class&lt;?&gt; ...)</code></a> 的参数是同一个类时，此时 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 可省略，因为<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html" target="_blank" rel="noopener"><code>new AnnotationConfigApplicationContext(Class&lt;?&gt; ...)</code></a> 的时候，默认就会扫描参数类。</p><ul><li><strong>创建 bean 对象</strong>：对应 XML 配置的<code>&lt;bean&gt;</code>标签，涉及到的注解有如下几个：</li></ul><ol><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a></strong>：表示被注解的类是一个组件，Spring 扫描会把该注解的类创建并存放到 IOC 容器中。相当于 XML 配置中的<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Value(&quot;Whyn&quot;) &#x2F;&#x2F; 使用 @Value 注入简单值</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;12&quot;)</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(User.class);</span><br><span class="line">        User user &#x3D; ac.getBean(&quot;user&quot;,User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：当 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 不指定 bean 的 id 时，则默认使用当前被注解的类名，且首字母小写。<br><strong>当使用注解进行依赖注入时，无须提供<code>setter</code>函数。</strong></p><ol start="2"><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Controller.html" target="_blank" rel="noopener">@Controller</a></strong>/<strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Service.html" target="_blank" rel="noopener">@Service</a></strong>/<strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Repository.html" target="_blank" rel="noopener">@Repository</a></strong>：这三个注解的作用与 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 一摸一样，只是当作用于 MVC 架构时，可以使层次更加清晰：<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Controller.html" target="_blank" rel="noopener">@Controller</a>：一般用于表现层；<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Service.html" target="_blank" rel="noopener">@Service</a>：一般用于业务层；<br><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Repository.html" target="_blank" rel="noopener">@Repository</a>：一般用于持久层；</p></li><li><p><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener">@Bean</a></strong>：注解在方法上，Spring IOC 容器会对方法返回的 bean 对象进行管理。<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener">@Bean</a> 注解通常用于被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 或 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 注解的类中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration &#x2F;&#x2F; 配置 &lt;beans &#x2F;&gt;</span><br><span class="line">@ComponentScan &#x2F;&#x2F; 扫描包</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;date&quot;)</span><br><span class="line">    @Scope(&quot;prototype&quot;)</span><br><span class="line">    public Date getDate() &#123;</span><br><span class="line">        return new Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(User.class);</span><br><span class="line">        System.out.println(ac.getBean(&quot;date&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：建议 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener">@Bean</a> 注解在 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener">@Configuration</a> 注解的类中。如果是注解在 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 类中，可能出现与预期不符的效果，详情请查看：<a href="http://dimafeng.com/2015/08/29/spring-configuration_vs_component/" target="_blank" rel="noopener">Spring @Configuration vs @Component</a></p><ol start="4"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Conditional.html" target="_blank" rel="noopener">@Conditional</a></strong>：根据条件判断是否创建 bean 对象到 Spring IOC 容器中。该注解需要传入一个或多个实现 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Condition.html" target="_blank" rel="noopener"><code>Condition</code></a> 接口的类数组，当类数组返回<code>true</code>时，创建 bean 对象到 Spring IOC 容器中，返回<code>false</code>则不进行创建。<br>该注解可用于类和方法上，当用于类时，会对类内一系列创建 bean 对象进行判断；当用于方法时，只对该方法创建 bean 对象进行条件判断。<br>示例：以下代码用于判断当前项目环境配置了数据库连接信息时，才创建<code>DataSource</code>对象并加载到 Spring IOC 容器。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@PropertySource(value &#x3D; &#123;&quot;classpath:jdbc.properties&quot;&#125;, ignoreResourceNotFound &#x3D; true)</span><br><span class="line">@Component</span><br><span class="line">public class DbConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;dataSource&quot;)</span><br><span class="line">    @Conditional(&#123;DbConfig.DatabaseConditonal.class&#125;)</span><br><span class="line">    public DataSource getDataSource(</span><br><span class="line">            @Value(&quot;$&#123;jdbc.driver&#125;&quot;) String driver,</span><br><span class="line">            @Value(&quot;$&#123;jdbc.url&#125;&quot;) String url,</span><br><span class="line">            @Value(&quot;$&#123;jdbc.username&#125;&quot;) String username,</span><br><span class="line">            @Value(&quot;$&#123;jdbc.password&#125;&quot;) String password</span><br><span class="line">    ) &#123;</span><br><span class="line">        Properties props &#x3D; new Properties();</span><br><span class="line">        props.setProperty(&quot;driver&quot;, driver);</span><br><span class="line">        props.setProperty(&quot;url&quot;, url);</span><br><span class="line">        props.setProperty(&quot;username&quot;, username);</span><br><span class="line">        props.setProperty(&quot;passwork&quot;, password);</span><br><span class="line">        DataSource dataSource &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            dataSource &#x3D; BasicDataSourceFactory.createDataSource(props);</span><br><span class="line">        &#125; catch (</span><br><span class="line">                Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class DatabaseConditonal implements Condition &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * @param conditionContext      条件上下文</span><br><span class="line">         * @param annotatedTypeMetadata 注解类型的元数据</span><br><span class="line">         * @return true 装配 Bean，</span><br><span class="line">         * fasle 不装配 Bean</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取环境配置</span><br><span class="line">            Environment env &#x3D; conditionContext.getEnvironment();</span><br><span class="line">            &#x2F;&#x2F; 判断数据库配置信息是否存在</span><br><span class="line">            return env.containsProperty(&quot;jdbc.driver&quot;)</span><br><span class="line">                    &amp;&amp; env.containsProperty(&quot;jdbc.url&quot;)</span><br><span class="line">                    &amp;&amp; env.containsProperty(&quot;jdbc.username&quot;)</span><br><span class="line">                    &amp;&amp; env.containsProperty(&quot;jdbc.password&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(DbConfig.class);</span><br><span class="line">        System.out.println(ac.containsBean(&quot;dataSource&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Conditional.html" target="_blank" rel="noopener">@Conditional</a> 注解传入多个类时，它们之间的关系为 <strong>与</strong> 关系，只有当所有类都返回<code>true</code>时，才会加载 Bean 对象到 Spring IOC 容器中。</p><ul><li><strong>依赖注入</strong>：依赖注入可分为如下几种类型：</li></ul><ol><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Value.html" target="_blank" rel="noopener">@Value</a></strong>：用于注入基本数据类型或<code>String</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Value(&quot;Whyn&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;12&quot;)</span><br><span class="line">    private int age;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a></strong>：自动按照类型进行注入。当 Spring IOC 容器存在唯一 bean 对象匹配要注入的类型时，则注入成功。该注解可用于成员变量，构造函数，<code>setter</code>函数或者其他配置方法上。其对应于 XML 配置的<code>&lt;bean autowire=&quot;byType&quot;&gt;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line">    @Autowired &#x2F;&#x2F; 自动注入 Tea 类型</span><br><span class="line">    private Tea tea;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(Me.class);</span><br><span class="line">        Me me &#x3D; ac.getBean(&quot;me&quot;, Me.class);</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void drink() &#123;</span><br><span class="line">        System.out.println(this.tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private interface Tea &#123;</span><br><span class="line">        String flavor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Component</span><br><span class="line">    private static class RedTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Red Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>解析</strong>：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html" target="_blank" rel="noopener">@ComponentScan</a> 会扫描<code>Me</code>所在的包，扫描到被 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener">@Component</a> 注解的类有两个：<code>Me</code>和<code>RedTea</code>，则会分别进行反射创建对应 bean 对象并存放到 Spring IOC 容器中。当扫描到 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 注解时，发现其需要注入一个<code>Tea</code>类型对象，则从 Spring IOC 容器中进行查找，刚好有唯一符合的 bean 对象<code>RedTea</code>，则注入成功。</p><p><strong>注</strong>：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 的注入执行模型为：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 首先会根据 <strong>注入类型</strong> 在 Spring IOC 容器中进行依赖查找，当 Spring IOC 容器存在唯一匹配要注入类型时，则注入成功。如果 IOC 容器存在多个匹配注入类型 bean 对象，则 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 就会依据要注入对象的 <strong>名称（id）</strong>进行查找，如果找到名称相同的，则注入成功，否则，无法进行注入，程序报错。<br>比如：<code>@Autowired private Tea tea;</code>，先会依据类型<code>Tea</code>进行查找，若 IOC 容器存在多个<code>Tea</code>类型对象，则再按照名称<code>tea</code>进行查找。</p><ol start="3"><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Qualifier.html" target="_blank" rel="noopener">@Qualifier</a></strong>：在自动注入的基础上（依据类型），再按照名称（id）进行注入。该注解通常结合 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank" rel="noopener">@Autowired</a> 一起使用，其无法单独作用域类成员变量，当可单独作用于方法参数上。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired  </span><br><span class="line">    @Qualifier(&quot;greenTea&quot;) &#x2F;&#x2F; 自动注入类型为Tea，名称为greenTea的bean对象</span><br><span class="line">    private Tea tea;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(Me.class);</span><br><span class="line">        Me me &#x3D; ac.getBean(&quot;me&quot;, Me.class);</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void drink() &#123;</span><br><span class="line">        System.out.println(this.tea.flavor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private interface Tea &#123;</span><br><span class="line">        String flavor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Component(&quot;redTea&quot;)</span><br><span class="line">    private static class RedTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Red Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Component(&quot;greenTea&quot;)</span><br><span class="line">    private static class GreenTea implements Tea &#123;</span><br><span class="line"></span><br><span class="line">        public String flavor() &#123;</span><br><span class="line">            return &quot;Green Tea&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong><a href="https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html" target="_blank" rel="noopener">@Resource</a></strong>：根据名称（id）进行注入。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line"></span><br><span class="line">    @Resource(name&#x3D;&quot;greenTea&quot;)</span><br><span class="line">    private Tea tea;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：<a href="https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html" target="_blank" rel="noopener">@Resource</a> 注解属于 JavaEE api。在 Java9 的时候，JavaEE 就被标记为废弃状态，并且在 Java11 进行了移除。因此，我们需要加入相关依赖：<a href="https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api/1.3.2" target="_blank" rel="noopener">javax.annotation-api</a></p><ul><li><strong><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/Scope.html" target="_blank" rel="noopener">@Scope</a></strong>：控制 bean 对象的作用域，其默认值为<code>&quot;&quot;</code>，表示<code>singleton</code>。对应于 XML 配置的<code>&lt;bean scope=&quot;&quot;</code>&gt;`<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>bean 对象的生命周期</strong>：主要用于配置 bean 对象的初始化和销毁函数，对应于 XML 配置的<code>&lt;bean scope=&quot;singleton&quot; init-method=&quot;&quot; destroy-method=&quot;&quot;&gt;</code>，涉及的注解如下所示：</li></ul><ol><li><strong><a href="https://docs.oracle.com/javaee/7/api/javax/annotation/PostConstruct.html" target="_blank" rel="noopener">@PostConstruct</a></strong>：用于指定 bean 对象创建时执行的初始化函数。</li><li><strong><a href="https://docs.oracle.com/javaee/7/api/javax/annotation/PreDestroy.html" target="_blank" rel="noopener">@PreDestroy</a></strong>：用于指定 bean 对象销毁时执行的销毁函数。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line">    ...</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(User.class);</span><br><span class="line">        User user &#x3D; ac.getBean(&quot;user&quot;,User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        System.out.println(&quot;invoke init method&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PreDestroy</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        System.out.println(&quot;invoke destroy method&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：<a href="https://docs.oracle.com/javaee/7/api/javax/annotation/PostConstruct.html" target="_blank" rel="noopener">@PostConstruct</a> 和 <a href="https://docs.oracle.com/javaee/7/api/javax/annotation/PreDestroy.html" target="_blank" rel="noopener">@PreDestroy</a> 都属于 JavaEE api，无法使用时，则需要加入相关依赖：<a href="https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api/1.3.2" target="_blank" rel="noopener">javax.annotation-api</a></p><h2 id="XML-配置和注解配置选择方案"><a href="#XML-配置和注解配置选择方案" class="headerlink" title="XML 配置和注解配置选择方案"></a>XML 配置和注解配置选择方案</h2><p>无论是使用 XML 配置还是注解配置开发，其本质都是一样的。</p><p>通常，对于自己编写的代码，我们选择使用注解开发；对于第三方库提供的 api，我们使用 XML 配置开发。</p><p>由于使用了 XML 配置，因此 Spring IOC 容器的创建一般采用 <a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html" target="_blank" rel="noopener">ClassPathXmlApplicationContext</a>，此时要使能注解开发，就需要在 XML 文件中进行注解扫描相关配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 指定注解相关扫描类 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.yn.spring.ioc&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>具体代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component(&quot;me&quot;)</span><br><span class="line">public class Me &#123;</span><br><span class="line">    ...</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        Me me &#x3D; ac.getBean(&quot;me&quot;, Me.class);</span><br><span class="line">        me.drink();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-AOP-简介"><a href="#Spring-AOP-简介" class="headerlink" title="Spring AOP 简介"></a>Spring AOP 简介</h2><p>Spring框架提供的两个核心功能就是 IOC 和 AOP。</p><p>前面已对 IOC 进行了讲述，下面主要对 AOP 进行讲解。</p><ul><li><strong>AOP（Aspect Oriented Program）</strong>：即 <strong>面向切面编程</strong>。其作用主要在于切割关注点，分离核心功能与辅助功能，松散耦合各模块，最后在运行时把各模块“编织”到一起，实现完整功能。</li></ul><p>很久之前写过一篇介绍 AOP 的文章：<a href="https://www.jianshu.com/p/1109a4724b16" target="_blank" rel="noopener">AOP简介</a>，现在简单总结一下：</p><p>传统 OOP（Object-Oriented Programing，面向对象编程） 编程中，其思想是将事务对象化，一切皆对象，对象行为完全由自己控制。在实际编程中，对象的某个行为总是会附属带上其他一些辅助性操作（比如日志），使得行为的操作并不具备 <em>单一职责</em>，代码稍显混乱且臃肿。</p><p>而 AOP 具备“编织”代码能力，其可以将不同模块的内容在运行时很好地组织到一起，因此我们便可以将对象行为的核心功能和辅助功能进行切割，在运行时再通过 AOP 组织到一起。AOP 的出现可以让我们更加专注于模块开发，其很好地实现了各模块间的松散耦合。</p><p>简单举个例子：传统 OOP 编程中，日志打印需要嵌入到类的每个方法内部，而在 AOP 中，我们可以将日志打印当成一个辅助模块，并以声明的方式应用到需要日志的其他组件上。系统其他组件无须知道日志模块的存在，日志模块对其他组件无侵入，最后又能完整地实现 OOP 上所需的功能。</p><p>AOP 和 OOP 是两种不同的编程思想，AOP 很好地解决了 OOP 编程中存在的一些缺陷，可以说 AOP 是 OOP 的补充与完善。</p><h2 id="AOP-中的一些术语"><a href="#AOP-中的一些术语" class="headerlink" title="AOP 中的一些术语"></a>AOP 中的一些术语</h2><ul><li><p><em>Joinpoint（连接点）</em>：指程序执行时被拦截到的点（被切入代码的点），例如类中的一个方法,类中设置变量或获取变量的地方都可以视作一个Joinpoint。在 Spring 中，这些点指的是方法，因为 Spring 只支持方法的拦截。</p></li><li><p><strong><em>Pointcut（切入点）</em></strong>：指要具体进行拦截的 Joinpoint，即要被进行切入/增强的点。在 Spring 中，Pointcut 即指定要具体进行拦截/切入的方法。</p></li><li><p><strong><em>Advice（通知 /增强）</em></strong>：是 Pointcut 的执行代码，是执行“方面”的具体逻辑。通知有如下几种类型：<br>1）<strong>前置通知（before）</strong>：指 Pointcut 前切入的代码。<br>2）<strong>后置通知（after-returning）</strong>：指 Pointcut 后切入的代码。<br>3）<strong>异常通知（after-throwing）</strong>：指 Pointcut 后抛出异常处切入的代码。<br>4）<strong>最终通知（after）</strong>：指 Pointcut 后<code>finially</code>处切入的代码。<br>5）<strong>环绕通知（around）</strong>：可以手动控制代码切入时机，即环绕通知可以实现上述所讲的所有通知类型。<br>具体执行顺序如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    before;                     &#x2F;&#x2F; 前置通知</span><br><span class="line">    method.invoke(target,args); &#x2F;&#x2F; 业务方法</span><br><span class="line">    after-returning;            &#x2F;&#x2F; 后置通知</span><br><span class="line">    return;</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">    after-throwing;             &#x2F;&#x2F; 异常通知</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">    after;                      &#x2F;&#x2F; 最终通知</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>Introduction（引介）</em>：引介是一种特殊的通知，在不修改代码的前提下，引介可以在运行期为对象动态地属性和方法，从而达到修改对象结构的目的。</p></li><li><p><em>Target（目标对象）</em>：指被代理的对象。</p></li><li><p><em>Weaving（织入）</em>：指为 Target 切入增强代码的过程。Spring 采用动态代理织入，而 AspectJ 采用编译器织入和类装载期织入。</p></li><li><p><em>Proxy（代理）</em>：指 Target 被织入增强代码后生成的代理类。</p></li><li><p><strong><em>Aspect（切面）</em></strong>：指 Pointcut + Advice/Introduction，即 切面=切入点+通知/引介，也即完成切入的地方。</p></li></ul><p><strong>注</strong>：<strong>粗暴理解如下</strong>：</p><ul><li>Joinpoint（连接点）= 方法</li><li>Pointcut（切入点）= 要切入代码的方法</li><li>Advice（通知 /增强）= 切入代码的位置</li><li>Aspect（切面）= 方法（Pointcut）具体位置（Advice）被切入了代码</li></ul><h2 id="Spring-中使用-AOP"><a href="#Spring-中使用-AOP" class="headerlink" title="Spring 中使用 AOP"></a>Spring 中使用 AOP</h2><ol><li>首先导入 Sprig IOC 支持包：<a href="https://mvnrepository.com/artifact/org.springframework/spring-context" target="_blank" rel="noopener">spring-context</a>，再导入 AOP 切入点表达式解析包：<a href="https://mvnrepository.com/artifact/org.aspectj/aspectjweaver" target="_blank" rel="noopener">aspectjweaver</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>创建一个业务类，模拟真实项目的业务方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestService &#123;</span><br><span class="line">    public void doSomething()&#123;</span><br><span class="line">        System.out.println(&quot;执行业务方法!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建一个日志类，模拟日志打印功能：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class Logger &#123;</span><br><span class="line"></span><br><span class="line">    public Object printLog(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;start log: &quot; + joinPoint.getSignature().getName());</span><br><span class="line">        Object obj &#x3D; joinPoint.proceed();</span><br><span class="line">        System.out.println(&quot;end log: &quot;+joinPoint.getSignature().getName());</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件中配置业务类和日志类 bean 对象，并配置一个 AOP 切面，实现业务类注入日志功能：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置业务类 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;testService&quot; class&#x3D;&quot;com.yn.service.TestService&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 配置日志类 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;logger&quot; class&#x3D;&quot;com.yn.utils.Logger&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置AOP --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!-- 配置一个切入点：</span><br><span class="line">                id：切入点名称</span><br><span class="line">                expression：切入点表达式（执行切入的目标方法）</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;aop:pointcut id&#x3D;&quot;logPointcut&quot; expression&#x3D;&quot;execution(* com.yn.service.TestService.*(..))&quot;&#x2F;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 配置一个切面：</span><br><span class="line">                id：切面名称</span><br><span class="line">                ref：切面通知引用的对象</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;aop:aspect id&#x3D;&quot;log&quot; ref&#x3D;&quot;logger&quot;&gt;</span><br><span class="line">            &lt;!-- 配置通知和切入点 --&gt;</span><br><span class="line">            &lt;aop:around method&#x3D;&quot;printLog&quot; pointcut-ref&#x3D;&quot;logPointcut&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li><li>创建一个测试类，运行业务类方法，查看日志是否切入成功：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void doSomething() &#123;</span><br><span class="line">        ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line">        TestService service &#x3D; ac.getBean(&quot;testService&quot;, TestService.class);</span><br><span class="line">        service.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果如下：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-0eb1b33b79cfd30d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p><p><strong>注</strong>：上述例子中唯一一个需要了解的就是 <strong>切入点表示式（<code>&lt;aop:pointcut expression=&quot;表达式&quot; /&gt;</code>）</strong>。</p><p>切入点表达式的标准格式为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[访问修饰符] 返回值 包名.包名.包名...类名.方法名(参数列表)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：访问修饰符是可选的。</p><p>比如，下面就是一个标准的切入点表达式写法：其作用就是指定要拦截的方法，织入切片代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void com.yn.service.TestService.doSomething()</span><br></pre></td></tr></table></figure><p>切入点表达式支持通配符匹配，其中：</p><ul><li><strong>*</strong> ：表示匹配所有</li><li><strong>..</strong> ：表示匹配0个或多个。常用于匹配多级包名和任意参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 匹配任意包名下的 void TestService.doSomething() 方法</span><br><span class="line">void *..TestService.doSomething()</span><br><span class="line">&#x2F;&#x2F; 匹配任意包名下的任意参数列表的 void TestService.doSomething 方法</span><br><span class="line">void *..TestService.doSomething(..)</span><br></pre></td></tr></table></figure>按上述所讲的切入点表达式写法，我们甚至可以写出一个匹配任何方法的全通配符表达式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 全通配符表达式：任意返回值 任意级包 任意类.任意方法(0个或多个任意参数)</span><br><span class="line">* *..*.*(..)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-基于注解的-AOP-配置"><a href="#Spring-基于注解的-AOP-配置" class="headerlink" title="Spring 基于注解的 AOP 配置"></a>Spring 基于注解的 AOP 配置</h2><p>与 IOC 一样，Spring 同样为 AOP 提供了注解配置功能。</p><p>这里我们使用注解配置更改上面的 AOP 日志示例，具体步骤如下：</p><ol><li>修改配置文件<code>bean.xml</code>，加入注解开启配置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.yn&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置Spring开启注解 AOP 支持 --&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置业务类 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;testService&quot; class&#x3D;&quot;com.yn.service.TestService&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：开启 Spring 注解支持也可以使用注解：<a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/javadoc-api/org/springframework/context/annotation/EnableAspectJAutoProxy.html" target="_blank" rel="noopener">@EnableAspectJAutoProxy</a>，其相当于 XML 配置文件中的<code>&lt;aop:aspectj-autoproxy /&gt;</code>。</p><ol start="2"><li>修改日志类，使用 AOP 相关注解：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect &#x2F;&#x2F;表示该类是一个切面类</span><br><span class="line">public final class Logger &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义一个切入点</span><br><span class="line">    @Pointcut(&quot;execution(* com.yn.service.TestService.*(..))&quot;)</span><br><span class="line">    public void logPointcut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义一个通知，这里使用环绕通知</span><br><span class="line">    @Around(&quot;logPointcut()&quot;)</span><br><span class="line">    public Object printLog(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;start log: &quot; + joinPoint.getSignature().getName());</span><br><span class="line">        Object obj &#x3D; joinPoint.proceed();</span><br><span class="line">        System.out.println(&quot;end log: &quot; + joinPoint.getSignature().getName());</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以上，我们便使用注解完成了 AOP 配置功能。</li></ol><p><strong>注</strong>：Spring AOP 注解配置存在一个问题：在没有异常情况下，最终通知（after）会优先于后置通知（after-returning）执行，与正常执行顺序相反。因此，使用注解配置时，建议使用环绕通知（around）进行处理。</p><p>更多 AOP 注解使用方法，请查看：<a href="https://www.jianshu.com/p/e94cdbe67a84" target="_blank" rel="noopener">AspectJ之切点语法</a></p><h2 id="Spring-整合-junit"><a href="#Spring-整合-junit" class="headerlink" title="Spring 整合 junit"></a>Spring 整合 junit</h2><ol><li><code>pom.xml</code>中导入 JUnit：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">	&lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li><code>pom.xml&#39;</code>导入 <a href="https://mvnrepository.com/artifact/org.springframework/spring-test/5.1.9.RELEASE" target="_blank" rel="noopener">spring-test</a> 包：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li>使用 Spring 提供的运行器替换 JUnit 默认运行器：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br></pre></td></tr></table></figure></li><li>告知 Spring 允许器配置方式（xml 或 注解配置），并提供配置文件路径：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注解配置，配置类为 SpringConfiguration.class</span><br><span class="line">@ContextConfiguration(classes &#x3D; SpringConfiguration.class)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; XML 配置，配置文件为 bean.xml</span><br><span class="line">@ContextConfiguration(locations &#x3D; &quot;classpath:bean.xml&quot;)</span><br></pre></td></tr></table></figure></li><li>到此，就可以直接获取 Spring IOC 容器内部的 bean 对象了：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// resources/bean.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations &#x3D; &quot;classpath:bean.xml&quot;)</span><br><span class="line">public class TestSpring &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Date date;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testMerge()&#123;</span><br><span class="line">        Assert.assertNotNull(this.date);</span><br><span class="line">        System.out.println(this.date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5b012b00518825673564cbbe" target="_blank" rel="noopener">Spring技术内幕：设计理念和整体架构概述</a></li></ul><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>rg - 当前最快的文本搜索神器</title>
    <url>/post/2020/02/09/rg%20-%20%E5%BD%93%E5%89%8D%E6%9C%80%E5%BF%AB%E7%9A%84%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2%E7%A5%9E%E5%99%A8/</url>
    <content><![CDATA[<!-- build time:Tue Feb 11 2020 02:20:22 GMT+0800 (China Standard Time) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有写过一篇文本搜索工具简单使用博文：[ag - the Silver Searcher]，后来发现 [ag] 在 Windows 下搜索结果中文显示乱码，官方至今一直仍未解决。</p><p>并且现在，又出现了一款更加优秀的文本搜索神器：[rg]，稍微试了一下，速度很快，跨平台并且支持中文，很符合本人需求。</p><p>下面就简单介绍下 [rg] 及其最常用的几项选项。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>依据正则匹配递归搜索目录</p></blockquote><p>依据给定的正则表达式，rg 以面向行为单位的模式进行递归搜索。默认情况下，rg 会尊重你的<code>.gitignore</code>配置以及自动忽略隐藏文件/目录和二进制文件。</p><p>rg 具有以下一些特性：</p><ul><li>自动递归搜索目录（相当于：<code>grep -R</code>）</li><li>自动高亮匹配结果</li><li>默认自动忽略<code>.gitignore</code>指定的文件，隐藏文件和二进制文件</li><li>可以搜索指定文件类型</li><li>支持<code>grep</code>大部分常用特性</li><li>支持各种文件编译（UTF-8， UTF-16， latin-1, GBK, EUC-JP, Shift_JIS 等等）</li><li>支持搜索常见压缩文件（gzip，xz，lzma，bzip2，lz4）</li><li>不支持多行搜索和花哨的正则</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><strong>***格式：</strong></p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">USAGE:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">rg</span> [<span class="title">OPTIONS</span>] <span class="title">PATTERN</span> [<span class="title">PATH</span> ...]</span></span><br><span class="line"><span class="function">    <span class="title">rg</span> [<span class="title">OPTIONS</span>] [-<span class="title">e</span> <span class="title">PATTERN</span> ...] [-<span class="title">f</span> <span class="title">PATTERNFILE</span> ...] [<span class="title">PATH</span> ...]</span></span><br><span class="line"><span class="function">    <span class="title">rg</span> [<span class="title">OPTIONS</span>] --<span class="title">files</span> [<span class="title">PATH</span> ...]</span></span><br><span class="line"><span class="function">    <span class="title">rg</span> [<span class="title">OPTIONS</span>] --<span class="title">type</span>-<span class="title">list</span></span></span><br><span class="line"><span class="function">    <span class="title">command</span> | <span class="title">rg</span> [<span class="title">OPTIONS</span>] <span class="title">PATTERN</span></span></span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rg RxJava  // 递归搜索当前目录内含 RxJava 的文件</span><br><span class="line">rg install ReadMe.md // 在 ReadMe.txt 中搜索字符串 install</span><br></pre></td></tr></table></figure><h2 id="常用选项简介"><a href="#常用选项简介" class="headerlink" title="常用选项简介"></a>常用选项简介</h2><ul><li><em>输出选项*</em></li></ul><blockquote><p>-g, –glob<glob>…<br>Include or exclude files and directories for searching that match the given<br>glob. This always overrides any other ignore logic. Multiple glob flags may be<br>used. Globbing rules match .gitignore globs. Precede a glob with a ! to exclude<br>it.<br>正则匹配添加或排除搜索某些类型文件或目录。在<code>glob</code>之前加上一个<code>!</code>表示排除搜索。</glob></p></blockquote><p>eg：在当前目录搜索<code>require(&#39;uglifyjs-webpack-plugin&#39;)</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg -F &quot;require(&#39;uglifyjs-webpack-plugin&#39;)&quot; -g &quot;*.md&quot;  &#x2F;&#x2F; 搜索所有&#96;.md&#96;文件</span><br><span class="line">rg -F &quot;require(&#39;uglifyjs-webpack-plugin&#39;)&quot; -g &quot;!*.md&quot; &#x2F;&#x2F; 不搜索&#96;.md&#96;文件</span><br></pre></td></tr></table></figure><blockquote><p><code>--iglob &lt;GLOB&gt;</code>：同<code>-g, --glob &lt;GLOB&gt;</code>,但忽略大小写。</p></blockquote><blockquote><p>-l, –files-with-matches<br>Only print the paths with at least one match.<br>只打印匹配内容的文件名。</p></blockquote><blockquote><p><code>-v, --invert-match</code>：Invert matching. Show lines that do not match the given patterns.<br>反向匹配。</p></blockquote><blockquote><p><code>-C/--context [Lines]</code>: Show the lines surrounding a match.<br>输出匹配内容前后[ LINES ]行内容</p></blockquote><p>eg：搜索<code>require(&#39;uglifyjs-webpack-plugin&#39;)</code>，输出该行前后各2行内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg -C 2 &quot;require\(&#39;uglifyjs-webpack-plugin&#39;\)&quot; &#x2F;&#x2F; 括号需要转义</span><br></pre></td></tr></table></figure><blockquote><p><code>-F, --fixed-strings</code>: Treat the pattern as a literal string instead of a regular expression.<br>When this flag is used, special regular expression meta characters such as <code>.(){}*+</code><br>do not need to be escaped.<br>将匹配字符作为字符串，而不是正则表达式。也就是匹配字符<code>.(){}*+</code>无须进行转义。</p></blockquote><p>eg：搜索<code>require(&#39;uglifyjs-webpack-plugin&#39;)</code>，输出该行前后各2行内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg -C 2 -F &quot;require(&#39;uglifyjs-webpack-plugin&#39;)&quot; .&#x2F;   &#x2F;&#x2F; 括号无须转义</span><br></pre></td></tr></table></figure><blockquote><p><code>--max-depth &lt;NUM&gt;</code>: Limit the depth of directory traversal to NUM levels beyond the paths given. A<br>value of zero only searches the explicitly given paths themselves.</p></blockquote><pre><code>For example, &apos;rg --max-depth 0 dir/&apos; is a no-op because dir/ will not be
descended into. &apos;rg --max-depth 1 dir/&apos; will search only the direct children of
&apos;dir&apos;.</code></pre><p>限制文件夹递归搜索深度。<code>rg --max-depth 0 dir/</code>则不执行任何搜索；<code>rg --max-depth 1 dir/</code>只在<code>dir/</code>当前目录中进行搜索。</p><blockquote><p><code>-M/--max-columns</code>: Limit the length of lines printed by ripgrep.<br>限制输出最大行数。</p></blockquote><blockquote><p><code>--files</code>: Print the files that ripgrep would search, but don’t actually search them.<br>打印会进行查找的文件，该选项并不会执行实际查询操作。格式：<code>rg [OPTIONS] --files [PATH ...]</code>,此处不能加<code>pattern</code>。i</p></blockquote><p>eg：打印当前文件会进行查找的文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg --files . &#x2F;&#x2F; 列出当前文件夹会进行查询的所有文件</span><br></pre></td></tr></table></figure><p><strong>注</strong>：该选项其实可相当于：<code>find . -type f</code>，查找当前目录所有文件</p><blockquote><p><code>-c/--count</code>: Report a count of total matched lines.<br>计算匹配文件数量</p></blockquote><blockquote><p><code>--debug</code>: Shows ripgrep’s debug output. This is useful for understanding why a particular file might be ignored from search, or what kinds of configuration ripgrep is loading from the environment.<br>显示调试信息。有利于了解某一个具体文件被忽略的原因，或者 rg 从环境变量中加载了什么配置。</p></blockquote><ul><li><em>输入选项*</em></li></ul><blockquote><p><code>-e, --regexp &lt;PATTERN&gt;</code>: A pattern to search for. This option can be provided multiple times, where<br>all patterns given are searched. Lines matching at least one of the provided<br>patterns are printed. This flag can also be used when searching for patterns<br>that start with a dash.</p></blockquote><pre><code>For example, to search for the literal &apos;-foo&apos;, you can use this flag:

    rg -e -foo

You can also use the special &apos;--&apos; delimiter to indicate that no more flags
will be provided. Namely, the following is equivalent to the above:

    rg -- -foo</code></pre><p>使用正则搜索。</p><p><strong>注</strong>：rg 本身就支持正则表达式，<code>-e</code>主要用于匹配前缀带<code>-</code>的字符串 或者 想匹配多个字符串（多次使用该选项即可）。</p><p>eg：搜索内容包含<code>startXXXend</code>的字符串：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rg -e &quot;start.*end&quot; .  &#x2F;&#x2F; 这样，&#96;startXXXend&#96;，&#96;XXXstartendXXX&#96;，&#96;XXXstartXXXend&#96;，&#96;XXXstartXXXendXXX&#96;都会匹配</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">&gt;&#96;-i&#x2F;--ignore-case&#96;: When searching for a pattern, ignore case differences. That is &#96;rg -i fast&#96; matches &#96;fast&#96;, &#96;fASt&#96;, &#96;FAST&#96;, etc.</span><br><span class="line">忽略大小写</span><br><span class="line"></span><br><span class="line">&gt;&#96;-S&#x2F;--smart-case&#96;: This is similar to &#96;--ignore-case&#96;, but disables itself if the pattern contains any uppercase letters. Usually this flag is put into alias or a config file.</span><br><span class="line">打开智能大小写，通常该选项相当于&#96;--ignore-case&#96;,但在输入大写时，则取消忽略大小写功能。</span><br><span class="line"></span><br><span class="line">&gt;&#96;-w&#x2F;--word-regexp&#96;: Require that all matches of the pattern be surrounded by word boundaries. That is, given &#96;pattern&#96;, the &#96;--word-regexp&#96; flag will cause ripgrep to behave as if &#96;pattern&#96; were actually &#96;\b(?:pattern)\b&#96;.</span><br><span class="line">打开单词边界，只进行单词匹配。</span><br><span class="line"></span><br><span class="line">&gt;&#96;-a&#x2F;--text&#96;: Search binary files as if they were plain text.</span><br><span class="line">搜索二进制文件（将二进制文件看出文本文件）</span><br><span class="line"></span><br><span class="line">&gt;&#96;--hidden&#96;:Search hidden files and directories. By default, hidden files and directories</span><br><span class="line">    are skipped. Note that if a hidden file or a directory is whitelisted in an</span><br><span class="line">    ignore file, then it will be searched even if this flag isn&#39;t provided.</span><br><span class="line">搜索隐藏文件。默认不搜索隐藏文件，如果隐藏文件处于配置白名单中，则会进行搜索，无须显示提供该选项。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他</span><br><span class="line">-------------</span><br><span class="line">* *****自动过滤********：前面说过，rg 在递归搜索时，会自动过滤&#96;.gitignore&#96;匹配规则，忽略隐藏文件和目录，忽略二进制文件和链接。</span><br><span class="line">但所有这些过滤都可以通过各自指定标记进行消除：</span><br><span class="line">1）&#96;--no-ignore&#x2F;-u&#96;：不响应&#96;.gitignore&#96;的匹配规则</span><br><span class="line">2）&#96;--hidden&#x2F;-uu&#96;：搜索隐藏文件和目录</span><br><span class="line">3）&#96;-a&#x2F;--text&#x2F;-uuu&#96;：搜索二进制文件</span><br><span class="line">4）&#96;-L&#x2F;--folow&#96;：追踪链接文件</span><br><span class="line"></span><br><span class="line">* **手动过滤:globs（&#96;-g, --glob&#96;）**：手动过滤会议于&#96;.gitignore&#96;·一样的模式被j解析，也就是，位于后面的 glob 会替换前面的 glob。</span><br><span class="line">举个例子：&#96;rg clap -g &quot;*.toml&quot; -g &quot;!*.toml&quot;&#96;，其实相当于：&#96;rg clap -g &quot;!*.toml&quot;&#96;，也就是不会搜索&#96;.toml&#96;文件了。</span><br><span class="line"></span><br><span class="line">* **手动过滤：文件类型（&#96;-g, --glob&#96;）**：使用上述 **globs** 模式其实就能实现文件类型的过滤了，但每次都写&#96;-g &quot;*.xxx&quot;&#96;太繁琐了，为此，rg 已为我们内置了另一个直接支持文件类型的选项：&#96;-t&#x2F;--type&#96;。</span><br><span class="line">举个例子：</span><br></pre></td></tr></table></figure><p>rg “fn run” –type rust // 文件类型：rust<br>rg “fn run” –trust // 文件类型：rust，更简洁<br>rg “int main” -tc // 文件类型：C，包含<code>.c</code>和<code>.h</code>文件，相当于：rg “int main” -g “*.{c,h}”</p><p>rg clap –type-not rust // 排序 rust 文件<br>rg clap -Trust // 排序 rust 文件,更简洁</p><pre><code>*****注**：即`-t`包含文件类型，`-T`排除文件类型。
文件类型可通过：`rg --type-list`进行查看。














参考
------------
* [User Guide]

* [最快的文本搜索神器ripgrep -- grep的最好代替者]






[ripgrep]:https://github.com/BurntSushi/ripgrep

[ag - the Silver Searcher]:https://www.jianshu.com/p/a6a373636894

[ag]:https://github.com/ggreer/the_silver_searcher


[最快的文本搜索神器ripgrep -- grep的最好代替者]:https://segmentfault.com/a/1190000016170184

[User Guide]:https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md</code></pre><!-- rebuild by neat -->]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>rg</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/post/2020/02/09/redis/</url>
    <content><![CDATA[<!-- build time:Tue Feb 11 2020 02:20:22 GMT+0800 (China Standard Time) --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, Streams, HyperLogLogs, Bitmaps.</p></blockquote><ul><li><strong><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a></strong>：全称为：Remote Dictionary Server，是一个使用 ANSI C 编写的基于 Key-Value 数据模型的高性能 NoSql 数据库。</li></ul><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 通常被用作为数据结构服务器，我们可以通过 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 客户端（<em>redis-cli<em>）使用一些命令操作 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 服务器（</em>redis-server<em>），</em>redis-cli</em> 和 <em>redis-server</em> 之间通过 Socket 进行通信，因此不同的进程都可以使用同样的方式对同一个数据进行查询和修改。</p><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 最大的特点是：基于内存操作的 NoSql 数据库，<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 默认将数据存储在内存中，因此具备高效的数据操作性能。但同时，<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 也具备持久化功能，可以将内存中的数据持久化到磁盘，下次启动时，可以再次加载并进行使用。</p><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 的数据存储模型为 <strong>键值对</strong>，但其提供了较丰富的值存储类型：字符串（String），列表（List），哈希（Hash），集合（Set），有序集合（zset），HyperLogLogs，Bitmaps···</p><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 实现的数据结构有一些特殊的属性：</p><ul><li><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 关注持久化功能，即使数据始终都在服务器内存中进行操作，也会在某个时刻被持久化到磁盘中。这表明 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 不仅性能高，而且具备非易失性。</li><li>数据结构的实现强调内存效率，<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 内部使用的数据结构相对于其他高级语言实现的相同数据结构，内存占用更少。</li><li><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 提供了数据库常见的一些特性，比如复制，持久化调节，集群，高可用性。</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 优点：</p><ul><li><strong>性能极高</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 读取的速度是 110000次/s,写入的速度是 81000次/s 。</li><li><strong>丰富的数据类型</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 不仅仅支持简单的 Key-Value 类型的数据，同时还提供 List，Hash，Set，zset 等数据结构的存储。</li><li><strong>原子性</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 是单线程工作模型，因此其所有单个操作都是原子性的。对于多个操作，也可以通过相应指令配置成事务进行原子性操作。</li><li><strong>丰富的特性</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 还支持 publish/subscribe, 通知, key 过期等特性。</li><li><strong>支持主从复制数据备份</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 支持数据的备份，即 master-slave 模式的数据备份。</li></ul><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 缺点：</p><ul><li><strong>内存占用过高</strong>：由于 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 是将所有数据都存储于内存中，因此其内存占用非常高。</li><li><strong>持久化效率低</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 提供了两种方式实现持久化：<br>1）<strong>定时快照（RDB））</strong>：在指定的时间间隔对内存中整个数据库进行快照存储，持久化到一个 dump.rdb 文件中。由于每次都是写全部数据，会产生大量 I/O 操作，因此效率特别低，代价非常高。<br>2）<strong>日志追加（AOF）</strong>：以日志形式记录所有对服务器的写入/删除操作，当服务器重启时，重新执行这些命令来恢复原始数据。由于 AOF 采用文件追加的方式进行记录，每次的写命令都会记录到单独的日志文件中，最终会导致日志文件过大，且恢复速度慢。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 官方只提供 Linux 版本，因此，对于Windows 版本，需要采用其他方法进行安装。</p><ul><li><strong>Windows平台安装</strong>：具体方法请参考：<a href="https://blog.csdn.net/daydream13580130043/article/details/90734895" target="_blank" rel="noopener">redis在window10上的几种安装方式</a>。这里我选择使用 docker 进行安装，既方便又可以始终选择最新版本。具体步骤如下：</li></ul><ol><li>win10 系统开启虚拟化：<em>任务管理器（ctrl+alt+delete）- Performance - 查看 Virtualization</em>。如果虚拟化未启用（disable），那么需要重启电脑进入 bios 开启虚拟化。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-9a4f38cb1a6625ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Virtualization"></p><ol start="2"><li>启用 Windows 系统自带的虚拟机平台 Hyper-v：<em>控制面板 - Programs - Programs and Features - Turn Windows features on or off - 勾选上 Hyper-V - 重启系统</em>。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-9a08b9c0c2d7e7d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Hyper-v"></p><ol start="3"><li>下载安装 <a href="https://hub.docker.com/?overlay=onboarding" target="_blank" rel="noopener">docker</a>，安装完成后最好更改下镜像源：<em>docker Settings - deamon - Register mirrors</em>，填入<code>https://registry.docker-cn.com</code>。</li></ol><p><strong>注</strong>：控制台输入<code>docker --version</code>，查看 docker 是否安装成功。<br>控制台输入<code>docker info</code>，查看镜像源是否配置成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-3d485036c7ec37c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="docker info"></p><ol start="4"><li><p>启动 docker，进行 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 镜像安装：<code>docker pull redis</code></p></li><li><p>如果出现以下错误：</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">no matching manifest <span class="keyword">for</span> windows/amd64 <span class="number">10</span>.<span class="number">0</span>.xxxxx <span class="keyword">in</span> the manifest list entries</span><br></pre></td></tr></table></figure><p>则需要将 docker 切换到 Linux 容器：<em>docker - Switch to Linux Container…</em>。因为很多软件都是开发给 Linux，不适用于 Windows 架构。</p></li></ol><p><strong>注</strong>：切换容器后，还需要重新设置下镜像源，方法参照步骤3。</p><ol start="5"><li><p>运行 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a>：<code>docker run -d -p 6379:6379 --name redis-container redis</code>，其中，<code>redis-container</code>为容器名，可通过命令<code>docker container ls</code>，<code>-p</code>配置端口映射，将容器内的 6379 端口映射到 Windows 系统的 6379 端口。</p></li><li><p>输入<code>docker ps</code>，就可以查看到容器内部已经运行了 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a>。</p></li><li><p>从<code>docker ps</code>中，就可以获取到 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 运行所在的容器的 id，下面我们进入该容器内部，启动 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 客户端，并进行测试：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入 redis 容器</span><br><span class="line">docker exec -it ee0a8f1babe9 &#x2F;bin&#x2F;bash</span><br><span class="line"># ping 一下 redis 服务器</span><br><span class="line">root@ee0a8f1babe9:&#x2F;data# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG # redis-server 回复，表示连通</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>Linux 平台安装（Ubuntu 16.04）</strong>：可以直接在官网下载<a href="https://github.com/antirez/redis/releases" target="_blank" rel="noopener">安装包</a>，但这里我们采用编译安装，具体步骤如下：</li></ul><ol><li>下载 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 源文件：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/antirez/redis.git</span><br></pre></td></tr></table></figure></li><li>进入 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 目录，执行编译：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd redis</span><br><span class="line">sudo make MALLOC&#x3D;libc</span><br></pre></td></tr></table></figure>编译成功后，会在<code>redis/src</code>目录下产生 6 个可执行文件：</li></ol><table><thead><tr><th>name</th><th>description</th></tr></thead><tbody><tr><td><strong>redis-server</strong></td><td><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a>服务端程序</td></tr><tr><td><strong>redis-cli</strong></td><td><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 客户端程序</td></tr><tr><td>redis-sentinel</td><td><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 哨兵模式（监控和故障转移）</td></tr><tr><td>redis-benchmark</td><td><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 性能检测</td></tr><tr><td>redis-check-aof 和 redis-check-dump</td><td>这两个可执行程序对于不常见的数据文件损坏修复很有用</td></tr></tbody></table><ol start="3"><li><strong>可选步骤</strong>：编译成功后，可以选择运行测试用例，保证编译成功：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试需要安装 tcl</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential tcl</span><br><span class="line"># 进行测试</span><br><span class="line">sudo make test</span><br></pre></td></tr></table></figure></li><li>安装 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a>：通常将 <strong>redis-server</strong> 和 <strong>redis-cli</strong> 复制到<code>/usr/local/bin</code>即可：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp src&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line">sudo cp src&#x2F;redis-cli &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>或者直接使用以下命令进行安装：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li>配置 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 安装完成后，就可以对它进行一些配置，首先需要创建一个配置目录，通常为<code>/etc/redis</code>，并创建一个配置文件<code>redis.conf</code>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir &#x2F;etc&#x2F;redis</span><br><span class="line">sudo cp redis&#x2F;redis.conf &#x2F;etc&#x2F;redis</span><br></pre></td></tr></table></figure></li><li>编辑 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 配置文件，修改如下内容：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># supervised no</span><br><span class="line">supervised systemd  # 因为 Ubuntu 使用 systemd 作为系统启动初始化系统</span><br><span class="line"># dir .&#x2F;</span><br><span class="line">dir &#x2F;var&#x2F;lib&#x2F;redis  # 保存持久化数据文件目录</span><br></pre></td></tr></table></figure></li><li>新建 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 服务进程系统启动文件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 首先打开 redis.service 文件进行编辑</span><br><span class="line">sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;redis.service</span><br><span class="line"># 添加一些描述</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Redis In-Memory Data Store # 描述</span><br><span class="line">After&#x3D;network.target # 启动此服务之前网络必须可用</span><br><span class="line"># 指定服务的行为</span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;redis # 服务所属用户</span><br><span class="line">Group&#x3D;redis # 服务所属组</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf # redis 服务启动</span><br><span class="line">ExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-cli shutdown # redis 服务停止</span><br><span class="line">Restart&#x3D;always # 配置 redis 尽快能从失败中恢复</span><br><span class="line"># 定义服务应该附加到的 systemd 目标</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></li><li>由于步骤7中配置了 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 服务进行归属于 redis 用户和 redis 组，因此这里需要创建用户和组：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo adduser --system --group --no-create-home redis</span><br><span class="line">sudo mkdir &#x2F;var&#x2F;lib&#x2F;redis</span><br><span class="line">sudo chown redis:redis &#x2F;var&#x2F;lib&#x2F;redis  # 更改文件目录拥有者属性</span><br><span class="line">sudo chmod 770 &#x2F;var&#x2F;lib&#x2F;redis          # 更改文件目录读写模式，只允许 redis 用户及超级管理员</span><br></pre></td></tr></table></figure></li><li>启动和测试 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start redis  # 启动 redis 服务</span><br><span class="line">sudo systemctl status redis # 检查 redis 服务是否有错误</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：步骤5 到 步骤9 所做的其实本质上就是为了启动 redis-server，如果嫌麻烦，直接命令行启动 redis-server 也可以。</p><ol start="10"><li>步骤9完成后，理论上 redis-server 就已经启动了，那么此时我们就可以启动客户端 redis-cli，与 redis-server 进行通信：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">why8n@VM-0-11-ubuntu:&#x2F;$ redis-cli     # 启动 redis 客户端</span><br><span class="line">127.0.0.1:6379&gt; ping                  # ping 服务端，查看是否连通</span><br><span class="line">PONG                                  # 服务端回复 PONG，表示连通</span><br><span class="line">127.0.0.1:6379&gt; set test &quot;store data&quot; # 设置键</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get test              # 获取键值</span><br><span class="line">&quot;store data&quot;</span><br><span class="line">127.0.0.1:6379&gt; exit                  # 退出客户端</span><br><span class="line">why8n@VM-0-11-ubuntu:&#x2F;$ redis-cli     # 重新开启一个 redis 客户端</span><br><span class="line">127.0.0.1:6379&gt; get test              # 获取前面设置的键值</span><br><span class="line">&quot;store data&quot;</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></table></figure></li><li>通信成功后，最后设置 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 开机启动：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable redis</span><br></pre></td></tr></table></figure>配置文件常用<a href="https://redis.io/topics/config" target="_blank" rel="noopener">配置项</a></li></ol><hr><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 支持直接启动，此时使用的是 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 内置的默认配置，但直接启动只建议用于测试和开发环境中使用。</p><p>在项目部署启动时，建议加上指定配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure><p>其中，<code>/etc/redis/redis.conf</code>为配置文件，常用的配置项如下表所示：</p><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td><code>daemonize no</code></td><td>配置是否已守护进程方式运行。其值有：<br><code>yes</code>： 以守护进程方式运行<br><code>no</code>：以普通进程运行</td></tr><tr><td><code>pidfile /var/run/redis.pid</code></td><td>指定当 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 以守护进程方式运行时，写入其 pid 的文件。</td></tr><tr><td><code>port 6379</code></td><td>指定 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 监听端口。默认端口号为 6379。</td></tr><tr><td><code>bind 127.0.0.1</code></td><td>设置绑定主机地址</td></tr><tr><td><code>timeout 0</code></td><td>指定超时时间(单位：秒)，当客户端闲置超过该时间后，关闭客户端连接。<code>0</code>表示关闭超时，即永久不超时。</td></tr><tr><td><code>loglevel notice</code></td><td>指定日志记录级别。<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 工支持四个日记记录级别：<code>debug</code>，<code>verbose</code>，<code>notice</code>，<code>warning</code>，默认为<code>notice</code></td></tr><tr><td><code>logfile stdout</code></td><td>配置日志记录方式，默认为标准输出<code>stdout</code>。如果在标准输出模式下，<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 以守护进程方式运行，则日志会被输出到<code>dev/null</code></td></tr><tr><td><code>database 16</code></td><td>设置数据库数量，默认为<code>0</code></td></tr><tr><td><code>save &lt;seconds&gt; &lt;changes&gt;</code></td><td>指定在多长时间段内，超过多少次更新，则将数据库持久化到磁盘中</td></tr><tr><td><code>dbfilename dump.rdb</code></td><td>指定持久化本地数据库文件名，默认为 dump.rdb</td></tr><tr><td><code>appendonly no</code></td><td>指定是否在每次更新操作后进行日志记录，默认为<code>no</code></td></tr><tr><td><code>appendfilename appendonly.aof</code></td><td>指定更新日志文件名，默认为 appendonly.aof</td></tr><tr><td><code>appendfsync everysec</code></td><td>指定更新日志条件，共有 3 个可选值：<br><code>no</code>：表示等操作系统进行数据缓存同步到磁盘（快）<br><code>always</code>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<br><code>everysec</code>：表示每秒同步一次（折中，默认值）</td></tr><tr><td><code>dir ./</code></td><td>指定本地数据库存放目录</td></tr><tr><td><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></td><td>设置主从数据库复制，设置当本机为 slave 服务时，指定 master 服务的 IP 及 端口，在 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 启动时，它会自动从 master 进行数据同步</td></tr><tr><td><code>masterauth &lt;master-password&gt;</code></td><td>设置 master 服务密码</td></tr><tr><td><code>requirepass foobared</code></td><td>设置 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 连接密码，此时客户端进行连接时，需要使用 <code>AUTH &lt;password&gt;</code>命令进行连接</td></tr><tr><td><code>maxclients 128</code></td><td>设置同一时间最大客户端连接数。默认为<code>0</code>，表示不限制。当客户端连接数到达限制时，<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 会关闭新的连接并向客户端返回<code>max number of clients reached</code>错误信息</td></tr><tr><td><code>maxmemory &lt;bytes&gt;</code></td><td>设置 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 最大内存限制</td></tr><tr><td><code>include /path/to/local.conf</code></td><td>加载其他配置文件</td></tr></tbody></table><p>更多配置选项，请查看：<a href="https://raw.githubusercontent.com/antirez/redis/4.0/redis.conf" target="_blank" rel="noopener">redis.conf</a></p><p><strong>注</strong>：通过修改<code>redis.conf</code>文件或使用<code>CONFIG set</code>命令来修改配置，可以通过<code>CONFIG</code>命令查看或设置配置项：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set loglevel &quot;notice&quot; # 配置 loglevel</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get loglevel # 查询配置 loglevel</span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 提供了一些命令，让我们可以对数据进行一些增删改查操作。</p><p>这里我们通过客户端（redis-cli）进行操作，请确保执行命令前 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 服务端（redis-server）已启动。</p><p>下面介绍常用的命令：</p><ol><li><strong><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 支持常见的 5 种数据类型：String，List，Hash，Set，zset（Sorted Set）</strong></li></ol><ul><li><strong>字符串（String）</strong>：String 是 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 最基本的类型，一个 Key 对应一个 Value（key =&gt; String）。</li></ul><p><strong>增</strong>：<code>set key value</code>，添加字符串数据<br>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name whyn</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><strong>查</strong>：<code>get key</code>，查询键为 key 的值<br>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;whyn&quot;</span><br></pre></td></tr></table></figure><p><strong>改</strong>：格式同 <strong>增</strong></p><p><strong>删</strong>：<code>del key</code>，删除键为 key 的数据<br>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del  name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：String 类型的值最大能存储 512MB。</p><ul><li><strong>列表（List）</strong>：List 是一个简单的字符串可变数组。在 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 中一个 Key 可以对应一个 List（key =&gt; List）。</li></ul><p><strong>增</strong>：添加一个或多个值到列表头部（左插）或尾部（右插）：<br>1）将一个或多个值插入到列表头部：<code>LPUSH key value1 [value2]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list1 value1 value2</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><p>2）将一个或多个值插入到列表尾部：<code>RPUSH key value1 [value2]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush list1 value3 value4</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><p>3）将一个值插入到列表头部，如果列表不存在，插入无效：<code>LPUSHX key value</code><br>4）将一个值插入到列表尾部，如果列表不存在，插入无效：<code>RPUSHX key value</code></p><p><strong>查</strong>：查询列表<br>1）通过索引获取列表中的元素：<code>LINDEX key index</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lindex list1 0  # 查询 list1 列表第1个元素</span><br><span class="line">&quot;value2&quot;</span><br><span class="line">127.0.0.1:6379&gt; lindex list1 -1 # 查询 list1 列表最后一个元素</span><br><span class="line">&quot;value4&quot;</span><br></pre></td></tr></table></figure><p>2）指定列表范围获取列表中的元素：<code>LRANGE key start stop</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1 # list1列表的第1个到最后一个，即全部元素</span><br><span class="line">1) &quot;value2&quot;</span><br><span class="line">2) &quot;value1&quot;</span><br><span class="line">3) &quot;value3&quot;</span><br><span class="line">4) &quot;value4&quot;</span><br></pre></td></tr></table></figure><p>3）获取列表长度：<code>LLEN key</code></p><p><strong>改</strong>：更改列表元素的值<br>1）通过索引设置列表元素的值：<code>LSET key index value</code><br>2）在列表的指定元素前或者后插入元素：<code>LINSERT key BEFORE|AFTER pivot value</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush mylist &quot;Hello&quot; &quot;World&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert mylist before &quot;World&quot; &quot;My&quot; # 在 World 之前插入 My</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;My&quot;</span><br><span class="line">3) &quot;World&quot;</span><br></pre></td></tr></table></figure><p><strong>删</strong>：删除列表元素<br>1）移除并获取列表的第一个元素：<code>LPOP key</code><br>2）移除列表的最后一个元素，返回值为移除的元素：<code>RPOP key</code><br>3）对一个列表进行修剪(trim)，只保留指定区间的元素：<code>LTRIM key start stop</code><br>4）移除并获取列表的第一个元素， 如果列表为空，则会 <strong>阻塞</strong> 直到有新元素添加或超时：<code>BLPOP key1 [key2 ] timeout</code><br>5）移除并获取列表的最后一个元素，如果列表为空，则会 <strong>阻塞</strong> 直到有新元素添加或超时：<code>BRPOP key1 [key2 ] timeout</code></p><ul><li><strong>哈希（Hash）</strong>：Hash 是一个键值对集合。在 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 中表现为一个 Key 对应一个 Map（key =&gt; Map）。</li></ul><p><strong>增</strong>：添加一个或多个键值对：<br>1）添加一个键值对：<code>HSET key field value</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset hash1 field1 value1</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>2）添加多个键值对：<code>HMSET key field1 value1 [field2 value2 ]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset hash2 field2 value2 field22 value22</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><strong>查</strong>：对 key 进行查询：<br>1）查询 key 对应的哈希表中指定字段的值：<code>HGET key field</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget hash1 field1</span><br><span class="line">&quot;value1&quot;</span><br></pre></td></tr></table></figure><p>2）查询 key 对应的哈希表所有的字段和值：<code>HGETALL key</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall hash2</span><br><span class="line">1) &quot;field2&quot;</span><br><span class="line">2) &quot;value2&quot;</span><br><span class="line">3) &quot;field22&quot;</span><br><span class="line">4) &quot;value22&quot;</span><br></pre></td></tr></table></figure><p>3）查询 key 对应的哈希表的所有字段：<code>HKEYS key</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys hash2</span><br><span class="line">1) &quot;field2&quot;</span><br><span class="line">2) &quot;field22&quot;</span><br></pre></td></tr></table></figure><p>4）获取所有给定字段的值：<code>HMGET key field1 [field2]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget hash2 field2 field22</span><br><span class="line">1) &quot;value2&quot;</span><br><span class="line">2) &quot;value22&quot;</span><br></pre></td></tr></table></figure><p>5）查看哈希表 key 中，指定的字段是否存在：<code>HEXISTS key field</code></p><p><strong>注</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 中每个 Hash 可以存储 $2^{32} -1$ 个键值对（40多亿）。</p><p><strong>改</strong>：格式同 <strong>增</strong></p><p><strong>删</strong>：删除 key 对应哈希表的一个或多个字段：<code>HDEL key field1 [field2]</code></p><ul><li><strong>集合（Set）</strong>：Set 是 String 类型的无序集合。在 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 中一个 Key 可以对应一个 Set（key =&gt; Set）。</li></ul><p><strong>增</strong>：添加一个或多个值到集合中：<code>SADD key member1 [member2]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd set1 member1 member2</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><p><strong>查</strong>：查询 key 对应集合中的元素：<br>1）返回集合中的所有成员：<code>SMEMBERS key</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers set1</span><br><span class="line">1) &quot;member2&quot;</span><br><span class="line">2) &quot;member1&quot;</span><br></pre></td></tr></table></figure><p>2）判断 member 元素是否是 key 集合的成员：<code>SISMEMBER key member</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sismember set1 member</span><br><span class="line">(integer) 0  # 不是成员</span><br><span class="line">127.0.0.1:6379&gt; sismember set1 member1</span><br><span class="line">(integer) 1  # 是成员</span><br></pre></td></tr></table></figure><p>3）获取集合元素大小：<code>SCARD key</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard set1</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><p>4）<strong>差集</strong>：获取多个集合间的差集（不同部分）：<code>SDIFF key1 [key2]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd set1 member1 member2</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; sadd set2 member2 member22</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; sdiff set1 set2    # set1与set2的差集</span><br><span class="line">1) &quot;member1&quot;</span><br></pre></td></tr></table></figure><p>5）<strong>交集</strong>：获取多个集合间的交集（共有元素）：<code>SINTER key1 [key2]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sinter set1 set2</span><br><span class="line">1) &quot;member2&quot;</span><br></pre></td></tr></table></figure><p>6）<strong>并集</strong>：获取多个集合间的并集：<code>SUNION key1 [key2]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sunion set1 set2</span><br><span class="line">1) &quot;member2&quot;</span><br><span class="line">2) &quot;member22&quot;</span><br><span class="line">3) &quot;member1&quot;</span><br></pre></td></tr></table></figure><p><strong>改</strong>：格式同 <strong>增</strong></p><p><strong>删</strong>：删除 key 对应集合中的元素：<br>1）移除集合中一个或多个成员：<code>SREM key member1 [member2]</code><br>2）移除并返回集合中的一个随机元素：<code>SPOP key [count]</code></p><p><strong>注</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 中每个 Set 集合中最大的成员数为$2^{32} - 1$（4294967295, 每个集合可存储 40多亿个成员）。</p><ul><li><strong>有序集合（zset，Sorted Set）</strong>：zset 和 Set 一样也是 String 类型元素的集合,且不允许重复的成员。不同的是 zset 每个元素都会关联一个 double 类型的分数，作为权重。<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 正是根据该分数来对集合中的元素进行从小到大的排序（key =&gt; Sorted Set）。</li></ul><p><strong>增</strong>：添加一个或多个值到有序集合中：<br>1）向有序集合添加一个或多个成员，或者更新已存在成员的分数：<code>ZADD key score1 member1 [score2 member2]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zset1 1 member1 2 member2</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><p><strong>查</strong>：查询有序集合数据<br>1）通过索引区间返回有序集合指定区间内的成员（默认按分数（score）从低到高排序）：<code>ZRANGE key start stop [WITHSCORES]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange zset1 0 -1</span><br><span class="line">1) &quot;member1&quot;</span><br><span class="line">2) &quot;member2&quot;</span><br></pre></td></tr></table></figure><p>2）通过索引区间返回有序集合指定区间内的成员，按分数（score）从高到低排序：<code>ZREVRANGE key start stop [WITHSCORES]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange zset1 0 -1</span><br><span class="line">1) &quot;member2&quot;</span><br><span class="line">2) &quot;member1&quot;</span><br></pre></td></tr></table></figure><p>3）通过分数（score）返回有序集合指定区间内的成员：<code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 返回分数为[1,10]之间的成员</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore zset1 0 10</span><br><span class="line">1) &quot;member1&quot;</span><br><span class="line">2) &quot;member2&quot;</span><br></pre></td></tr></table></figure><p>4）返回有序集中指定分数（score）区间内的成员，按分数（score）从高到低排序：<code>ZREVRANGEBYSCORE key max min [WITHSCORES]</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrangebyscore zset1 10 0</span><br><span class="line">1) &quot;member2&quot;</span><br><span class="line">2) &quot;member1&quot;</span><br></pre></td></tr></table></figure><p>5）返回有序集中，成员的分数值：<code>ZSCORE key member</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore zset1 member1</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; zscore zset1 member2</span><br><span class="line">&quot;2&quot;</span><br></pre></td></tr></table></figure><p>6）返回有序集合中指定成员的索引：<code>ZRANK key member</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrank zset1 member2</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>7）获取有序集合大小：<code>ZCARD key</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard zset1</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><p>8）获取有序集合在指定分数区间的元素个数：<code>ZCOUNT key min max</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount zset1 0 10</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><p><strong>改</strong>：格式同 <strong>增</strong></p><p><strong>删</strong>：删除有序集合一个或多个成员数据<br>1）移除有序集合中的一个或多个成员：<code>ZREM key member [member ...]</code><br>2）移除有序集合中给定的分数区间的所有成员：<code>ZREMRANGEBYSCORE key min max</code><br>3）移除有序集合中给定的排名区间的所有成员：<code>ZREMRANGEBYRANK key start stop</code></p><ol start="2"><li><strong>对键进行操作的命令：</strong></li></ol><ul><li><strong><code>DEL key [key ...]</code></strong>：删除 key 对应的数据结构。</li><li><strong><code>DUMP key</code></strong>：序列化给定 key ，并返回被序列化的值。</li><li><strong><code>EXISTS key</code></strong>：检查给定 key 是否存在。返回<code>1</code>表示存在，<code>0</code>表示不存在。</li><li><strong><code>EXPIRE key seconds</code></strong>：给 key 设置过期时间（单位：秒）。</li><li><strong><code>PEXPIRE key milliseconds</code></strong>：给 key 设置过期时间（单位：毫秒）。</li><li><strong><code>EXPIREAT key timestamp</code></strong>：给 key 设置过期时间，以时间戳方式设置。</li><li><strong><code>TTL key</code></strong>：显示 key 的剩余过期时间（单位：秒）。</li><li><strong><code>PTTL key</code></strong>：显示 key 的剩余过期时间（单位：毫秒）。</li><li><strong><code>PERSIST key</code></strong>：移除 key 的过期时间，key 将持久保持。</li><li><strong><code>KEYS pattern</code></strong>：查找所有符合给定模式( pattern)的 key。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * # 查找所有键</span><br><span class="line">1) &quot;name&quot;</span><br></pre></td></tr></table></figure></li><li><strong><code>RENAME key newkey</code></strong>：修改 key 的名称。</li><li><strong><code>TYPE key</code></strong>：返回 key 储存的值的类型。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; type name</span><br><span class="line">string</span><br></pre></td></tr></table></figure></li><li><strong><code>RANDOMKEY</code></strong>：从当前数据库中随机返回一个 key。</li></ul><ol start="3"><li><strong>对数据库进行操作的命令</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 可以支持多个数据库操作，比如<code>database 16</code>，表示支持 16 个数据库，各个数据索引为：0~15。</li></ol><ul><li>选择数据库/切换数据库：<code>SELECT index</code></li><li>清空当前数据库：<code>FLUSHDB [ASYNC]</code></li><li>清除 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 所有数据库的所有 key：<code>FLUSHALL [ASYNC]</code></li></ul><ol start="4"><li><strong>发布-订阅</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 支持发布-订阅（pub/sub）消息通信模式，其执行模型为：一个频道（channel）可以被一个或多个 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 客户端进行订阅，当有新消息通过<code>PUBLISH</code>命令发送给该频道时，这个消息就会被发送给订阅该频道的所有客户端。具体模型如下图所示：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2222997-e4b2a2c1adf64ad6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pub/sub"></p><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 发布-订阅相关命令如下所示：</p><ul><li>订阅一个或多个频道：<code>SUBSCRIBE channel [channel ...]</code></li><li>发布消息给指定频道：<code>PUBLISH channel message</code></li><li>取消订阅指定频道：<code>UNSUBSCRIBE [channel [channel ...]]</code></li></ul><p>更多其他相关命令，请查看：<a href="https://redis.io/commands#pubsub" target="_blank" rel="noopener">commands#pubsub</a></p><p>示例：启动三个客户端（redis-cli），其中两个订阅频道<code>chatChannel</code>，剩余最后一个客户端发布消息到<code>chatChannel</code>频道，查看订阅者是否能接收到该信息。<br>具体步骤如下：<br>1）首先启动3个客户端（redis-cli)，其中两个订阅频道<code>chatChannel</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subscrieb chatChannel</span><br></pre></td></tr></table></figure><p>2）剩余一个客户端发布消息到频道<code>chatChannel</code>，此时另外两个客户端应该能接收到这条消息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">publish chatChannel hello</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2222997-818fb3684af1c12a.gif?imageMogr2/auto-orient/strip" alt=""></p><ol start="5"><li><strong><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 事务</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 是单线程运行模型，其单个操作是具备原子性的，而对于多个操作，<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 也提供了事务支持，使多个操作也具备原子性。</li></ol><p><strong><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 事务执行模型</strong>：开启事务时，<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 并不会直接运行命令，而是将命令序列号并放入队列缓存，在执行事务（<code>EXEC</code>）时，会依次执行队列中命令，整个队列执行是一个原子操作，队列中的命令要么依次按顺序执行，要么就完全不执行。</p><p>一个典型的 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 事务会经历 3 个过程：<strong>开始事务（<code>MULTI</code>）</strong>，<strong>命令入队</strong>，<strong>执行事务（<code>EXEC</code>）</strong>。<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 事务可以一次执行多个命令，并且同时带有以下 3 个保证：</p><ul><li>事务中的所有命令都会被序列化并按顺序执行。在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li><li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</li><li>当使用<code>WATCH</code>命令时，<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 通过乐观锁实现了check-and-set (CAS) 操作，使得我们可以对一个或多个 key 进行监控，确保只有在监控的 key 都没有被修改的前提下，才执行事务。</li></ul><p><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 事务相关命令如下所示：</p><ul><li>开启事务：<code>MULTI</code></li><li>执行事务：<code>EXEC</code></li><li>取消事务：<code>DISCARD</code></li><li>监控 key：<code>WATCH key [key ...]</code><br>如果被监控的 key 在事务执行之前（<code>EXEC</code>）被其他命令修改了，那么事务就会被打断。</li><li>取消对所有 key 的监控：<code>UNWATCH</code></li></ul><p>示例：开启一个事务，实现用户A转账 100 元给到用户B。<br>具体步骤如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set A 100    # 创建用户A</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set B 0      # 创建用户B</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi        # 开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get A        # 获取 A</span><br><span class="line">QUEUED                       # get A 入队成功</span><br><span class="line">127.0.0.1:6379&gt; get B</span><br><span class="line">QUEUED                       # get B 入队成功</span><br><span class="line">127.0.0.1:6379&gt; decrby A 100 # A-100</span><br><span class="line">QUEUED                       # decrby A 100 入队成功</span><br><span class="line">127.0.0.1:6379&gt; incrby B 100 # B+100</span><br><span class="line">QUEUED                       # incrby B 100 入队成功</span><br><span class="line">127.0.0.1:6379&gt; get A        # 再次获取 A 的值</span><br><span class="line">QUEUED                       # get A 入队成功</span><br><span class="line">127.0.0.1:6379&gt; get B        # 获取 B 的值</span><br><span class="line">QUEUED                       # get B 入队成功</span><br><span class="line">127.0.0.1:6379&gt; exec         # 执行事务</span><br><span class="line">1) &quot;100&quot;                     # get A</span><br><span class="line">2) &quot;0&quot;                       # get B</span><br><span class="line">3) (integer) 0               # decrby A 100</span><br><span class="line">4) (integer) 100             # incrby B 100</span><br><span class="line">5) &quot;0&quot;                       # get A</span><br><span class="line">6) &quot;100&quot;                     # get B</span><br></pre></td></tr></table></figure><p><strong>注</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 的事务与传统的关系型数据库的事务不太一样。<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 事务中可能出现两种错误类型：</p><ul><li><strong>无法入队</strong>：比如使用 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 无法识别的指令（参数个数错误，指令名错误···），或者其他更严重的错误，比如内存不足等等，这样 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 就无法将该指令放入队列中，因此会直接 <strong>回滚</strong> 整个操作：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key1 hello                                          # 创建键 key1 &#x3D; hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi                                                   # 开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set key1 hi                                             # 修改键 key1 &#x3D; hi</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; adasdfasdfasdf                                          # 无法识别的指令</span><br><span class="line">(error) ERR unknown command &#96;adasdfasdfasdf&#96;, with args beginning with:</span><br><span class="line">127.0.0.1:6379&gt; get key1                                                # 获取键</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec                                                    # 执行事务</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.     # 事务执行失败</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;hello&quot;                                                                 # 获取键值为 hello，表示事务执行确实失败，未能更改 key1 的值</span><br></pre></td></tr></table></figure></li><li><strong>命令执行错误</strong>：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 事务中包含有多个命令，当顺序执行这些命令时，有可能某些命令会执行失败，当这些命令执行失败并不会影响下一条命令的执行，此处的处理就与我们通常认识的关系型数据库的事务处理存在区别。在关系型数据库事务中，通常只要事务中某个操作出现错误，就会打断事务，并进行回滚，而在 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 中，某个命令的执行失败不会产生额外影响，事务会继续进行。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key1 hello                         # 创建 key1 &#x3D; hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi                                  # 开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set key1 hi                            # 修改 key1 &#x3D; hi</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby key1 10                         # key1+&#x3D;10，字符串无法进行加减，此会命令执行会失败</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get key1                               # 获取 key1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec                                   # 执行事务</span><br><span class="line">1) OK                                                  # set key1 hi 执行成功</span><br><span class="line">2) (error) ERR value is not an integer or out of range # incrby key1 10 执行失败</span><br><span class="line">3) &quot;hi&quot;                                                # get key1 执行成功</span><br><span class="line">127.0.0.1:6379&gt; get key1                               # key1 &#x3D; &quot;hi&quot;，说明事务执行成功</span><br><span class="line">&quot;hi&quot;</span><br></pre></td></tr></table></figure></li><li><em>注*</em>：区分 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 事务会不会 <strong>回滚</strong>，主要看事务中的命令是否能放入队列中，如果都能，则不管命令执行是否成功，都不会进行回滚。反之，只要出现无法入队的指令，<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 就会回滚整个操作。</li></ul><p>由于多个客户端可以对 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 数据库的同一个 key 进行操作，因此，在某个客户端执行事务前，数据可能存在偏差（被其他客户端进行修改），导致结果出现异常。<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 为了解决上述问题，为我们提供了<code>WATCH</code>命令，可以让我们对一个或多个 key 进行监控，确保相应的 key 未被意外修改后，才执行事务。</p><p>示例：开启两个客户端，在客户端A 内监控键<code>watchedKey</code>，并开启一个事务，修改键<code>watchedKey</code>。客户端B 在客户端A 执行事务前，修改下键<code>watchedKey</code>，查看运行效果。<br>具体步骤如下：<br>1）创建键<code>watchedKey</code>，随意赋一个值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set watchedKey hello   </span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>2）客户端A 监控键<code>watchedKey</code>，并开启一个事务，修改<code>watchedKey</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch watchedKey</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set watchedKey HELLO</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><p>3）此时，客户端B 修改键<code>watchedKey</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">why8n@VM-0-11-ubuntu:~$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set watchedKey hi</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>4）客户端A 执行事务，查看结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil) # 表示事务被打断</span><br><span class="line">127.0.0.1:6379&gt; get watchedKey</span><br><span class="line">&quot;hi&quot; # 事务没有被执行，因此 watchedKey !&#x3D; HELLO</span><br></pre></td></tr></table></figure><p>可以看到，在我们执行事务前，如果监控的 key 被修改了，那么事务不会执行。</p><ol start="3"><li><strong>其他命令：</strong></li></ol><ul><li><strong>PING</strong>：用于测试 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 服务是否启动。当接收到 PONG 回复时，表明 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 服务已启动，客户端可以和服务端正常通信。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure></li><li><strong><code>redis-cli -h host -p port -a password</code></strong>：指定连接特定的 <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis</a> 服务：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 连接到主机为 127.0.0.1，端口为 6379 ，密码为 mypass 的 redis 服务上</span></span><br><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a "mypass"</span><br></pre></td></tr></table></figure></li></ul><p>更多命令，请参考：<a href="https://redis.io/commands" target="_blank" rel="noopener"><strong>commands</strong></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://www.cnblogs.com/feiffy/p/9327501.html" target="_blank" rel="noopener">Ubuntu 16.04 安装和配置 Redis</a></p></li><li><p><a href="https://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">Redis 教程 | 菜鸟教程</a></p></li></ul><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/post/2020/02/09/mybatis/</url>
    <content><![CDATA[<!-- build time:Tue Feb 11 2020 02:20:22 GMT+0800 (China Standard Time) --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。<a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。<a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></blockquote><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a><a href="http://www.mybatis.org/mybatis-3/getting-started.html" target="_blank" rel="noopener">入门案例</a></h2><p>下面列举一个简单例子，来阐述 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 的常用操作。</p><p>例子：假设数据库<code>school</code>内部有一张表<code>students</code>，我们希望能使用 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 来实现对<code>student</code>表的增删改查操作。</p><p>具体步骤如下：</p><ul><li>首先，我们先创建数据库<code>school</code>和表<code>students</code>，并插入一些预备数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建数据库 school</span><br><span class="line">create database if not exists school;</span><br><span class="line"># 使用数据库 school</span><br><span class="line">use school;</span><br><span class="line"># 创建表 student</span><br><span class="line">create table if not exists students (</span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(20) not null,</span><br><span class="line">    -&gt; sex varchar(6) default &quot;male&quot;,</span><br><span class="line">    -&gt; cls int not null);</span><br><span class="line"># 插入一些数据</span><br><span class="line">insert into students(id,name,sex,cls) values(1,&quot;小明&quot;,&quot;male&quot;,1);</span><br><span class="line">insert into students values(2,&quot;小红&quot;,&quot;female&quot;,2);</span><br><span class="line">insert into students(name,sex,cls) values(&quot;小芳&quot;,&quot;female&quot;,2);</span><br><span class="line">insert into students(name,cls) values(&quot;小宁&quot;,4);</span><br></pre></td></tr></table></figure>经过上面操作后，<code>students</code>表就存储了如下内容：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2222997-78cacdbc5d5c5b93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="students"></p><ul><li>创建一个使用 <a href="http://maven.apache.org/" target="_blank" rel="noopener">Maven</a> 作为依赖管理的普通 Java 工程，如下图所示：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2222997-5b72b6192097a20b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>在 pom.xml 中添加依赖：必须添加的是 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 依赖和 <a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java/8.0.16" target="_blank" rel="noopener">mysql-connector</a> 驱动依赖，同时这里我们也添加一个 <a href="https://mvnrepository.com/artifact/log4j/log4j/1.2.17" target="_blank" rel="noopener">log4j</a> 依赖，用以配置日志输出：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.0.16&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>然后在主工程<code>resources</code>资源目录下，创建一个配置文件：<code>log4j.properties</code>，进行日志信息配置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line">log4j.rootLogger&#x3D;DEBUG, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern&#x3D;%5p [%t] - %m%n</span><br></pre></td></tr></table></figure></li><li>接下来，继续在主工程<code>resources</code>目录下创建一个全局的 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 配置文件，该文件可任意命名，我们这里将其命名为：<code>MyBatisConfig.xml</code>，具体内容如下：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://www.mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境：和spring整合后 environments配置将废除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务：使用jdbc事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/school?serverTimezone=GMT"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--注意：这里必须是username,一定要规范--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>可以看到，上述全局配置表主要完成的是对开发环境和 MySql 连接信息的配置。</li><li>要想使用 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 完成对具体某一张表的操作，我们还需要为这张表的相关操作创建相应接口和配置文件，并在全局配置表中将相关配置文件具体内容进行注入。具体操作如下：</li></ul><p>1）创建表对应的 POJO 类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yn.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Whyn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 7/16/2019 5:37 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cls;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 必须创建一个默认构造函数，否则就需要构造一个映射器，比如</span></span><br><span class="line"><span class="comment"> *     &lt;resultMap id="studentResultMap" type="com.yn.bean.Student"&gt;</span></span><br><span class="line"><span class="comment"> *        &lt;constructor&gt;</span></span><br><span class="line"><span class="comment"> *            &lt;arg column="name" javaType="String" /&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;arg column="sex" javaType="String" /&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;arg column="cls" javaType="_int" /&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;/constructor&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;/resultMap&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String sex, <span class="keyword">int</span> cls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.cls = cls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCls</span><span class="params">(<span class="keyword">int</span> cls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cls = cls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", cls="</span> + cls +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）创建对表操作的相应接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yn.interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yn.bean.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudentsDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    增：添加学生</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    删：删除学生</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    改：更改信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    查：查询所有</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）在主工程资源目录<code>resources</code>下，创建对表操作的配置信息（对于每一个 Dao，都创建对应包名目录的配置文件，比如：<code>com.yn.interfaces.IStudentsDao</code>，则创建对应配置文件：<code>com/yn/interfaces/IStudentsDao.xml</code>）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yn.interfaces.IStudentsDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"com.yn.bean.Student"</span>&gt;</span></span><br><span class="line">        insert into students(name,sex,cls) values(#&#123;name&#125;,#&#123;sex&#125;,#&#123;cls&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">        delete from students where name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.yn.bean.Student"</span>&gt;</span></span><br><span class="line">        update students set sex=#&#123;sex&#125;,cls=#&#123;cls&#125; where name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"com.yn.bean.Student"</span>&gt;</span></span><br><span class="line">        select * from students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：<code>&lt;mapper&gt;</code>标签中的<code>namespace</code>表示表对应接口类，各个数据库操作的属性<code>id</code>表示接口类对应的方法名。因此，由<code>namespace + id</code>就可以唯一确定对应的操作方法。</p><p>4）创建完对表的操作配置文件后，还需在全局配置文件中注入该配置文件，因此，全局配置表完整内容如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://www.mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 和spring整合后 environments配置将废除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用jdbc事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/school?serverTimezone=GMT"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--注意：这里必须是username,一定要规范--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注入各个具体配置表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指明具体配置表路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yn/interfaces/IStudentsDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5）最后，就可以通过代码对数据库表进行操作，代码如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        加载全局配置文件</span></span><br><span class="line">        InputStream config = Resources.getResourceAsStream(<span class="string">"MyBatisConfig.xml"</span>);</span><br><span class="line"><span class="comment">//        创建工厂类</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(config);</span><br><span class="line"><span class="comment">//        由工厂创建得到操作数据库表的 SqlSession 对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"><span class="comment">//        得到表操作代理对象</span></span><br><span class="line">        IStudentsDao studentsDaoProxy = session.getMapper(IStudentsDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//        增：添加学生</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="string">"Whyn"</span>, <span class="string">"male"</span>, <span class="number">7</span>);</span><br><span class="line">        studentsDaoProxy.add(student);</span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        删：删除学生</span></span><br><span class="line">        studentsDaoProxy.delete(<span class="string">"Whyn"</span>);</span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        改：更改信息</span></span><br><span class="line">        student = <span class="keyword">new</span> Student(<span class="string">"小明"</span>, <span class="string">"male"</span>, <span class="number">8</span>);</span><br><span class="line">        studentsDaoProxy.update(student);</span><br><span class="line">        session.commit();</span><br><span class="line"><span class="comment">//        查：查询所有</span></span><br><span class="line">        List&lt;Student&gt; students = studentsDaoProxy.selectAll();</span><br><span class="line"><span class="comment">//        释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        config.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：此处我们使用的是 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 推荐的基于动态代理生成<code>IUserDao</code>代理实例进行数据库操作，当然也可以自己通过实现具体的<code>IStudentsDao</code>实例对数据库进行操作，其原理就是在具体实现类内部创建<code>SqlSession</code>实例进而操作数据库，具体做法此处就不进行展开了。</p><p>以上，就是使用 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 对数据库进行操作的基本操作过程了。</p><h2 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a><a href="http://www.mybatis.org/mybatis-3/configuration.html" target="_blank" rel="noopener">全局配置文件</a></h2><p>下面对 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 的全局配置文件（即：<code>MyBatisConfig.xml</code>）中的常用配置选项进行讲解：</p><p><strong>注</strong>：以下所讲解的属性配置均位于大标签<code>&lt;configuration&gt;</code>内部。</p><ul><li><p><strong><a href="http://www.mybatis.org/mybatis-3/configuration.html#properties" target="_blank" rel="noopener">properties</a></strong>：这些属性都是外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过<code>properties</code>元素的子元素来传递。例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/school?serverTimezone=GMT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后其中的属性就可以在整个配置文件中被用来替换需要动态配置的属性值。比如:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，<code>properties</code>更常用的方式是读取外部配置文件，通过属性<code>resource</code>/<code>url</code>指定外部配置文件即可，具体操作如下：<br>1）在<code>resources</code>目录下，创建一个配置文件：<strong>db.properties</strong>，内容如下：</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:<span class="number">3306</span>/school?serverTimezone=GMT</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=password</span><br></pre></td></tr></table></figure><p>2）然后在全局配置文件（<code>MyBatisConfig.xml</code>）中进行导入并配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    导入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--注意：这里必须是username,一定要规范--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>注*</em>：如果同一个属性<code>property</code>在多个地方都定义了，那么其读取顺序为：标签<code>properties</code>内部指定的属性 &gt; <code>resource</code>/<code>url</code> 属性中指定的配置文件 &gt; 方法参数。因此，方法参数的优先级最高。</p></li><li><p><strong><a href="http://www.mybatis.org/mybatis-3/configuration.html#typeAliases" target="_blank" rel="noopener">typeAliases</a></strong>：类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type指定类全限定名，alias指定别名，且别名不区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.yn.bean.Student"</span> <span class="attr">alias</span>=<span class="string">"student"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一种更简便的配置别名的方法是使用标签<code>package</code>：<a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 会自动搜索<code>package</code>标签指定包名下面的所有 Java Bean，并将别名设置为其类名：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 类名即为别名，且不区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yn.bean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>注*</em>：使用<code>package</code>标签后，如果不想使用类名作为别名，则可以在使用<code>@Alias</code>注解自定义别名：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，就可以在任何使用<code>com.yn.bean.Student</code>的配置文件中，更改为使用别名：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yn.interfaces.IStudentsDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">        insert into students(name,sex,cls) values(#&#123;name&#125;,#&#123;sex&#125;,#&#123;cls&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        update students set sex=#&#123;sex&#125;,cls=#&#123;cls&#125; where name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">        select * from students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 中已经为我们内置了许多 Java 类型的别名，具体如下表所示：</p></li></ul><table><thead><tr><th align="center">Alias</th><th align="center">Mapped Type</th></tr></thead><tbody><tr><td align="center">_byte</td><td align="center">byte</td></tr><tr><td align="center">_long</td><td align="center">long</td></tr><tr><td align="center">_short</td><td align="center">short</td></tr><tr><td align="center">_int</td><td align="center">int</td></tr><tr><td align="center">_integer</td><td align="center">int</td></tr><tr><td align="center">_double</td><td align="center">double</td></tr><tr><td align="center">_float</td><td align="center">float</td></tr><tr><td align="center">_boolean</td><td align="center">boolean</td></tr><tr><td align="center">string</td><td align="center">String</td></tr><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">integer</td><td align="center">Integer</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">date</td><td align="center">Date</td></tr><tr><td align="center">decimal</td><td align="center">BigDecimal</td></tr><tr><td align="center">bigdecimal</td><td align="center">BigDecimal</td></tr><tr><td align="center">object</td><td align="center">Object</td></tr><tr><td align="center">map</td><td align="center">Map</td></tr><tr><td align="center">hashmap</td><td align="center">HashMap</td></tr><tr><td align="center">list</td><td align="center">List</td></tr><tr><td align="center">arraylist</td><td align="center">ArrayList</td></tr><tr><td align="center">collection</td><td align="center">Collection</td></tr><tr><td align="center">iterator</td><td align="center">Iterator</td></tr></tbody></table><ul><li><strong><a href="http://www.mybatis.org/mybatis-3/configuration.html#mappers" target="_blank" rel="noopener">mappers</a></strong>：映射器配置文件内部定义了 SQL 映射语句，因此我们需要将这些映射文件告诉 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a>，可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 file:/// 的 URL），或类名和包名等。例如：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.BlogMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.PostMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.builder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="映射器配置文件"><a href="#映射器配置文件" class="headerlink" title="映射器配置文件"></a><a href="www.mybatis.org/mybatis-3/sqlmap-xml.html">映射器配置文件</a></h2><p>下面对 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 的配置 SQL 映射语句的映射文件（即：<code>IStudentsDao.xml</code>）中的常用配置选项进行讲解：</p><ul><li><strong><a href="http://www.mybatis.org/mybatis-3/sqlmap-xml.html#select" target="_blank" rel="noopener">select</a></strong>： 映射查询语句，如下所示：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span>&gt;</span></span><br><span class="line">  SELECT * FROM PERSON WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>这个语句被称作<code>selectPerson</code>，接受一个<code>int</code>（或<code>Integer</code>）类型的参数，并返回一个<code>HashMap</code>类型的对象，其中的键是列名，值便是结果行中的对应值。</li></ul><p><code>&lt;select&gt;</code>标签的属性及其作用如下表所示：</p><table><thead><tr><th align="center">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="center"><code>parameterType</code></td><td align="left">将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 可以通过类型处理器（<code>TypeHandler</code>） 推断出具体传入语句的参数，默认值为未设置（<code>unset</code>）。</td></tr><tr><td align="center"><code>resultType</code></td><td align="left">从这条语句中返回的期望类型的类的完全限定名或别名。 <strong>注意如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身</strong>。可以使用 <code>resultType</code> 或 <code>resultMap</code>，但不能同时使用。</td></tr><tr><td align="center"><code>resultMap</code></td><td align="left">外部 <code>resultMap</code> 的命名引用。结果集的映射是 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 最强大的特性，如果你对其理解透彻，许多复杂映射的情形都能迎刃而解。可以使用 <code>resultMap</code> 或 <code>resultType</code>，但不能同时使用。</td></tr><tr><td align="center"><code>flushCache</code></td><td align="left">将其设置为 <code>true</code> 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：<code>false</code>。</td></tr><tr><td align="center"><code>useCache</code></td><td align="left">将其设置为 <code>true</code> 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 <code>true</code>。</td></tr><tr><td align="center"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（<code>unset</code>）（依赖驱动）。</td></tr><tr><td align="center"><code>fetchSize</code></td><td align="left">这是一个给驱动的提示，尝试让驱动程序每次批量返回的结果行数和这个设置值相等。 默认值为未设置（<code>unset</code>）（依赖驱动）。</td></tr><tr><td align="center"><code>statementType</code></td><td align="left"><code>STATEMENT</code>，<code>PREPARED</code>或<code>CALLABLE</code> 中的一个。这会让 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 分别使用<code>Statement</code>，<code>PreparedStatement</code>或<code>CallableStatement</code>，默认值：<code>PREPARED</code>。</td></tr><tr><td align="center"><code>resultSetType</code></td><td align="left"><code>FORWARD_ONLY</code>，<code>SCROLL_SENSITIVE</code>, <code>SCROLL_INSENSITIVE</code> 或 <code>DEFAULT</code>（等价于 <code>unset</code>） 中的一个，默认值为 <code>unset</code> （依赖驱动）。</td></tr><tr><td align="center"><code>databaseId</code></td><td align="left">如果配置了数据库厂商标识（databaseIdProvider），<a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 会加载所有的不带 <code>databaseId</code> 或匹配当前 <code>databaseId</code> 的语句；如果带或者不带的语句都有，则不带的会被忽略。</td></tr><tr><td align="center"><code>resultOrdered</code></td><td align="left">这个设置仅针对嵌套结果 select 语句适用：如果为 <code>true</code>，就是假设包含了嵌套结果集或是分组，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。 这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：<code>false</code>。</td></tr><tr><td align="center"><code>resultSets</code></td><td align="left">这个设置仅对多结果集的情况适用。它将列出语句执行后返回的结果集并给每个结果集一个名称，名称是逗号分隔的。</td></tr></tbody></table><ul><li><strong><a href="http://www.mybatis.org/mybatis-3/sqlmap-xml.html#insert_update_and_delete" target="_blank" rel="noopener">insert, update 和 delete</a></strong>：数据变更语句 insert，update 和 delete 的实现非常接近：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"insertAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyColumn</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useGeneratedKeys</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"updateAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"deleteAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br></pre></td></tr></table></figure><code>&lt;insert&gt;</code>，<code>&lt;update&gt;</code>和<code>&lt;delete&gt;</code>标签的属性及其作用如下表所示：</li></ul><table><thead><tr><th align="center">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center"><code>id</code></td><td align="left">命名空间中的唯一标识符，可被用来代表这条语句。</td></tr><tr><td align="center"><code>parameterType</code></td><td align="left">将要传入语句的参数的完全限定类名或别名。这个属性是可选的，因为 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 可以通过类型处理器推断出具体传入语句的参数，默认值为未设置（<code>unset</code>）。</td></tr><tr><td align="center"><code>flushCache</code></td><td align="left">将其设置为 <code>true</code> 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：<code>true</code>（对于 insert、update 和 delete 语句）。</td></tr><tr><td align="center"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（<code>unset</code>）（依赖驱动）。</td></tr><tr><td align="center"><code>statementType</code></td><td align="left"><code>STATEMENT</code>，<code>PREPARED</code> 或 <code>CALLABLE</code> 的一个。这会让 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 分别使用 <code>Statement</code>，<code>PreparedStatement</code> 或 <code>CallableStatement</code>，默认值：<code>PREPARED</code>。</td></tr><tr><td align="center"><code>useGeneratedKeys</code></td><td align="left">（仅对 insert 和 update 有用）这会令 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 使用 JDBC 的 <code>getGeneratedKeys</code> 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td align="center"><code>keyProperty</code></td><td align="left">（仅对 insert 和 update 有用）唯一标记一个属性，<a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 会通过 <code>getGeneratedKeys</code> 的返回值或者通过 insert 语句的 <code>selectKey</code> 子元素设置它的键值，默认值：未设置（<code>unset</code>）。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。</td></tr><tr><td align="center"><code>keyColumn</code></td><td align="left">（仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望使用多个生成的列，也可以设置为逗号分隔的属性名称列表。</td></tr><tr><td align="center"><code>databaseId</code></td><td align="left">如果配置了数据库厂商标识（databaseIdProvider），<a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 会加载所有的不带 <code>databaseId</code> 或匹配当前 <code>databaseId</code> 的语句；如果带或者不带的语句都有，则不带的会被忽略。</td></tr></tbody></table><h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a><a href="http://www.mybatis.org/mybatis-3/dynamic-sql.html" target="_blank" rel="noopener">动态 SQL</a></h2><p><a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 为我们提供了一些标签，方便我们进行 SQL 的动态拼接（动态 SQL）。</p><p>具体的标签及其功能如下：</p><ul><li><p><strong>if</strong>：动态 SQL 最常用处就是作为 where 子句的条件判断。比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; IStudentsDao.java</span><br><span class="line">public interface IStudentsDao &#123;</span><br><span class="line">	...</span><br><span class="line">    List&lt;Student&gt; findStudentsByCondition(Student student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; IStudentsDao.xml</span><br><span class="line">...</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.interfaces.IStudentsDao&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;select id&#x3D;&quot;findStudentsByCondition&quot; parameterType&#x3D;&quot;Student&quot; resultMap&#x3D;&quot;studentResultMap&quot;&gt;</span><br><span class="line">        select * from students where 1&#x3D;1</span><br><span class="line">        &lt;if test&#x3D;&quot;name !&#x3D; null&quot;&gt;</span><br><span class="line">            and name&#x3D;#&#123;name&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;sex !&#x3D;null&quot;&gt;</span><br><span class="line">            and sex&#x3D;#&#123;sex&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;cls !&#x3D; 0&quot;&gt;</span><br><span class="line">            and class&#x3D;#&#123;cls&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; IStudentsDaoTest.java</span><br><span class="line">    @Test</span><br><span class="line">    public void testFindStudentsByCondition() &#123;</span><br><span class="line">		...</span><br><span class="line">        Student student &#x3D; new Student();</span><br><span class="line">        student.setSex(&quot;male&quot;);</span><br><span class="line">        student.setCls(4);</span><br><span class="line">        List&lt;Student&gt; students &#x3D; this.studentsDaoProxy.findStudentsByCondition(student);</span><br><span class="line">        for(Student stu: students)&#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>where</strong>：见名知意，该标签用于替换 where 子句。正如我们上面那个例子，如果直接使用 where 子句进行 <strong>if</strong> 判断，我们需要手动添加一个为”真“的条件，这样当 <strong>if</strong> 判断失败时，还能确保 SQL 语句的正确性，但使用 <strong>where</strong> 标签，就可以省略这冗余操作：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentsByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"Student"</span> <span class="attr">resultMap</span>=<span class="string">"studentResultMap"</span>&gt;</span></span><br><span class="line">    select * from students</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">            and name=#&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex !=null"</span>&gt;</span></span><br><span class="line">            and sex=#&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cls != 0"</span>&gt;</span></span><br><span class="line">            and class=#&#123;cls&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>foreach</strong>：动态 SQL 的另一个常用操作就是对一个集合进行遍历，通常实在构建 IN 条件语句时使用。比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; StudentVo.java</span><br><span class="line">public class StudentVo &#123;</span><br><span class="line">    private List&lt;Integer&gt; studentIds;</span><br><span class="line"></span><br><span class="line">    public List&lt;Integer&gt; getStudentIds() &#123;</span><br><span class="line">        return studentIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStudentIds(List&lt;Integer&gt; studentIds) &#123;</span><br><span class="line">        this.studentIds &#x3D; studentIds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; IStudentDao.java</span><br><span class="line">public interface IStudentsDao &#123;</span><br><span class="line">	...</span><br><span class="line">    List&lt;Student&gt; findStudentsInIds(StudentVo vo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; IStudentDao.xml</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.interfaces.IStudentsDao&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;select id&#x3D;&quot;findStudentsInIds&quot; parameterType&#x3D;&quot;StudentVo&quot; resultMap&#x3D;&quot;studentResultMap&quot;&gt;</span><br><span class="line">        select * from students</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;if test&#x3D;&quot;studentIds !&#x3D; null and studentIds.size() &gt; 0&quot;&gt;</span><br><span class="line">                &lt;foreach collection&#x3D;&quot;studentIds&quot; open&#x3D;&quot;id in (&quot; close&#x3D;&quot;)&quot; item&#x3D;&quot;id&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">                    #&#123;id&#125;</span><br><span class="line">                &lt;&#x2F;foreach&gt;</span><br><span class="line">            &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;&#x2F;where&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; IStudentDaoTest.java</span><br><span class="line">    @Test</span><br><span class="line">    public void testFindStudentsInIds() &#123;</span><br><span class="line">        List&lt;Integer&gt; ids &#x3D; Arrays.asList(1,2,3,4);</span><br><span class="line">        StudentVo vo &#x3D; new StudentVo();</span><br><span class="line">        vo.setStudentIds(ids);</span><br><span class="line">        List&lt;Student&gt; students &#x3D; this.studentsDaoProxy.findStudentsInIds(vo);</span><br><span class="line">        for(Student student : students)&#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><em>foreach*</em> 标签中的<code>collection</code>属性用于指定集合对象，在我们上面的例子里就是<code>StudentVo.studentIds</code>。<code>open</code>+<code>item</code>+<code>separator</code>+<code>close</code>组合而成我们的SQL 查询语句，上面完整的 SQL 语句如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>sql</strong>：该标签可以抽取出重复 SQL 语句，用于复用。如下所示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;sql id="defaultSelect"&gt;</span><br><span class="line">	<span class="keyword">select</span> * <span class="keyword">from</span> students</span><br><span class="line">&lt;/<span class="keyword">sql</span>&gt;</span><br><span class="line">&lt;<span class="keyword">select</span> <span class="keyword">id</span>=<span class="string">"selectAll"</span> resultMap=<span class="string">"studentResultMap"</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">include</span> refid=<span class="string">"defaultSelect"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><p>更多动态 SQL 标签，请查看：<a href="http://www.mybatis.org/mybatis-3/dynamic-sql.html" target="_blank" rel="noopener">dynamic-sql</a></p></li></ul><h2 id="数据库表间关联"><a href="#数据库表间关联" class="headerlink" title="数据库表间关联"></a>数据库表间关联</h2><p>在关系型数据中，表与表之间存在三种关系：一对一，一对多（多对一）和多对多。下面我们分别针对这三种关联关系给出具体配置。</p><p>前提：还是以上文入门案例作为示例，入门案例中已有一张表<code>students</code>，下面我们再创建一张表<code>classes</code>,并将字段<code>stu_id</code>作为指向表<code>students.id</code>的外键：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`classes`</span> (</span><br><span class="line">    -&gt; <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    -&gt; <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; <span class="string">`stu_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    -&gt; <span class="keyword">KEY</span> <span class="string">`stu_id`</span> (<span class="string">`stu_id`</span>),</span><br><span class="line">    -&gt; <span class="keyword">CONSTRAINT</span> <span class="string">`stu_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`stu_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`students`</span> (<span class="string">`id`</span>)</span><br><span class="line">    -&gt; ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>创建完表<code>classes</code>后，顺便插入几条数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes(<span class="keyword">name</span>,stu_id) <span class="keyword">values</span>(<span class="string">'一班'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes(<span class="keyword">name</span>,stu_id) <span class="keyword">values</span>(<span class="string">'二班'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes(<span class="keyword">name</span>,stu_id) <span class="keyword">values</span>(<span class="string">'三班'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes(<span class="keyword">name</span>,stu_id) <span class="keyword">values</span>(<span class="string">'四班'</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>然后，修改下<code>students</code>表：<br>1）先将表<code>students</code>的字段<code>cls</code>改为<code>class_id</code>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">change</span> <span class="keyword">column</span> cls class_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>2）然后将其列<code>class_id</code>修改为指向表<code>classes.id</code>的外键：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 禁用外键约束</span><br><span class="line">set foreign_key_checks&#x3D;0;</span><br><span class="line"># 修改列</span><br><span class="line">alter table students add constraint class_id foreign key(class_id) refererences classes(id);</span><br><span class="line"># 启用外键约束</span><br><span class="line">set foreign_key_checks&#x3D;1;</span><br></pre></td></tr></table></figure><p>至此，现数据库中总共有2张表：<code>students</code>和<code>classes</code>，且<code>students.class_id</code>指向表<code>classes.id</code>，表<code>classes.stu_id</code>指向表<code>students.id</code>。</p><p>最后，在 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 中以代码方式实现对表<code>classes</code>的操作，完整代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; com.yn.bean.Classes.java</span><br><span class="line">public class Classes implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int studentId;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getStudentId() &#123;</span><br><span class="line">        return studentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStudentId(int studentId) &#123;</span><br><span class="line">        this.studentId &#x3D; studentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Classes&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, studentId&#x3D;&quot; + studentId +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; com.yn.interfaces.IClassesDao.java</span><br><span class="line">public interface IClassesDao &#123;</span><br><span class="line">&#x2F;&#x2F;    查：查询所有</span><br><span class="line">    List&lt;Classes&gt; selectAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 全局配置文件：MyBatis.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">	&lt;!--直接使用 package 标签导入全部配置映射文件--&gt;</span><br><span class="line">        &lt;package name&#x3D;&quot;com.yn.interfaces&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; resources&#x2F;com&#x2F;yn&#x2F;interfaces&#x2F;IClassesDao.xml</span><br><span class="line">...</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.interfaces.IClassesDao&quot;&gt;</span><br><span class="line">    &lt;resultMap id&#x3D;&quot;classesMap&quot; type&#x3D;&quot;com.yn.bean.Classes&quot;&gt;</span><br><span class="line">        &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot; &#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;studentId&quot; column&#x3D;&quot;stu_id&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectAll&quot; resultMap&#x3D;&quot;classesMap&quot;&gt;</span><br><span class="line">        select * from classes;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>到此，我们的准备工作已算完成了，接下来就可以开始进入 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 建立表关联操作的实操。</p><ul><li><strong>一对一关联</strong>：一个学生对应一个班级，因此，学生表<code>students</code>与班级表<code>classes</code>的关联关系即为一对一。具体到 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 中，这种关联体现的实现步骤如下:</li></ul><ol><li>表<code>students</code>对应的 POJO 类为<code>Student</code>，每个学生对应一个班级，因此，学生和班级的一对一关联关系在 Java 代码的体现只需为类<code>Student</code>内部添加一个<code>Classes</code>成员即可：<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.yn.bean.Student.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> classId;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    一对一关联：一个学生对应一个班级</span></span><br><span class="line">    <span class="keyword">private</span> Classes cls;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Classes <span class="title">getCls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCls</span><span class="params">(Classes cls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cls = cls;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">``` </span><br><span class="line"><span class="number">2</span>. 然后配置映射文件使用标签`association`表示一对一关联：</span><br><span class="line">```xml</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.yn.interfaces.IStudentsDao"</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;resultMap id=<span class="string">"studentClassMap"</span> type=<span class="string">"com.yn.bean.Student"</span>&gt;</span><br><span class="line">        &lt;!--配置 Student 输出映射--&gt;</span><br><span class="line">        &lt;result property=<span class="string">"name"</span> column=<span class="string">"name"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"classId"</span> column=<span class="string">"class_id"</span>/&gt;</span><br><span class="line">        &lt;!--一对一关联：配置 Classes 输出映射--&gt;</span><br><span class="line">        &lt;association property=<span class="string">"cls"</span> column=<span class="string">"class_id"</span> javaType=<span class="string">"com.yn.bean.Classes"</span>&gt;</span><br><span class="line">            &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span> /&gt;</span><br><span class="line">            &lt;!--select classes.name as classname--&gt;</span><br><span class="line">            &lt;result property=<span class="string">"name"</span> column=<span class="string">"classname"</span>/&gt;</span><br><span class="line">            &lt;!--这里可以不配置，因为 sql 语句并没有输出该字段内容--&gt;</span><br><span class="line">            &lt;result property=<span class="string">"studentId"</span> column=<span class="string">"stu_id"</span> /&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultMap=<span class="string">"studentClassMap"</span>&gt;</span><br><span class="line">        select s.*,c.name as classname from students s,classes c where s.class_id=c.id;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>到这里，我们就已经完成了一对一关联关系表的建立。</li></ol><ul><li><strong>一对多关联</strong>：一个班级可以有多个学生，因此班级表<code>classes</code>与学生表<code>students</code>的关系即为一对多关系。具体到 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 中，一对多的关联实现步骤如下所示：</li></ul><ol><li>由于一个班级有多个学生，此种一对多的关系在 Java 代码的体现就是：类<code>Classes</code>内部维护一个<code>Students</code>集合：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; com.yn.bean.Classes.java</span><br><span class="line">public class Classes implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int studentId;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    一对多关联：一个班级有多个学生</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">    public List&lt;Student&gt; getStudents() &#123;</span><br><span class="line">        return students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStudents(List&lt;Student&gt; students) &#123;</span><br><span class="line">        this.students &#x3D; students;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>然后配置映射文件中使用标签<code>collection</code>表示一对多关联：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// resources/com/yn/interfaces/IClassesDao.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yn.interfaces.IClassesDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"classStudentsMap"</span> <span class="attr">type</span>=<span class="string">"com.yn.bean.Classes"</span>&gt;</span></span><br><span class="line">  	    <span class="comment">&lt;!--配置 Classes 字段映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--select classes.name as classname--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"classname"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"studentId"</span> <span class="attr">column</span>=<span class="string">"stu_id"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一对多关联：配置 Student 映射--&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!--ofType表示集合内部元素--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"com.yn.bean.Student"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"classId"</span> <span class="attr">column</span>=<span class="string">"class_id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"classStudentsMap"</span>&gt;</span></span><br><span class="line">        select * from classes</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>到这里，我们就已经完成了一对多关联关系的建立。</li></ol><p>在讲解 <strong>多对多关联</strong> 前，我们先创建2张表：</p><ol><li>老师表<code>teachers</code>，用于存储教师信息：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table if not exists teachers (</span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(20) not null,</span><br><span class="line">    -&gt; sex varchar(10) default &#39;male&#39;</span><br><span class="line">    -&gt; ) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"># 插入一些数据</span><br><span class="line">insert into teachers(name,sex) values(&#39;张三&#39;,&#39;male&#39;);</span><br><span class="line">insert into teachers(name,sex) values(&#39;李四&#39;,&#39;female&#39;);</span><br><span class="line">insert into teachers(name,sex) values(&#39;王五&#39;,&#39;male&#39;);</span><br></pre></td></tr></table></figure></li><li>然后需要再创建一张中间表（因为多对多关联需要一张中间表进行连接），称为：<code>stu_tea</code>，其内部之包含两个字段：<code>sid</code>和<code>tid</code>，分别作为指向表<code>studnets.id</code>和表<code>teachers.id</code>的外键：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table if not exists &#96;stu_tea&#96; (</span><br><span class="line">	-&gt; &#96;sid&#96; int not null,</span><br><span class="line">	-&gt;  &#96;tid&#96; int not null,</span><br><span class="line">	-&gt;  primary key (&#96;sid&#96;,&#96;tid&#96;),</span><br><span class="line">	-&gt; foreign key (&#96;sid&#96;) references &#96;students&#96; (&#96;id&#96;),</span><br><span class="line">	-&gt; foreign key (&#96;tid&#96;) references &#96;teachers&#96; (&#96;id&#96;)</span><br><span class="line">	-&gt; ) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"># 插入一些数据</span><br><span class="line">insert into stu_tea (sid,tid) values (1,1),(1,3),(2,2),(4,1),(4,2);</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>多对多关联</strong>： 一个学生可以有多个老师，一个老师也可以有多个学生。因此，老师与学生的关系是多对多关联。</li></ul><ol><li>首先从老师角度来说，其对应多个学生，在 Java 代码上的体现为：POJO 类<code>Teacher</code>内部维护一个<code>Student</code>集合，完整代码如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; com.yn.bean.Teacher.java</span><br><span class="line">public class Teacher implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    多对多关联：一个老师对应多个学生</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line">    </span><br><span class="line">    public List&lt;Student&gt; getStudents() &#123;</span><br><span class="line">        return students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStudents(List&lt;Student&gt; students) &#123;</span><br><span class="line">        this.students &#x3D; students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex &#x3D; sex;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Teacher&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, sex&#x3D;&#39;&quot; + sex + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; com.yn.interfaces.ITeacherDao.java</span><br><span class="line">public interface ITeacherDao &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Teacher&gt; selectAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 全局配置文件：resources&#x2F;MyBatisConfig.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;package name&#x3D;&quot;com.yn.interfaces&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; com.yn.interfaces.ITeacherDao.xml</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.interfaces.ITeacherDao&quot;&gt;</span><br><span class="line">    &lt;resultMap id&#x3D;&quot;teacherStudentsMap&quot; type&#x3D;&quot;com.yn.bean.Teacher&quot;&gt;</span><br><span class="line">        &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot;&#x2F;&gt;</span><br><span class="line">        &lt;collection property&#x3D;&quot;students&quot; ofType&#x3D;&quot;com.yn.bean.Student&quot;&gt;</span><br><span class="line">            &lt;!--select students.name as sname--&gt;</span><br><span class="line">            &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;sname&quot;&#x2F;&gt;</span><br><span class="line">            &lt;!--select students.sex as ssex--&gt;</span><br><span class="line">            &lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;ssex&quot;&#x2F;&gt;</span><br><span class="line">            &lt;result property&#x3D;&quot;classId&quot; column&#x3D;&quot;class_id&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;collection&gt;</span><br><span class="line">    &lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectAll&quot; resultMap&#x3D;&quot;teacherStudentsMap&quot;&gt;</span><br><span class="line">        select t.*,s.name as sname,s.sex as ssex,s.class_id from teachers t</span><br><span class="line">        left outer join stu_tea st on t.id&#x3D;st.tid</span><br><span class="line">        left outer join students s on s.id&#x3D;st.sid</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; junit test</span><br><span class="line">@Test</span><br><span class="line">public void selectAll() &#123;</span><br><span class="line">	List&lt;Teacher&gt; teachers &#x3D; this.teacherDaoProxy.selectAll();</span><br><span class="line">	for(Teacher teacher: teachers)&#123;</span><br><span class="line">		System.out.println(teacher);</span><br><span class="line">		for(Student s : teacher.getStudents())&#123;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>从学生角度来讲，其对应多个老师，在 Java 代码上的体现为：POJO 类<code>Student</code>内部维护一个<code>Teacher</code>集合：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; com.yn.bean.Student.java</span><br><span class="line">public class Student implements Serializable &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private int classId;</span><br><span class="line">&#x2F;&#x2F;    一对一关联：一个学生对应一个班级</span><br><span class="line">    private Classes cls;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    多对多关联：一个学生对应多个老师</span><br><span class="line">    private List&lt;Teacher&gt; teachers;</span><br><span class="line"></span><br><span class="line">    public List&lt;Teacher&gt; getTeachers() &#123;</span><br><span class="line">        return teachers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTeachers(List&lt;Teacher&gt; teachers) &#123;</span><br><span class="line">        this.teachers &#x3D; teachers;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; com.yn.interfaces.IStudentsDao.xml</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.interfaces.IStudentsDao&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;resultMap id&#x3D;&quot;studentTeachersMap&quot; type&#x3D;&quot;com.yn.bean.Student&quot;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot; &#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;classId&quot; column&#x3D;&quot;class_id&quot; &#x2F;&gt;</span><br><span class="line">        &lt;collection property&#x3D;&quot;teachers&quot; ofType&#x3D;&quot;com.yn.bean.Teacher&quot;&gt;</span><br><span class="line">            &lt;!--select teachers.name as tname--&gt;</span><br><span class="line">            &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;tname&quot; &#x2F;&gt;</span><br><span class="line">            &lt;!--select teachers.sex as tsex--&gt;</span><br><span class="line">            &lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;tsex&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;collection&gt;</span><br><span class="line">    &lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectAll&quot; resultMap&#x3D;&quot;studentTeachersMap&quot;&gt;</span><br><span class="line">        select s.name,s.sex,s.class_id,t.name as tname,t.sex as tsex from students s</span><br><span class="line">        left outer join stu_tea st on s.id&#x3D;st.sid</span><br><span class="line">        left outer join teachers t on t.id &#x3D;st.tid</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; junit test</span><br><span class="line">@Test</span><br><span class="line">public void testSelectAll() throws IOException &#123;</span><br><span class="line">	List&lt;Student&gt; students &#x3D; this.studentsDaoProxy.selectAll();</span><br><span class="line">	for (Student student : students) &#123;</span><br><span class="line">		System.out.println(student);</span><br><span class="line">		for(Teacher teacher : student.getTeachers())&#123;</span><br><span class="line">			System.out.println(teacher);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>到此，<a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 中对于数据库表间的关联关系处理已基本完成。</li></ol><h2 id="关联表加载模式"><a href="#关联表加载模式" class="headerlink" title="关联表加载模式"></a>关联表加载模式</h2><p>首先了解下两个概念：</p><ul><li><strong>立即加载</strong>：表间关联时，加载主表时，同时加载关联表。</li><li><strong>延迟加载</strong>：也即按需加载，关联表数据只有在使用到的时候，才进行加载。</li></ul><p>正如我们上文提到的关系型数据库中，各表间可能存在一定的关联关系。比如一对多关联时，当我们查询主表数据时，此时对于关联表而言，就存在两种操作：<br>1）<strong>立即加载</strong>：查询主表数据时，同时也对关联表数据进行查询。即主副表查询是<strong>同步</strong>的。<br>2）<strong>延迟加载</strong>：查询主表数据时，不进行关联表数据查询。后续要使用到关联表数据时，才进行查询。即主副表查询是<strong>异步</strong>的。</p><p>通常而言，对于 N对一 的关联关系，建议使用 <strong>立即加载</strong>（可认为关联表数据量小）。<br>对于 N对多 的关联关系，建议使用 <strong>延迟加载</strong>（可认为关联表数据量大）。</p><p>在 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 中，开启延迟加载的步骤如下：</p><ol><li>首先在全局配置文件中开启全局延迟加载模式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; resources&#x2F;MyBatisConfig.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!--    导入外部配置文件--&gt;</span><br><span class="line">    &lt;properties resource&#x3D;&quot;db.properties&quot; &#x2F;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;!--延迟加载：true--&gt;</span><br><span class="line">        &lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--立即加载：false--&gt;</span><br><span class="line">        &lt;setting name&#x3D;&quot;aggressiveLazyLoading&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;settings&gt;</span><br><span class="line">	...</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure></li><li>通过提供<code>select</code>属性，配置关联表的数据获取（延迟）方法，因为是关系型数据库，关联表的数据获取通常都是通过主表的外键作为其参数，所提提供的方法的参数即为主表外键值，其由<code>column</code>属性指定。</li></ol><p>比如，按上文学生表<code>students</code>和班级表<code>classes</code>的一对一关联来说，其配置如下：<br>1）因为要开启延迟加载，因此主表（即表<code>students</code>）操作（SQL 语句）不需要考虑关联表：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--com&#x2F;yn&#x2F;interfaces&#x2F;IStudentsDao.xml--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;selectAll&quot; resultMap&#x3D;&quot;studentClassMap&quot;&gt;</span><br><span class="line">	select * from students</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>2）然后，关联表（即表<code>classes</code>）要提供关联查询方法，因主表（即表<code>students</code>）是通过外键（<code>class_id</code>）关联副表（即表<code>classes</code>），因此副表需要提供<code>selectById(int cid)</code>方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; com.yn.interfaces.IStudentsDao.java</span><br><span class="line">public interface IClassesDao &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    查：查询所有</span><br><span class="line">    List&lt;Classes&gt; selectAll();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    提供通过班级id 关联查询方法</span><br><span class="line">    Classes selectById(Integer cid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--com&#x2F;yn&#x2F;interfaces&#x2F;IClassesDao.xml--&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.interfaces.IClassesDao&quot;&gt;</span><br><span class="line">    &lt;resultMap id&#x3D;&quot;classesMap&quot; type&#x3D;&quot;com.yn.bean.Classes&quot;&gt;</span><br><span class="line">        &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot; &#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;studentId&quot; column&#x3D;&quot;stu_id&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectById&quot; parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;classesMap&quot;&gt;</span><br><span class="line">        select * from classes where id&#x3D;#&#123;cid&#125;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>3）最后，通过<code>select</code>属性和<code>column</code>属性为主表提供副表数据获取（延迟加载）方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--com&#x2F;yn&#x2F;interfaces&#x2F;IStudentsDao.xml--&gt;</span><br><span class="line">&lt;resultMap id&#x3D;&quot;studentClassMap&quot; type&#x3D;&quot;com.yn.bean.Student&quot;&gt;</span><br><span class="line">	&lt;!--配置 Student 输出映射--&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;classId&quot; column&#x3D;&quot;class_id&quot;&#x2F;&gt;</span><br><span class="line">	&lt;!--一对一关联：配置 Classes 输出映射--&gt;</span><br><span class="line">	&lt;association property&#x3D;&quot;cls&quot; column&#x3D;&quot;class_id&quot; javaType&#x3D;&quot;com.yn.bean.Classes&quot; select&#x3D;&quot;com.yn.interfaces.IClassesDao.selectById&quot;&gt;</span><br><span class="line">	&lt;&#x2F;association&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure><p>到此，N对一 的配置就完成了。</p><p>而对于 N对多 的配置，其与 N对一 的配置是基本一致的。<br>比如还是按上文班级表<code>classes</code>和学生表<code>students</code>来说，他们是一对多的关系，即一个班级对应多个学生，那么其关联关系在 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 中的配置具体如下：<br>1）配置班级表<code>classes</code>数据获取 SQL 语句：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--com&#x2F;yn&#x2F;interfaces&#x2F;IClassesDao.xml--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;selectAll&quot; resultMap&#x3D;&quot;classStudentsMap&quot;&gt;</span><br><span class="line">	select * from classes</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>2）配置表<code>students</code>依据班级<code>id</code>获取学生数据方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; com.yn.interfaces.IStudentsDao.java</span><br><span class="line">public interface IStudentsDao &#123;</span><br><span class="line">	&#x2F;&#x2F; 一个班级 cid 对应多个学生</span><br><span class="line">    List&lt;Student&gt; selectById(Integer cid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--com&#x2F;yn&#x2F;interfaces&#x2F;IStudentsDao.xml--&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.interfaces.IStudentsDao&quot;&gt;</span><br><span class="line">    &lt;resultMap id&#x3D;&quot;studentResultMap&quot; type&#x3D;&quot;com.yn.bean.Student&quot;&gt;</span><br><span class="line">        &lt;constructor&gt;</span><br><span class="line">            &lt;arg column&#x3D;&quot;name&quot; javaType&#x3D;&quot;String&quot;&#x2F;&gt;</span><br><span class="line">            &lt;arg column&#x3D;&quot;sex&quot; javaType&#x3D;&quot;String&quot;&#x2F;&gt;</span><br><span class="line">            &lt;arg column&#x3D;&quot;class_id&quot; javaType&#x3D;&quot;_int&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;constructor&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;classId&quot; column&#x3D;&quot;class_id&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectById&quot; parameterType&#x3D;&quot;INT&quot; resultMap&#x3D;&quot;studentResultMap&quot;&gt;</span><br><span class="line">        select * from students where class_id&#x3D;#&#123;cid&#125;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>3）最后，为主表配置副表数据加载方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--com&#x2F;yn&#x2F;interfaces&#x2F;IClassesDao.xml--&gt;</span><br><span class="line">&lt;resultMap id&#x3D;&quot;classStudentsMap&quot; type&#x3D;&quot;com.yn.bean.Classes&quot;&gt;</span><br><span class="line">	&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot; &#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;studentId&quot; column&#x3D;&quot;stu_id&quot; &#x2F;&gt;</span><br><span class="line">	&lt;collection property&#x3D;&quot;students&quot; ofType&#x3D;&quot;com.yn.bean.Student&quot; column&#x3D;&quot;id&quot; select&#x3D;&quot;com.yn.interfaces.IStudentsDao.selectById&quot;&gt;</span><br><span class="line">	&lt;&#x2F;collection&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure><p>至此，N对多 的延迟加载特定已配置完成。</p><p><strong>注</strong>：我们上面在全局配置表中开启了全局延迟加载模式，所以对于所有的关联表，默认都会开启延迟加载，但是可以通过为标签<code>association</code>/<code>collection</code>添加<code>fetchType</code>来显示覆盖全局配置，其取值有两个：<code>eager</code>表示立即加载，<code>lazy</code>表示延迟加载。</p><p>比如，我们前面也提到过，对于 N对一 关联的数据库表，通常使用的是立即加载模式，那么我们就可以按如下配置，启动立即加载：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--com&#x2F;yn&#x2F;interfaces&#x2F;IStudentsDao.xml--&gt;</span><br><span class="line">&lt;resultMap id&#x3D;&quot;studentClassMap&quot; type&#x3D;&quot;com.yn.bean.Student&quot;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;sex&quot; column&#x3D;&quot;sex&quot;&#x2F;&gt;</span><br><span class="line">	&lt;result property&#x3D;&quot;classId&quot; column&#x3D;&quot;class_id&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;association fetchType&#x3D;&quot;eager&quot; property&#x3D;&quot;cls&quot; column&#x3D;&quot;class_id&quot; javaType&#x3D;&quot;com.yn.bean.Classes&quot; select&#x3D;&quot;com.yn.interfaces.IClassesDao.selectById&quot;&gt;</span><br><span class="line">	&lt;&#x2F;association&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>对访问频繁且不常变化的数据进行缓存，可以减少与数据库的交互，提高执行效率。</p><p><a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 为我们提供了两种缓存功能：</p><ul><li><strong>一级缓存</strong>：也成为 <strong>本地缓存</strong>，由<code>SqlSession</code>对象实例负责缓存。使用同一个<code>SqlSession</code>实例进行同一查询，后续的查询结果都是从一级缓存中获取。但该<code>SqlSession</code>实例销毁时，缓存随之销毁。</li></ul><p><strong>注</strong>：对于一级缓存而言，其有如下特性：</p><ol><li>一级缓存默认开启</li><li>一级缓存其实内部是一个<code>Map</code>结构，其缓存的是对象实例（相应 POJO 类实例）</li><li>但调用<code>SqlSession</code>的增加，修改，删除，commit(),close()等方法时，其一级缓存会被清空</li></ol><ul><li><strong>二级缓存</strong>：由<code>SqlSessionFactory</code>对象实例负责缓存。由同一个<code>SqlSessionFactory</code>实例生产的<code>SqlSession</code>对象实例共享该二级缓存。</li></ul><p><strong>注</strong>：对于二级缓存而言，其有如下特性：</p><ol><li>二级缓存默认不开启。手动开启方法如下：<br>1）全局配置文件中开启二级缓存（可选操作，因为默认已开启）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--resources&#x2F;MyBatisConfig.xml--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;!-- 开启二级缓存 --&gt;</span><br><span class="line">        &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;settings&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>2）在当前配置映射文件中开启二级缓存：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--com&#x2F;yn&#x2F;interfaces&#x2F;IClassesDao.xml--&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.interfaces.IClassesDao&quot;&gt;</span><br><span class="line">    &lt;!--配置映射文件开启二级缓存--&gt;</span><br><span class="line">    &lt;cache &#x2F;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>3）在当前数据库操作中开启二级缓存（注：POJO 类需要实现序列化接口）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--com&#x2F;yn&#x2F;interfaces&#x2F;IClassesDao.xml--&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.yn.interfaces.IClassesDao&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;!--操作开启二级缓存--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;selectAll&quot; resultMap&#x3D;&quot;classStudentsMap&quot; useCache&#x3D;&quot;true&quot;&gt;</span><br><span class="line">        select * from classes</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure></li><li>二级缓存工作机制：在会话中，进行查询只会将结果保存到一级缓存中。只有当会话关闭时，才会将一级缓存的内容保存到二级缓存中（序列化）。</li><li><strong>二级缓存缓存的是数据（即序列化）</strong>,也即 SQL 操作从二级缓存获取数据后，再重新组装成对象实例（序列化）。而一级缓存直接缓存的就是对象实例。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>下面列举一些常用配置具体实现：</p><ul><li><p><strong>主键自增</strong>：对于插入语句，如果数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server）：比如我们上文入门案例中的使用自增字段<code>id</code>作为表<code>students</code>的主键。那么此时，可以设置 <code>useGeneratedKeys=”true”</code>，然后再把<code>keyProperty</code>设置到目标属性上就 OK 了：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"student"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    insert into students(name,sex,cls) values(#&#123;name&#125;,#&#123;sex&#125;,#&#123;cls&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果数据库还支持多行插入，那么我们可以传入一个<code>Student</code>数组或者集合，并返回自动生成的主键：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface IStudentsDao &#123;</span><br><span class="line">    ...</span><br><span class="line">    void addAll(List&lt;Student&gt; students);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- IStudentsDao.xml --&gt;</span><br><span class="line">&lt;insert id&#x3D;&quot;addAll&quot; parameterType&#x3D;&quot;java.util.List&quot; useGeneratedKeys&#x3D;&quot;true&quot; keyProperty&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    insert into students(name,sex,cls) values</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;list&quot; item&#x3D;&quot;stu&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">        (#&#123;stu.name&#125;,#&#123;stu.sex&#125;,#&#123;stu.cls&#125;)</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>结果映射</strong>：通常来说，我们自定义的 Java Bean 的成员应该与数据库表的字段名称一致，这样 <a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 就能自动地帮我们进行数据转换。但在实际开发中，往往会出现 Java Bean 的成员名称与数据库表字段名称不一致的情况：比如，我们将上文入门案例的数据库表<code>students</code>的<code>cls</code>字段更改为<code>class</code>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">change</span> <span class="keyword">column</span> cls <span class="keyword">class</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>现在，<code>Student</code>的成员<code>cls</code>就无法匹配数据库表<code>students</code>的<code>class</code>字段了，我们先查看下表<code>students</code>的内容：</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2222997-331ae7384a3dcc8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然后我们在运行一下获取操作：<code>selectAll()</code>，结果如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2222997-d2a615e70e49ad34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到，数据库的<code>class</code>字段获取不到了。因此，这里我们需要配置<code>Student</code>的<code>cls</code>成员到数据库表<code>students</code>的<code>class</code>字段的映射：比如，我们可以通过更改 Sql 语句来让数据库表<code>students.class</code>字段映射到<code>Student.cls</code>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">    select id,name,sex,class as cls from students</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，Sql 语句的配置会显得繁琐些，尤其当需要配置字段较多的时候，因此，<a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">MyBatis</a> 已经为我们提供了相关方法（<code>resultMap</code>）解决这个问题，其具体配置如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yn.interfaces.IStudentsDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置mysql表列名与实体类属性的映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"studentResultMap"</span> <span class="attr">type</span>=<span class="string">"com.yn.bean.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主键使用标签 id --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;id property="id" column="id"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property指Java Bean成员，column指对应数据库字段名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cls"</span> <span class="attr">column</span>=<span class="string">"class"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"studentResultMap"</span>&gt;</span></span><br><span class="line">        select * from students;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实就是配置一个<code>resultMap</code>，并将该<code>resultMap</code>放置到所需方法中即可。</p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>m3u8格式详解</title>
    <url>/post/2018/11/07/m3u8%E6%A0%BC%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<!-- build time:Tue Feb 11 2020 02:20:22 GMT+0800 (China Standard Time) --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/M3U#M3U8" target="_blank" rel="noopener">M3U8</a> 是 Unicode 版本的 <a href="https://zh.wikipedia.org/wiki/M3U" target="_blank" rel="noopener">M3U</a>，用 UTF-8 编码。”M3U” 和 “M3U8” 文件都是苹果公司使用的 <a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HTTP Live Streaming（HLS）</a> 协议格式的基础，这种协议格式可以在 iPhone 和 Macbook 等设备播放。</p></blockquote><a id="more"></a><p>上述文字定义来自于<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">维基百科</a>。可以看到，<a href="https://zh.wikipedia.org/wiki/M3U#M3U8" target="_blank" rel="noopener">m3u8</a> 文件其实是 <a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HTTP Live Streaming（缩写为 HLS）</a> 协议的部分内容，而 <a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HLS</a> 是一个由苹果公司提出的基于 <a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a> 的<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%AA%92%E4%BD%93" target="_blank" rel="noopener">流媒体</a><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">网络传输协议</a>。</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HLS</a> 的工作原理是把整个流分成一个个小的基于 <a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a> 的文件来下载，每次只下载一些。当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。在开始一个流媒体会话时，客户端会下载一个包含元数据的 extended M3U (m3u8) playlist文件，用于寻找可用的媒体流。<br><a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HLS</a> 只请求基本的 <a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a> 报文，与<a href="https://zh.wikipedia.org/wiki/%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">实时传输协议（RTP）</a>不同，<a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HLS</a> 可以穿过任何允许 <a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a> 数据通过的防火墙或者代理服务器。它也很容易使用<a href="https://zh.wikipedia.org/wiki/%E5%85%A7%E5%AE%B9%E5%88%86%E7%99%BC%E7%B6%B2%E7%B5%A1" target="_blank" rel="noopener">内容分发网络</a>来传输媒体流。</p></blockquote><p>简而言之，<a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HLS</a> 是新一代流媒体传输协议，其基本实现原理为将一个大的媒体文件进行分片，将该分片文件资源路径记录于 m3u8 文件（即 playlist）内，其中附带一些额外描述（比如该资源的多带宽信息···）用于提供给客户端。客户端依据该 m3u8 文件即可获取对应的媒体资源，进行播放。</p><p>因此，客户端获取 <a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HLS</a> 流文件，主要就是对 m3u8 文件进行解析操作。</p><p>那么，下面就简单介绍下 m3u8 文件。</p><h2 id="M3U8-文件简介"><a href="#M3U8-文件简介" class="headerlink" title="M3U8 文件简介"></a>M3U8 文件简介</h2><p>m3u8 文件实质是一个播放列表（playlist），其可能是一个媒体播放列表（Media Playlist），或者是一个主列表（Master Playlist）。但无论是哪种播放列表，其内部文字使用的都是 utf-8 编码。</p><p>当 m3u8 文件作为媒体播放列表（Meida Playlist）时，其内部信息记录的是一系列媒体片段资源，顺序播放该片段资源，即可完整展示多媒体资源。其格式如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-TARGETDURATION:10</span><br><span class="line"></span><br><span class="line">#EXTINF:9.009,</span><br><span class="line">http:&#x2F;&#x2F;media.example.com&#x2F;first.ts</span><br><span class="line">#EXTINF:9.009,</span><br><span class="line">http:&#x2F;&#x2F;media.example.com&#x2F;second.ts</span><br><span class="line">#EXTINF:3.003,</span><br><span class="line">http:&#x2F;&#x2F;media.example.com&#x2F;third.ts</span><br></pre></td></tr></table></figure><p>对于点播来说，客户端只需按顺序下载上述片段资源，依次进行播放即可。而对于直播来说，客户端需要定时重新请求该 m3u8 文件，看下是否有新的片段数据需要进行下载并播放。</p><p>当 m3u8 作为主播放列表（Master Playlist）时，其内部提供的是同一份媒体资源的多份流列表资源（Variant Strean）。其格式如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-STREAM-INF:BANDWIDTH&#x3D;150000,RESOLUTION&#x3D;416x234,CODECS&#x3D;&quot;avc1.42e00a,mp4a.40.2&quot;</span><br><span class="line">http:&#x2F;&#x2F;example.com&#x2F;low&#x2F;index.m3u8</span><br><span class="line">#EXT-X-STREAM-INF:BANDWIDTH&#x3D;240000,RESOLUTION&#x3D;416x234,CODECS&#x3D;&quot;avc1.42e00a,mp4a.40.2&quot;</span><br><span class="line">http:&#x2F;&#x2F;example.com&#x2F;lo_mid&#x2F;index.m3u8</span><br><span class="line">#EXT-X-STREAM-INF:BANDWIDTH&#x3D;440000,RESOLUTION&#x3D;416x234,CODECS&#x3D;&quot;avc1.42e00a,mp4a.40.2&quot;</span><br><span class="line">http:&#x2F;&#x2F;example.com&#x2F;hi_mid&#x2F;index.m3u8</span><br><span class="line">#EXT-X-STREAM-INF:BANDWIDTH&#x3D;640000,RESOLUTION&#x3D;640x360,CODECS&#x3D;&quot;avc1.42e00a,mp4a.40.2&quot;</span><br><span class="line">http:&#x2F;&#x2F;example.com&#x2F;high&#x2F;index.m3u8</span><br><span class="line">#EXT-X-STREAM-INF:BANDWIDTH&#x3D;64000,CODECS&#x3D;&quot;mp4a.40.5&quot;</span><br><span class="line">http:&#x2F;&#x2F;example.com&#x2F;audio&#x2F;index.m3u8</span><br></pre></td></tr></table></figure><p>该备用流资源指定了多种不同码率，不同格式的媒体播放列表，并且，该备用流资源也可同时提供不同版本的资源内容，比如不同语言的音频文件，不同角度拍摄的视屏文件等等。客户可以根据不同的网络状态选取合适码流的资源，并且最好根据用户喜好选择合适的资源内容。</p><p>更多详细内容，可查看：</p><ul><li><a href="https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/creating_a_master_playlist" target="_blank" rel="noopener">Creating a Master Playlist</a></li><li><a href="https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist" target="_blank" rel="noopener">Adding Alternate Media to a Playlist</a></li></ul><p>以上，就是 m3u8 文件的大概内容。下面，我们就对 m3u8 内容格式进行讲解。</p><h2 id="m3u8-文件格式简解"><a href="#m3u8-文件格式简解" class="headerlink" title="m3u8 文件格式简解"></a>m3u8 文件格式简解</h2><p>m3u8 的文件格式主要包含三方面内容：</p><ol><li><strong><a href="https://tools.ietf.org/html/rfc8216#page-10" target="_blank" rel="noopener">文件播放列表格式定义</a></strong>：播放列表（Playlist，也即 m3u8 文件） 内容需严格满足<a href="https://tools.ietf.org/html/rfc8216#page-10" target="_blank" rel="noopener">规范定义</a>所提要求。下面罗列一些主要遵循的条件：</li></ol><p>&ensp;☛ m3u8 文件必须以 utf-8 进行编码，不能使用 Byte Order Mark（BOM）字节序， 不能包含 utf-8 控制字符（U+0000 ~ U_001F 和 U+007F ~ u+009F）。</p><p>&ensp;☛ m3u8 文件的每一行要么是一个 URI，要么是空行，要么就是以 <strong>#</strong> 开头的字符串。不能出现空白字符，除了显示声明的元素。</p><p>&ensp;☛ m3u8 文件中以 <strong>#</strong> 开头的字符串要么是注释，要么就是标签。标签以 <strong>#EXT</strong> 开头，大小写敏感。</p><ol start="2"><li><strong><a href="https://tools.ietf.org/html/rfc8216#page-11" target="_blank" rel="noopener">属性列表（Attribute Lists）</a></strong>：默写特定的标签拥有值，这些值即为属性列表。标签后面的属性列表以 <em>逗号</em> 作为分隔符，分离出多组不带空格的 <em>属性/值</em> 对。</li></ol><p><strong>属性/值</strong> 对的语法格式如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AttributeName&#x3D;AttributeValue</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p><strong>属性<code>AttributeName</code></strong>是由 [A..Z],[0..9] 和 <code>-</code> 组成的不带引号的字符串。因此，<strong>属性<code>AttributeName</code>只能使用大写字母，不能使用小写字母</strong>，并且<code>AttributeName</code>和<code>=</code>中间不能有空格，同理，<code>=</code>和<code>AttributeValue</code>之间也不能有空格。</p></li><li><p><strong>值<code>AttributeValue</code></strong>的只能取以下类型：<br>☛ <strong>十进制整型（decimal-interger）</strong>：由 [0..9] 之间组成的十进制不带引号的字符串，范围为 0 ~ 2^64（18446744073709551615），字符长度为 1 ~ 20 之间。<br>☛ <strong>十六进制序列</strong>：由 [0..9] 和 [A..F] 且前缀为 0x 或 0X 组合成的不带引号的字符串。其序列的最大长度取决于他的属性名<code>AttributeNames</code>。<br>☛ <strong>带符号十进制浮点型（signed-decimal-floating-point）</strong>：由 [0..9]，<code>-</code>和<code>.</code>组合成的不带引号的字符串。<br>☛ <strong>字符串（quoted-string）</strong>：由双引号包裹表示的字符串。其中，0xA，0xD 和 双引号<code>&quot;</code>不能出现在该字符串中。该字符串区分大小写。<br>☛ <strong>可枚举字符串（enumerated-string）</strong>：由<code>AttributeName</code>显示定义的一系列不带引号的字符串。该字符串不能包含双引号<code>&quot;</code>，逗号<code>,</code>和空白字符。<br>☛ <strong>decimal-resolution</strong>：由字符<code>x</code>进行隔离的两个十进制整型数。第一个整型表示水平宽度大小，第二个整型数表示垂直方向高度大小（单位：像素）。</p></li></ul><ol start="3"><li><strong><a href="https://tools.ietf.org/html/rfc8216#page-12" target="_blank" rel="noopener">标签</a></strong>：标签用于指定 m3u8 文件的全局参数或在其后面的切片文件/媒体播放列表的一些信息。</li></ol><p>标签的类型可分为五种类型：<strong><a href="https://tools.ietf.org/html/rfc8216#section-4.3.1" target="_blank" rel="noopener">基础标签（Basic Tags）</a></strong>，<strong><a href="https://tools.ietf.org/html/rfc8216#page-13" target="_blank" rel="noopener">媒体片段类型标签（Media Segment Tags）</a></strong>，<strong><a href="https://tools.ietf.org/html/rfc8216#page-22" target="_blank" rel="noopener">媒体播放列表类型标签</a></strong>，<strong><a href="https://tools.ietf.org/html/rfc8216#page-25" target="_blank" rel="noopener">主播放列表类型标签</a></strong> 和 <strong><a href="https://tools.ietf.org/html/rfc8216#page-35" target="_blank" rel="noopener">播放列表类型标签</a></strong>。其具体内容如下所示：</p><ul><li><p><strong><a href="https://tools.ietf.org/html/rfc8216#section-4.3.1" target="_blank" rel="noopener">基础标签（Basic Tags）</a></strong>：可同时适用于媒体播放列表（Media Playlist）和主播放列表（Master Playlist）。具体标签如下：<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-12" target="_blank" rel="noopener">EXTM3U</a></strong>：表明该文件是一个 m3u8 文件。每个 <a href="https://zh.wikipedia.org/wiki/M3U" target="_blank" rel="noopener">M3U</a> 文件必须将该标签放置在第一行。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-12" target="_blank" rel="noopener">EXT-X-VERSION</a></strong>：表示 <a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HLS</a> 的协议版本号，该标签与流媒体的兼容性相关。该标签为全局作用域，使能整个 m3u8 文件；每个 m3u8 文件内最多只能出现一个该标签定义。如果 m3u8 文件不包含该标签，则默认为协议的第一个版本。</p></li><li><p><strong><a href="https://tools.ietf.org/html/rfc8216#page-13" target="_blank" rel="noopener">媒体片段类型标签（Media Segment Tags）</a></strong>：每个切片 URI 前面都有一系列媒体片段标签对其进行描述。有些片段标签只对其后切片资源有效；有些片段标签对其后所有切片都有效，直到后续遇到另一个该标签描述。<strong>媒体片段类型标签不能出现在主播放列表（Master Playlist）中</strong>。具体标签如下：<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-13" target="_blank" rel="noopener">EXTINF</a></strong>：表示其后 URL 指定的媒体片段时长（单位为秒）。每个 URL 媒体片段之前必须指定该标签。该标签的使用格式为：<code>#EXTINF:&lt;duration&gt;,[&lt;title&gt;]</code>,其中，参数<code>duration</code>可以为十进制的整型或者浮点型，其值必须小于或等于 <strong>EXT-X-TARGETDURATION</strong> 指定的值（注：建议始终使用浮点型指定时长，这可以让客户端在定位流时，减少四舍五入错误。但是如果兼容版本号 <strong>EXT-X-VERSION</strong> 小于 3，那么必须使用整型）。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-14" target="_blank" rel="noopener">EXT-X-BYTERANGE</a></strong>：该标签表示接下来的切片资源是其后 URI 指定的媒体片段资源的局部范围（即截取 URI 媒体资源部分内容作为下一个切片）。该标签只对其后一个 URI 起作用。其格式为：<code>#EXT-X-BYTERANGE:&lt;n&gt;[@&lt;o&gt;]</code>，其中，<code>n</code>是一个十进制整型，表示截取片段大小（单位：字节）。可选参数<code>o</code>也是一个十进制整型，指示截取起始位置（以字节表示，在 URI 指定的资源开头移动该字节位置后进行截取）。如果<code>o</code>未指定，则截取起始位置从上一个该标签截取完成的下一个字节（即上一个<code>n+o+1</code>）开始截取。<br>如果没有指定该标签，则表明的切分范围为整个 URI 资源片段。<br>注：使用 <strong>EXT-X-BYTERANGE</strong> 标签要求兼容版本号 <strong>EXT-X-VERSION</strong> 大于等于 4。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-14" target="_blank" rel="noopener">EXT-X-DISCONTINUITY</a></strong>：该标签表明其前一个切片与下一个切片之间存在中断。其格式为：<code>EXT-X-DISCONTINUITY</code>。当出现以下情况时，必须使用该标签：<br>☛ file format<br>☛ number, type, and identifiers of tracks<br>☛ timestamp sequence<br>当出现以下情况时，应该使用该标签：<br>☛ encoding parameters<br>☛ encoding sequence<br>注：<strong>EXT-X-DISCONTINUITY</strong> 的一个经典使用场景就是在视屏流中插入广告，由于视屏流与广告视屏流不是同一份资源，因此在这两种流切换时使用 <strong>EXT-X-DISCONTINUITY</strong> 进行指明，客户端看到该标签后，就会处理这种切换中断问题，让体验更佳。更多详细内容，请查看：<a href="https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/incorporating_ads_into_a_playlist" target="_blank" rel="noopener">Incorporating Ads into a Playlist</a><br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-15" target="_blank" rel="noopener">EXT-X-KEY</a></strong>：媒体片段可以进行加密，而该标签可以指定解密方法。该标签对所有 <em>媒体片段</em> 和 由标签 <strong>EXT-X-MAP</strong> 声明的围绕其间的所有 <em>媒体初始化块（Meida Initialization Section）</em> 都起作用，直到遇到下一个 <strong>EXT-X-KEY</strong>（若 m3u8 文件只有一个 <strong>EXT-X-KEY</strong> 标签，则其作用于所有媒体片段）。多个 <strong>EXT-X-KEY</strong> 标签如果最终生成的是同样的秘钥，则他们都可作用于同一个媒体片段。<br>该标签使用格式为：<code>#EXT-X-KEY:&lt;attribute-list&gt;</code>，属性列表可以包含如下几个键：<br>☛ <strong>METHOD</strong>：该值是一个可枚举的字符串，指定了加密方法。该键是必须参数。其值可为<code>NONE</code>，<code>AES-128</code>，<code>SAMPLE-AES</code>当中的一个。<br>其中：<code>NONE</code>表示切片未进行加密（此时其他属性不能出现）；<code>AES-128</code>表示表示使用 <a href="https://tools.ietf.org/html/rfc8216#ref-AES_128" target="_blank" rel="noopener">AES-128</a> 进行加密。<code>SAMPLE-AES</code>意味着媒体片段当中包含样本媒体，比如音频或视频，它们使用 <a href="https://tools.ietf.org/html/rfc8216#ref-AES_128" target="_blank" rel="noopener">AES-128</a> 进行加密。这种情况下 <strong>IV</strong> 属性可以出现也可以不出现。<br>☛ <strong>URI</strong>：指定密钥路径。该键是必须参数，除非 <strong>METHOD</strong> 为<code>NONE</code>。该密钥是一个 16 字节的数据。<br>☛ <strong>IV</strong>：该值是一个 128 位的十六进制数值。<a href="https://tools.ietf.org/html/rfc8216#ref-AES_128" target="_blank" rel="noopener">AES-128</a> 要求使用相同的 16字节 IV 值进行加密和解密。使用不同的 IV 值可以增强密码强度。<br>如果属性列表出现 <strong>IV</strong>，则使用该值；如果未出现，则默认使用媒体片段序列号（即 <strong>EXT-X-MEDIA-SEQUENCE</strong>）作为其 <strong>IV</strong> 值，使用大端字节序，往左填充 0 直到序列号满足 16 字节（128 位）。<br>☛ <strong>KEYFORMAT</strong>：由双引号包裹的字符串，标识密钥在密钥文件中的存储方式（密钥文件中的 <a href="https://tools.ietf.org/html/rfc8216#ref-AES_128" target="_blank" rel="noopener">AES-128</a> 密钥是以二进制方式存储的16个字节的密钥。）。该属性为可选参数，其默认值为 “identity”。使用该属性要求兼容版本号 <strong>EXT-X-VERSION</strong> 大于等于 5。<br>☛ <strong>KEYFORMATVERSIONS</strong>：由一个或多个被 “/“ 分割的正整型数值构成的带引号的字符串（比如：”1”，”1/2”，”1/2/5”）。如果有一个或多特定的 <strong>KEYFORMT</strong> 版本被定义了，则可使用该属性指示具体版本进行编译。该属性为可选参数，其默认值为 “1”。使用该属性要求兼容版本号 <strong>EXT-X-VERSION</strong> 大于等于 5。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-17" target="_blank" rel="noopener">EXT-X-MAP</a></strong>：该标签指明了获取媒体初始化块（Meida Initialization Section）的方法。该标签对其后所有媒体片段生效，直至遇到另一个 <strong>EXT-X-MAP</strong> 标签。<br>其格式为：<code>#EXT-X-MAP:&lt;attribute-list&gt;</code>，其属性列表取值范围如下：<br>☛ <strong>URI</strong>：由引号包裹的字符串，指定了包含媒体初始化块的资源的路径。该属性为必选参数。<br>☛ <strong>BYTERANGE</strong>：由引号包裹的字符串，指定了媒体初始化块在 <strong>URI</strong> 指定的资源的位置（片段）。该属性指定的范围应当只包含媒体初始化块。该属性为可选参数，如果未指定，则表示 <strong>URI</strong> 指定的资源就是全部的媒体初始化块。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-18" target="_blank" rel="noopener">EXT-X-PROGRAM-DATE-TIME</a></strong>：该标签使用一个绝对日期/时间表明第一个样本片段的取样时间。<br>其格式为：<code>#EXT-X-PROGRAM-DATE-TIME:&lt;date-time-msec&gt;</code>，其中，<code>date-time-msec</code>是一个 ISO/IEC 8601:2004 规定的日期格式，形如：YYYY-MM-DDThh:mm:ss.SSSZ。<br>▷ <strong>EXT-X-DATERANGE</strong>：该标签定义了一系列由属性/值对组成的日期范围。<br>其格式为：<code>#EXT-X-DATERANGE:&lt;attribute-list&gt;</code>，其属性列表取值如下：<br>☛ <strong>ID</strong>：双引号包裹的唯一指明日期范围的标识。该属性为必选参数。<br>☛ <strong>CLASS</strong>：双引号包裹的由客户定义的一系列属性与与之对应的语意值。所有拥有同一 <strong>CLASS</strong> 属性的日期范围必须遵守对应的语意。该属性为可选参数。<br>☛ <strong>START-DATE</strong>：双引号包裹的日期范围起始值。该属性为必选参数。<br>☛ <strong>END-DATE</strong>：双引号包裹的日期范围结束值。该属性值必须大于或等于 <strong>START-DATE</strong>。该属性为可选参数。<br>☛ <strong>DURATION</strong>：日期范围的持续时间是一个十进制浮点型数值类型（单位：秒）。该属性值不能为负数。当表达立即时间时，将该属性值设为 0 即可。该属性为可选参数。<br>☛ <strong>PLANNED-DURATION</strong>：该属性为日期范围的期望持续时长。其值为一个十进制浮点数值类型（单位：秒）。该属性值不能为负数。在预先无法得知真实持续时长的情况下，可使用该属性作为日期范围的期望预估时长。该属性为可选参数。<br>☛ <strong>X-<client-attribute></client-attribute></strong>：”X-“前缀是预留给客户端自定义属性的命名空间。客户端自定义属性名时，应当使用反向 DNS（reverse-DNS）语法来避免冲突。自定义属性值必须是使用双引号包裹的字符串，或者是十六进制序列，或者是十进制浮点数，比如：X-COM-EXAMPLE-AD-ID=”XYZ123”。该属性为可选参数。<br>☛ <strong>SCTE35-CMD, SCTE35-OUT, SCTE35-IN</strong>：用于携带 SCET-35 数据。该属性为可选参数。<br>☛ <strong>END-ON-NEXT</strong>：该属性值为一个可枚举字符串，其值必须为 YES。该属性表明达到该范围末尾，也即等于后续范围的起始位置 <strong>START-DATE</strong>。后续范围是指具有相同 <strong>CLASS</strong> 的，在该标签 <strong>START-DATE</strong> 之后的具有最早 <strong>START-DATE</strong> 值的日期范围。该属性时可选参数。</p></li><li><p><strong><a href="https://tools.ietf.org/html/rfc8216#page-22" target="_blank" rel="noopener">媒体播放列表类型标签</a></strong>：媒体播放列表标签为 m3u8 文件的全局参数信息。这些标签只能在 m3u8 文件中至多出现一次。媒体播放列表（Media Playlist）标签不能出现在主播放列表（Master Playlist）中。媒体播放列表具体标签如下所示：<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-22" target="_blank" rel="noopener">EXT-X-TARGETDURATION</a></strong>：表示每个视频分段最大的时长（单位秒）。该标签为必选标签。<br>其格式为：<code>#EXT-X-TARGETDURATION:&lt;s&gt;</code>，其中，参数<code>s</code>表示目标时长（单位：秒）。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-22" target="_blank" rel="noopener">EXT-X-MEDIA-SEQUENCE</a></strong>：表示播放列表第一个 URL 片段文件的序列号，每个媒体片段 URL 都拥有一个唯一的整型序列号。每个媒体片段序列号按出现顺序依次加 1。媒体片段序列号与片段文件名无关。如果该标签未指定，则默认序列号从 0 开始。<br>其格式为：<code>#EXT-X-MEDIA-SEQUENCE:&lt;number&gt;</code>，其中，参数<code>number</code>即为尾随切片序列号。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-23" target="_blank" rel="noopener">EXT-X-DISCONTINUITY-SEQUENCE</a></strong>：该标签使能同步相同流的不同 Rendition 和 具备 <strong>EXT-X-DISCONTINUITY</strong> 标签的不同备份流。<br>其格式为：<code>#EXT-X-DISCONTINUITY-SEQUENCE:&lt;number&gt;</code>，其中，参数<code>number</code>为一个十进制整型数值。<br>如果播放列表未设置 <strong>EXT-X-DISCONTINUITY-SEQUENCE</strong> 标签，那么对于第一个切片的中断序列号应当为 0。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-23" target="_blank" rel="noopener">EXT-X-ENDLIST</a></strong>：表明 m3u8 文件的结束。该标签可出现在 m3u8 文件任意位置，一般是结尾。<br>其格式为：<code>#EXT-X-ENDLIST</code>。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-24" target="_blank" rel="noopener">EXT-X-PLAYLIST-TYPE</a></strong>：表明流媒体类型。全局生效。该标签为可选标签。<br>其格式为：<code>#EXT-X-PLAYLIST-TYPE:&lt;type-enum&gt;</code>，其中，<code>type-enum</code>可选值如下：<br>☛ <strong>VOD</strong> 即 Video on Demand，表示该视屏流为点播源，因此服务器不能更改该 m3u8 文件；<br>☛ <strong>EVENT</strong> 表示该视频流为直播源，因此服务器不能更改或删除该文件任意部分内容（但是可以在文件末尾添加新内容）（注：<strong>VOD</strong> 文件通常带有 <strong>EXT-X-ENDLIST</strong> 标签，因为其为点播源，不会改变；而 <strong>EVEVT</strong> 文件初始化时一般不会有 <strong>EXT-X-ENDLIST</strong> 标签，暗示有新的文件会添加到播放列表末尾，因此也需要客户端定时获取该 m3u8 文件，以获取新的媒体片段资源，直到访问到 <strong>EXT-X-ENDLIST</strong> 标签才停止）。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-24" target="_blank" rel="noopener">EXT-X-I-FRAMES-ONLY</a></strong>：该标签表示每个媒体片段都是一个 I-frame。I-frames 帧视屏编码不依赖于其他帧数，因此可以通过 I-frame 进行快速播放，急速翻转等操作。该标签全局生效。<br>其格式为：<code>#EXT-X-I-FRAMES-ONLY</code>。<br>如果播放列表设置了 <strong>EXT-X-I-FRAMES-ONLY</strong>，那么切片的时长（<strong>EXTINF</strong> 标签的值）即为当前切片 I-frame 帧开始到下一个 I-frame 帧出现的时长。<br>媒体资源如果包含 I-frame 切片，那么必须提供媒体初始化块或者通过 <strong>EXT-X-MAP</strong> 标签提供媒体初始化块的获取途径，这样客户端就能通过这些 I-frame 切片以任意顺序进行加载和解码。如果 I-frame 切片设置了 <strong>EXT-BYTERANGE</strong>，那么就绝对不能提供媒体初始化块。<br>使用 <strong>EXT-X-I-FRAMES-ONLY</strong> 要求的兼容版本号 <strong>EXT-X-VERSION</strong> 大于等于 4。</p></li><li><p><strong><a href="https://tools.ietf.org/html/rfc8216#page-25" target="_blank" rel="noopener">主播放列表类型标签</a></strong>：主播放列表（Master Playlist）定义了备份流，多语言翻译流和其他全局参数。主播放列表标签绝不能出现在媒体播放列表（Media Playlist）中。其具体标签如下：<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-25" target="_blank" rel="noopener">EXT-X-MEDIA</a></strong>：用于指定相同内容的可替换的多语言翻译播放媒体列表资源。比如，通过三个 <strong>EXT-X-MEIDA</strong> 标签，可以提供包含英文，法语和西班牙语版本的相同内容的音频资源，或者通过两个 <strong>EXT-X-MEDIA</strong> 提供两个不同拍摄角度的视屏资源。<br>其格式为：<code>#EXT-X-MEDIA:&lt;attribute-list&gt;</code>，其中，属性列表取值范围如下：<br>☛ <strong>TYPE</strong>：该属性值为一个可枚举字符串。其值有如下四种：<code>AUDIO</code>，<code>VIDEO</code>，<code>SUBTITLES</code>，<code>CLOSED-CAPTIONS</code>。通常使用的都是<code>CLOSED-CAPTIONS</code>。该属性为必选参数。<br>☛ <strong>URI</strong>：双引号包裹的媒体资源播放列表路径。如果 <strong>TYPE</strong> 属性值为 <code>CLOSED-CAPTIONS</code>，那么则不能提供 <strong>URI</strong>。该属性为可选参数。<br>☛ <strong>GROUP-ID</strong>：双引号包裹的字符串，表示多语言翻译流所属组。该属性为必选参数。<br>☛ <strong>LANGUAGE</strong>：双引号包裹的字符串，用于指定流主要使用的语言。该属性为可选参数。<br>☛ <strong>ASSOC-LANGUAGE</strong>：双引号包裹的字符串，其内包含一个语言标签，用于提供多语言流的其中一种语言版本。该参数为可选参数。<br>☛ <strong>NAME</strong>：双引号包裹的字符串，用于为翻译流提供可读的描述信息。如果设置了 <strong>LANGUAGE</strong> 属性，那么也应当设置 <strong>NAME</strong> 属性。该属性为必选参数。<br>☛ <strong>DEFAULT</strong>：该属性值为一个可枚举字符串。可选值为<code>YES</code>和<code>NO</code>。如果该属性设为<code>YES</code>，那么客户端在缺乏其他可选信息时应当播放该翻译流。该属性未指定时默认值为<code>NO</code>。该属性为可选参数。<br>☛ <strong>AUTOSELECT</strong>：该属性值为一个可枚举字符串。其有效值为<code>YES</code>或<code>NO</code>。未指定时，默认设为<code>NO</code>。如果该属性设置<code>YES</code>，那么客户端在用户没有显示进行设置时，可以选择播放该翻译流，因为其能配置当前播放环境，比如系统语言选择。<br>如果设置了该属性，那么当 <strong>DEFAULT</strong> 设置<code>YES</code>时，该属性也必须设置为<code>YES</code>。<br>该属性为可选参数。<br>☛ <strong>FORCED</strong>：该属性值为一个可枚举字符串。其有效值为<code>YES</code>或<code>NO</code>。未指定时，默认设为<code>NO</code>。只有在设置了 <strong>TYPE</strong> 为 <strong>SUBTITLES</strong> 时，才可以设置该属性。<br>当该属性设为<code>YES</code>时，则暗示该翻译流包含重要内容。当设置了该属性，客户端应当选择播放匹配当前播放环境最佳的翻译流。<br>当该属性设为<code>NO</code>时，则表示该翻译流内容意图用于回复用户显示进行请求。<br>该属性为可选参数。<br>☛ <strong>INSTREAM-ID</strong>：由双引号包裹的字符串，用于指示切片的语言（Rendition）版本。当 <strong>TYPE</strong> 设为 <strong>CLOSED-CAPTIONS</strong> 时，必须设置该属性。其可选值为：”CC1”, “CC2”, “CC3”, “CC4” 和 “SERVICEn”（n 的值为 1~63）。<br>对于其他 <strong>TYPE</strong> 值，该属性绝不能进行设置。<br>☛ <strong>CHARACTERISTICS</strong>：由双引号包裹的由一个或多个由逗号分隔的 UTI 构成的字符串。每个 UTI 表示一种翻译流的特征。该属性可包含私有 UTI。该属性为可选参数。<br>☛ <strong>CHANNELS</strong>：由双引号包裹的有序，由反斜杠（”/“）分隔的参数列表组成的字符串。<br>所有音频 <strong>EXT-X-MEDIA</strong> 标签应当都设置 <strong>CHANNELS</strong> 属性。如果主播放列表包含两个相同编码但是具有不同数目 channed 的翻译流，则必须设置 <strong>CHANNELS</strong> 属性；否则，<strong>CHANNELS</strong> 属性为可选参数。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-29" target="_blank" rel="noopener">EXT-X-STREAM-INF</a></strong>：该属性指定了一个备份源。该属性值提供了该备份源的相关信息。<br>其格式为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#EXT-X-STREAM-INF:&lt;attribute-list&gt;</span><br><span class="line">   &lt;URI&gt;</span><br></pre></td></tr></table></figure><p>其中：<br>☛ <strong>URI</strong> 指定的媒体播放列表携带了该标签指定的翻译备份源。<strong>URI</strong> 为必选参数。</p></li><li><p><em>EXT-X-STREAM-INF*</em> 标签的参数属性列表有如下选项：<br>☛ <strong>BANDWIDTH</strong>：该属性为每秒传输的比特数，也即带宽。代表该备份流的巅峰速率。该属性为必选参数。<br>☛ <strong>AVERAGE-BANDWIDTH</strong>：该属性为备份流的平均切片传输速率。该属性为可选参数。<br>☛ <strong>CODECS</strong>：双引号包裹的包含由逗号分隔的格式列表组成的字符串。每个 <strong>EXT-X-STREAM-INF</strong> 标签都应当携带 <strong>CODECS</strong> 属性。<br>☛ <strong>RESOLUTION</strong>：该属性描述备份流视屏源的最佳像素方案。该属性为可选参数，但对于包含视屏源的备份流建议增加该属性设置。<br>☛ <strong>FRAME-RATE</strong>：该属性用一个十进制浮点型数值作为描述备份流所有视屏最大帧率。对于备份流中任意视屏源帧数超过每秒 30 帧的，应当增加该属性设置。该属性为可选参数，但对于包含视屏源的备份流建议增加该属性设置。<br>☛ <strong>HDCP-LEVEL</strong>：该属性值为一个可枚举字符串。其有效值为<code>TYPE-0</code>或<code>NONE</code>。其为建议性属性。值为<code>TYPE-0</code>表示该备份流可能会播放失败，除非输出被高带宽数字内容保护（HDCP）。值为<code>NONE</code>表示流内容无需输出拷贝保护。<br>使用不同程度的 HDCP 加密备份流应当使用不同的媒体加密密钥。<br>该属性为可选参数。在缺乏 HDCP 可能存在播放失败的情况下，应当提供该属性。<br>☛ <strong>AUDIO</strong>：属性值由双引号包裹，其值必须与定义在主播放列表某处的设置了 <strong>TYPE</strong> 属性值为 <strong>AUDIO</strong> 的 <strong>EXT-X-MEDIA</strong> 标签的 <strong>GROUP-ID</strong> 属性值相匹配。该属性为可选参数。<br>☛ <strong>VIDEO</strong>：属性值由双引号包裹，其值必须与定义在主播放列表某处的设置了 <strong>TYPE</strong> 属性值为 <strong>VIDEO</strong> 的 <strong>EXT-X-MEDIA</strong> 标签的 <strong>GROUP-ID</strong> 属性值相匹配。该属性为可选参数。<br>☛ <strong>SUBTITLES</strong>：属性值由双引号包裹，其值必须与定义在主播放列表某处的设置了 <strong>TYPE</strong> 属性值为 <strong>SUBTITLES</strong> 的 <strong>EXT-X-MEDIA</strong> 标签的 <strong>GROUP-ID</strong> 属性值相匹配。该属性为可选参数。<br>☛ <strong>CLOSED-CAPTIONS</strong>：该属性值可以是一个双引号包裹的字符串或<code>NONE</code>。如果其值为一个字符串，则必须与定义在主播放列表某处的设置了 <strong>TYPE</strong> 属性值为 <strong>CLOSED-CAPTIONS</strong> 的 <strong>EXT-X-MEDIA</strong> 标签的 <strong>GROUP-ID</strong> 属性值相匹配。如果其值为<code>NONE</code>，则所有的 <strong>ext-x-stream-inf</strong> 标签必须同样将该属性设置<code>NONE</code>，表示主播放列表备份流均没有关闭的标题。对于某个备份流具备关闭标题，另一个备份流不具备关闭标题可能会触发播放不连续。该属性为可选参数。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-33" target="_blank" rel="noopener">EXT-X-I-FRAME-STREAM-INF</a></strong>：该属性表明媒体播放列表文件包含多种媒体资源的 I-frame 帧。<br>其格式为：<code>#EXT-X-I-FRAME-STREAM-INF:&lt;attribute-list&gt;</code>，该标签的属性列表包含了 <strong>EXT-X-I-FRAME-STREAM-INF</strong> 标签同样的属性列表选项，除了 <strong>FRAME-RATE</strong>，<strong>AUDIO</strong>，<strong>SUBTITLES</strong> 和 <strong>CLOSED-CAPTIONS</strong>。除此之外，其他的属性还有：<br>☛ <strong>URI</strong>：该属性值由双引号包裹的字符串，指示了 I-frame 媒体播放列表文件的路径，该媒体播放列表文件必须包含 <strong>EXT-X-I-FRAMES-ONLY</strong> 标签。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-34" target="_blank" rel="noopener">EXT-X-SESSION-DATA</a></strong>：该标签允许主播放列表携带任意 session 数据。<br>其格式为：<code>#EXT-X-SESSION-DATA:&lt;attribute-list&gt;</code>，其中，其参数属性列表值如下可选项:<br>☛ <strong>DATA-ID</strong>：由双引号包裹的字符串，代表一个特定的数据值。该属性应当使用反向 DNS 进行命名，如 “com.example.movie.title”。然而，由于没有中央注册机构，所以可能出现冲突情况。给属性为必选参数。<br>☛ <strong>VALUE</strong>：该属性值为一个双引号包裹的字符串，其包含 <strong>DATA-ID</strong> 指定的值。如果设置了 <strong>LANGUAGE</strong>，则 <strong>VALUE</strong> 应当包含一个用该语言书写的可读字符串。<br>☛ <strong>URI</strong>：由双引号包裹的 URI 字符串。由该 URI 指示的资源必选使用 JSON 格式，否则，客户端可能会解析失败。<br>☛ <strong>LANGUAGE</strong>：由双引号包裹的，包含一个语言标签的字符串。指示了 <strong>VALUE</strong> 所使用的语言。该属性为可选参数。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-35" target="_blank" rel="noopener">EXT-X-SESSION-KEY</a></strong>：该标签允许用于媒体播放列表的加密密钥由主播放列表指定。这使得客户端可以预先加载这些密钥，而无需从媒体播放列表中获取。<br>其格式为：<code>#EXT-X-SESSION-KEY:&lt;attribute-list&gt;</code>,其属性列表与 <strong>EXT-X-KEY</strong> 相同，除了 <strong>METHOD</strong> 属性的值必须不为<code>NONE</code>。该属性为可选参数。</p></li><li><p><strong><a href="https://tools.ietf.org/html/rfc8216#page-35" target="_blank" rel="noopener">播放列表类型标签</a></strong>：以下标签可同时设置与主播放列表（Master Playlist）和媒体播放列表（Media Playlist）中。但是对于在主播放列表中设置了的标签，不应当再次设置在主播放列表指向的媒体播放列表中。同时出现在两者播放列表的相同标签必须具备相同的值。这些标签在播放列表中不能出现多次（只能使用一次）。具体标签如下所示：<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-35" target="_blank" rel="noopener">EXT-X-INDEPENDENT-SEGMENTS</a></strong>：该标签表明所有媒体片段中的所有媒体样本无需其他切片信息即可独立进行解码。该属性对列表内所有媒体片段生效。<br>其格式为：<code>#EXT-X-INDEPENDENT-SEGMENTS</code>。<br>如果该标签出现在主播放列表中，则其对所有媒体播放列表的所有媒体片段都生效。<br>▷ <strong><a href="https://tools.ietf.org/html/rfc8216#page-36" target="_blank" rel="noopener">EXT-X-START</a></strong>：该标签表示播放列表播放起始位置。默认情况下，客户端开启一个播放会话时，应当使用该标签指定的位置进行播放。该标签为可选标签。<br>其格式为：<code>#EXT-X-START:&lt;attribute-list&gt;</code>，其参数属性列表的取值范围如下：<br>☛ <strong>TIME-OFFSET</strong>：该属性值为一个带符号十进制浮点数（单位：秒）。一个正数表示以播放列表起始位置开始的时间偏移量。一个负数表示播放列表上一个媒体片段最后位置往前的时间偏移量。<br>该属性的绝对值应当不超过播放列表的时长。如果超过，则表示到达文件结尾（数值为正数），或者达到文件起始（数值为负数）。<br>如果播放列表不包含 <strong>EXT-X-ENDLIST</strong> 标签，那么 <strong>TIME-OFFSET</strong> 属性值不应当在播放文件末尾三个切片时长之内。<br>☛ <strong>PRECISE</strong>：该值为一个可枚举字符串。有效的取值为<code>YES</code> 或 <code>NO</code>。如果值为<code>YES</code>，客户端应当播放包含 <strong>TIME-OFFSET</strong> 的媒体片段，但不要渲染该块内优先于 <strong>TIME-OFFSET</strong> 的样本块。如果值为<code>NO</code>，客户端应当尝试渲染在媒体片段内的所有样本块。该属性为可选参数，未指定则认为<code>NO</code>。</p></li></ul><p>到此，m3u8 相关的标签我们已经完全介绍完毕。</p><p>下面我们再简答介绍下资源文件的获取具体操作。</p><p>上文提到，m3u8 文件要么是媒体播放列表，要么是主播放列表。但无论是哪种列表，其有效组成均由两部分构成：</p><ul><li>以 <strong>#EXT</strong> 开头的为标签信息，作为对媒体资源的进一步描述；</li><li>剩余的为资源信息，要么是片段资源（Media Playlist）路径，要么是 m3u8 资源（Master Playlist）路径；</li></ul><p>我们先简单介绍下 m3u8 文件媒体片段的表示方法：</p><ul><li><p>m3u8 文件中，媒体片段可以采用全路径表示。如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#EXTINF:10.0,</span><br><span class="line">http:&#x2F;&#x2F;example.com&#x2F;movie1&#x2F;fileSequenceA.ts</span><br></pre></td></tr></table></figure><p>这样，获取资源片段的路径就是 m3u8 文件内指定的路径，即：<a href="http://example.com/movie1/fileSequenceA.ts" target="_blank" rel="noopener">http://example.com/movie1/fileSequenceA.ts</a></p></li><li><p>m3u8 文件中，媒体片段还可以使用相对路径表示。如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#EXTINF:10.0,</span><br><span class="line">fileSequenceA.ts</span><br></pre></td></tr></table></figure><p>这表示片段文件的路径是相对于 m3u8 文件路径的，即假设当前 m3u8 的路径为：<a href="https://127.0.0.1/hls/m3u8，那么，片段文件" target="_blank" rel="noopener">https://127.0.0.1/hls/m3u8，那么，片段文件</a> fileSequenceA.ts 的路径即为：<a href="https://127.0.0.1/hls/fileSequenceA.ts" target="_blank" rel="noopener">https://127.0.0.1/hls/fileSequenceA.ts</a></p></li></ul><p>尽管可以在 m3u8 文件中使用绝对路径指定媒体片段资源路径，但是更好的选择是使用相对路径。相对路径相较于绝对路径更轻便，同时是相对于 m3u8 文件的 URL。相比之下，绝对路径增加了 m3u8 文件内容（更多字符），增大了文件内容，同时也增大了网络传输量。</p><h2 id="其余一些注意事项"><a href="#其余一些注意事项" class="headerlink" title="其余一些注意事项"></a>其余一些注意事项</h2><ul><li><p>有两种请求 m3u8 播放列表的方法：一是通过 m3u8 的 URI 进行请求，则该文件必须以 .m3u8 或 .m3u 结尾；二是通过 <a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a> 进行请求，则请求头 Content-Type 必须设置为 “application/vnd.apple.mpegurl” 或者 “audio/mpegurl”。</p></li><li><p>空行和注释行在解析时都忽略。</p></li><li><p>媒体播放列表（Media Playlist）的流资源总时长就是各切片资源的时长之和。</p></li><li><p>每个切片的码率（bit rate）就是切片的大小除以它对应的时长（<strong>EXTINF</strong> 指定的时长）。</p></li><li><p>一个标签的属性列表的同一个属性<code>AttributeName</code>只能出现一次。</p></li><li><p><strong>EXT-X-TARGETDURATION</strong> 指定的时长绝对不能进行更改。通常该值指定的时长为 10 秒。</p></li><li><p>对于指定了 <strong>EXT-X-I-FRAMES-ONLY</strong> 且 第一个媒体片段（或者第一个尾随 <strong>EXT-X-DISCONTINUITY</strong> 的片段）其资源没有立即携带媒体初始化块的切片，应当增加使用标签 <strong>EXT-X-MAP</strong> 指定媒体初始化块获取途径。</p></li><li><p>使用 <strong>EXT-X-MAP</strong> 标签内含标签 <strong>EXT-X-I-FRAMES-ONLY</strong> 要求的兼容版本号 <strong>EXT-X-VERSION</strong> 要大于等于 5；只使用 <strong>EXT-X-MAP</strong> 要求的兼容版本号要大于等于 6。</p></li><li><p>由标签 <strong>EXT-X-MAP</strong> 声明的媒体初始化块可使用 <a href="https://tools.ietf.org/html/rfc8216#ref-AES_128" target="_blank" rel="noopener">AES-128</a> 方法进行加密，此时，作用于 <strong>EXT-X-MAP</strong> 标签的 <strong>EXT-X-KEY</strong> 标签必须设置 <strong>IV</strong> 属性。</p></li><li><p>带有属性 <strong>END-ON-NEXT=YES</strong> 的标签 <strong>EXT-X-DATERANGE</strong> 必须携带 <strong>CLASS</strong> 属性，但不能携带 <strong>DURATION</strong> 和 <strong>END-DATE</strong> 属性。其余带有相同 <strong>CLASS</strong> 的标签 <strong>EXT-X-DATERANGE</strong> 不能指定重叠的日期范围。</p></li><li><p>日期范围如果未指明 <strong>DURATION</strong>，<strong>END_DATE</strong>,<strong>END-ON-NEXT=YES</strong> 属性时，则其时长（duration）未知，即使其设置了 <strong>PLANNED-DURATION</strong> 属性。</p></li><li><p>如果播放列表设置了 <strong>EXT-X-DATERANGE</strong> 标签，则必须同时设置 <strong>EXT-X-PROGRAM-DATE-TIME</strong> 标签。</p></li><li><p>如果播放列表设置了拥有相同 <strong>ID</strong> 属性值的两个 <strong>EXT-X-DATERANGE</strong> 标签，则对于相同的属性名，在这两个 <strong>EXT-X-DATERANGE</strong> 中对应的值必须一致。</p></li><li><p>如果 <strong>EXT-X-DATERANGE</strong> 同时设置了 <strong>DURATION</strong> 和 <strong>END-DATE</strong> 属性，则 <strong>END-DATE</strong> 属性值必须等于 <strong>START-DATE</strong> 属性值加上 <strong>DURATION</strong> 属性值。</p></li><li><p><strong>EXT-X-MEDIA-SEQUENCE</strong> 标签必须出现在播放列表第一个切片之前。</p></li><li><p><strong>EXT-X-DISCONTINUITY-DEQUENCE</strong> 标签必须出现在播放列表第一个切片之前。</p></li><li><p><strong>EXT-X-DISCONTINUITY-DEQUENCE</strong> 标签必须出现在任意 <strong>EXT-X-DISCONTINUITY</strong> 标签之前。</p></li><li><p>m3u8 文件如果没有设置 <strong>EXT-X-PLAYLIST-TYPE</strong> 标签，那么播放列表可以随时进行更改。比如，可以更新或删除播放列表中的媒体片段。</p></li><li><p>每个 <strong>EXT-X-I-FRAME-STREAM-INF</strong> 标签必须包含一个 <strong>BANDWIDTH</strong> 和 <strong>URI</strong> 属性。</p></li><li><p>每个 <strong>EXT-X-SESSION-DATA</strong> 标签都必须包含一个 <strong>VALUE</strong> 或 <strong>URI</strong> 属性，但不能同时包含两者。</p></li><li><p>一个播放列表可以包含多个携带相同 <strong>DATA-ID</strong> 属性的 <strong>EXT-X-SESSION-DATA</strong> 标签。但是不能包含多个携带相同 <strong>DATA-ID</strong> 和相同 <strong>LANGUAGE</strong> 属性的 <strong>EXT-X-SESSION-DATA</strong> 标签。</p></li><li><p>如果设置了 <strong>EXT-X-SESSION-KEY</strong>，那么其 <strong>METHOD</strong>，<strong>KEYFORMAT</strong> 和 <strong>KEYFORMATVERSIONS</strong> 属性值必须与任意相同 <strong>URI</strong> 的 <strong>EXT-X-KEY</strong> 标签值相同。</p></li><li><p>如果多份备用流或者多语言流使用相同的加密密钥和格式，则应当设置 <strong>EXT-X-SESSION-KEY</strong> 标签。</p></li><li><p>主播放列表必须不能设置多个具有相同 <strong>METHOD</strong>，<strong>URI</strong>，<strong>IV</strong>，<strong>KEYFORMAT</strong> 和 <strong>KEYFORMATVERSIONS</strong> 属性值得 <strong>EXT-X-SESSION-KEY</strong> 标签。</p></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><p><a href="https://developer.apple.com/streaming/" target="_blank" rel="noopener">苹果官方文档</a></p></li><li><p><a href="https://tools.ietf.org/html/rfc8216" target="_blank" rel="noopener">HTTP Live Streaming - rfc8216</a></p></li><li><p><a href="https://blog.csdn.net/weiyuefei/article/details/54598819" target="_blank" rel="noopener">视频内容加密封装技术研究</a></p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>m3u8</tag>
        <tag>hls</tag>
      </tags>
  </entry>
</search>
